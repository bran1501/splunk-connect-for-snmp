{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Splunk Connect for SNMP \u00b6 THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback. Let your account team know you are testing Splunk Connect for SNMP. Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Home"},{"location":"#splunk-connect-for-snmp","text":"THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback. Let your account team know you are testing Splunk Connect for SNMP. Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Splunk Connect for SNMP"},{"location":"configuration/","text":"Configuration \u00b6 In this section, we refer to these required files for configuring the scheduler: 1. scheduler-inventory.yaml 2. scheduler-config.yaml 3. traps-server-config.yaml When installing SC4SNMP via HELM, we can easily configure all these files from one point of management: config_values.yaml . The structure is: files : scheduler : inventory : | <- scheduler-inventory.yaml address,version,community,walk_interval,profiles,SmartProfiles,delete 10.0.0.1,2c,homelab,300,,, config : | <- scheduler-config.yaml celery: broker: type: \"rabbitmq\" # Sample Configuration file ipv4: True ipv6: False communities: ... traps : config : <- traps-server-config.yaml snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml -f static_values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace Traps Configuration \u00b6 traps-server-config.yaml config.yaml Splunk Connect for SNMP supports receiving SNMPv1 traps, SNMPv2 traps, and SNMPv3 traps. To use this functionality, configure using authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in traps-server-config.yaml ( files: traps: config part of config_values.yaml ). Non-authorized traps/informs will not work. Configure SNMPv1/v2c community strings \u00b6 Add SNMPv1/SNMPv2c community strings under v1/v2 section, respectively. Params : community string (required) - SNMPv1/SNMPv2c community string. Configure SNMPv3 users \u00b6 It gets a little more complex with respect to SNMPv3. The user database in a SNMPv3 application is actually referenced by a combination of the user\u2019s name (called a \"security Name\") and an identifier for the given SNMP application you\u2019re talking to (called an \"engineID\"). Therefore, both userName and engineID are required for SNMPv3 under the v3 section. Params : userName (required) - A human-readable string representing the name of the SNMP USM user. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 authKey (optional) - Initial value of the secret authentication key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user are encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT privKey (optional) - Initial value of the secret encryption key. securityEngineId (required): The EngineID of the authoritative SNMP engine that the traps were sent from. e.g. snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" v3 : - userName : snmpv3test authKey : AuthPass1 privKey : PrivPass2 securityEngineId : 8000000004030201 - userName : snmpv3test2 authProtocol : SHA authKey : AuthPass11 privProtocol : aes privKey : PrivPass22 securityEngineId : 8000000004030202 - userName : snmpv3test3 securityEngineId : 8000000004030203 Poller \u00b6 Scheduler Configuration \u00b6 scheduler-config.yaml config.yaml scheduler-inventory.yaml inventory.csv Splunk Connect for SNMP supports polling from SNMPv1 agents, SNMPv2 agents, and SNMPv3 agents. To use this functionality, configure using authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ). inventory.csv \u00b6 Inventory.csv ( files: scheduler: inventory part of config_values.yaml ) acts as a lookup table where the poller application will read the SNMP agents\u2019 information and its corresponding query information. address , version , community , walk_interval , profiles , SmartProfiles , delete 10 . 0 . 0 . 1 , 2 c , homelab , 300 ,,, \" IP:Port of SNMP agents, where port is optional with default of 161 \" , \" An indication of SNMP versions \" , \" community string for SNMPv1/v2 OR userNanme for SNMPv3 \" , \" query info \" , \" query frequency in seconds \" \"e.g. 174.62.79.72 (IP only) | 174.62.79.72:161 (IP+port)\",\"e.g. 1 | 2c | 3\", \"e.g. public (SNMPv1/SNMPv2c community string) | testUser (SNMPv3 username, setup other params in config.yaml)\",\"e.g 1.3.6.1.2.1.1.9.1.3.1 (single oid for snmp get) | 1.3.6.1.2.1.1.9.1.3.* (oid for snmp walk to get subtree) | router (profile used to setup detials in config.yaml\", \"e.g. 30\" config.yaml \u00b6 config.yaml acts as an extension for inventory.csv for these three situations. 1. Configure optional parameters for SNMPv1/SNMPv2c community data \u00b6 Community-Based Security Model of SNMPv1/SNMPv2c may require more parameters, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv1/SNMPv2c community string as Key under the communities section. Add necessary parameters. Here are supported optional parameters: communityIndex (optional) - Unique index value of a row in snmpCommunityTable. If it is the only positional parameter, it is treated as a communityName. contextEngineId (optional) - Indicates the location of the context in which management information is accessed when using the community string specified by the communityName. contextName (optional) - The context in which management information is accessed when using the above communityName. tag (optional) - Arbitrary string that specifies a set of transport endpoints from which a command responder application will accept management requests with a given communityName or to which notification originator application will send notifications when targets are specified by a tag value(s). 2. Configure optional parameters SNMPv3 users \u00b6 SNMPv3 users may require more parameters for different security levels, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv3 userName as Key under usernames section. Add necessary parameters. Here are supported optional parameters: authKey (optional) - Initial value of the secret authentication key. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 privKey (optional) - Initial value of the secret encryption key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT securityEngineId (optional): The snmpEngineID of the authoritative SNMP engine to which a dateRequest message is to be sent. securityName (optional): Along with the snmpEngineID, it identifies a row in the SNMP-USER-BASED-SM-MIB::usmUserTable that is to be used for securing the message. authKeyType (optional): int. Type of authKey material. privKeyType (optional): int. Type of privKey material. contextName : (optional) contextName is used to name an instance of MIB. SNMP engine may serve several instances of the same MIB within possibly multiple SNMP entities. SNMP context is a tool for unambiguously identifying a collection of MIB variables behind the SNMP engine. e.g. usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : testauthKey privKey : testprivKey authProtocol : SHA privProtocol : AES securityEngineId : 8000000004030201 securityName : authKeyType : 0 privKeyType : 0 contextName : \"4c9184f37cff01bcdc32dc486ec36961\" 3. Configure more detailed query information \u00b6 Users can provide more detailed query information under the profiles section to achieve two purposes: 1) query by mib string; 2) query multiple oids/mib string for one agent. In scheduler-inventory.yaml ( files: scheduler: inventory part of config_values.yaml ), add the profile string(e.g. router) to the profile field under data > inventory.csv section. \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,router,30 In scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ), add the desired query information under the profiles > \\ > varBinds section as list entries. e.g. profiles > router > varBinds . When you use the mib string, you MUST follow the Syntax below [ \"MIB-Files\" , \"MIB object name\" , \"MIB index number\" ] Where \u201cMIB index number\u201d is optional. Specify the index number when you want to get the information for a specific interface. e.g. [\"SNMPv2-MIB\", \"sysUpTime\", 0] Don\u2019t specify the index number when you want to get information for all interfaces. e.g. [\"SNMPv2-MIB\", \"sysORID\"] Note : A wrong index number would cause an error. If you are not sure which index exists, don\u2019t put it at all. For example, in the situation where [\"SNMPv2-MIB\", \"sysUpTime\", 0] exsits, both [\"SNMPv2-MIB\", \"sysUpTime\", 0] and [\"SNMPv2-MIB\", \"sysUpTime\"] will help you get [\"SNMPv2-MIB\", \"sysUpTime\", 0], while [\"SNMPv2-MIB\", \"sysUpTime\", 1] will throw erroe because index 1 doesn't exist for sysUpTime. profiles : router : varBinds : # Syntax: [ \"MIB-Files\", \"MIB object name\", \"MIB index number\"] - [ 'SNMPv2-MIB' , 'sysDescr' , 0 ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysORID' ] - [ 'CISCO-FC-MGMT-MIB' , 'cfcmPortLcStatsEntry' ] - [ 'EFM-CU-MIB' , 'efmCuPort' ] - '1.3.6.1.2.1.1.6.0' - '1.3.6.1.2.1.1.9.1.4.*' 4. Configure additional field to the metrics data \u00b6 Users can make every metric data include a profile name (which is not included by default) by adding profile under the additionalMetricField in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) e.g. additionalMetricField : - profile 5. Configure poller to return query with additional fields present \u00b6 Users can add an enricher section to make poller enrich queries sent to Splunk by adding additional dimensions. There are two types of fields: 1. existingVarBinds : this section updates query results with new fields calculated from the existing SNMP information. 2. additionalVarBinds : this section updates query results with additional parameters defined below. Existing VarBinds \u00b6 For now, existingVarBinds section works only for IF-MIB oid family. Every property of IF-MIB family can be extracted and added as an additional dimension to the query. For example, if we want to see the name and the index of the interface along with the basic query information, the enricher must be structured as follows: enricher : oidFamily : IF-MIB : existingVarBinds : - ifIndex : 'interface_index' - ifDescr : 'interface_desc' Let\u2019s run a metrics query in Splunk Search: | msearch \"index\"=\"em_metrics\" While enricher is not being used, the example result is: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } After adding the enricher structure as noted above, the same result should contain \u201cinterface_index\u201d and \u201cinterface_desc\u201d: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 interface_desc : lo interface_index : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } For an event query in Splunk Search: index=\"*\" sourcetype=\"sc4snmp:meta\" Before using enricher , the search result is structured as following: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" When using the same enricher as in the example above, in the result string two new fields \u201cinterface_index\u201d and \u201cinterface_desc\u201d are visible: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" interface_index=\"2\" interface_desc=\"eth0\" The value of newly added properties is calculated according to current query index. For IF-MIB::ifAdminStatus. 2 we\u2019re interested in IF-MIB::ifIndex. 2 and IF-MIB::ifDescr. 2 . IF-MIB::ifNumber.0 = INTEGER : 2 IF-MIB::ifIndex.1 = INTEGER : 1 IF-MIB::ifIndex.2 = INTEGER : 2 IF-MIB::ifDescr.1 = STRING : lo IF-MIB::ifDescr.2 = STRING : eth0 Any other IF-MIB property can be inserted to existingVarBinds. existingVarBinds list parameters existingVarBinds part description example key the key is the word between OID family identifier and the index for ex. for MTU extraction, the key is ifMtu (derived from IF-MIB:: ifMtu .1) value the field name shown as an additional dimension in Splunk interface_mtu Additional VarBinds \u00b6 1. Index number \u2013 indexNum \u00b6 For every OID family there is an option to add index number as an additional dimension to both event and metrics data. In order to enable it, the enricher must be structured as follows: enricher : oidFamily : IF-MIB : additionalVarBinds : - indexNum : 'index_number' SNMPv2-MIB : additionalVarBinds : - indexNum : 'index_number' For the above configuration, every query concerning IF-MIB or SNMPv2-MIB has an additional index_number field equal to the index number of current record, for ex.: For event query: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.2.2=\"eth0\" value1=\"eth0\" IF-MIB::ifDescr.2=\"eth0\" index_number=\"2\" For metrics query: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 index_num : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } Additional varbinds available to configure variable description indexNum index number of current record, for ex. SNMPv2-MIB::sysORID.5 -> index_num is 5 additionalVarBinds list parameters additionalVarBinds part description example key the key is the value from additional varbinds table above indexNum value the field name shown as an additional dimension in Splunk index_number , index_num , if_mib_index_number Test the poller \u00b6 SNMPv1/SNMPv2 You can change the inventory contents in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) and use the following command to apply the changes to the Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under the section inventory.csv , and the content below is interpreted as a .csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in files: scheduler: config part of config_values.yaml ) frequency in seconds (how often SNMP connector should ask agent for data) `csv address,version,community,walk_interval,profiles,SmartProfiles,delete 10.0.0.1,2c,homelab,300,,, ` microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml -f static_values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace SNMPv3 Besides changing the inventory contents under the section files: scheduler: inventory part of config_values.yaml , you may need to set up security passphrases for the SNMPv3 under the section files: scheduler: config: usernames part of config_values.yaml . Here are the steps to configure these two SNMPv3 Users. User Name Security Auth Priv Auth Priv Level Protocol Protocol Passphrase Passphrase testUser1 Auth,Priv MD5 DES auctoritas privatus testUser2 Auth,Priv SHA AES authpass privacypass Specify User Name under community filed in section files: scheduler: inventory part of config_values.yaml . address,version,community,walk_interval,profiles,SmartProfiles,delete 10.0.0.1,2c,homelab,300,,, 10.0.0.2:143,2c,homelab,300,,, 10.0.0.2:143,2c,homelab,300,,, Specify other security parameters under section files: scheduler: config part of config_values.yaml . usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : authpass privKey : privacypass authProtocol : SHA privProtocol : AES Apply the changes. microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml -f static_values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace","title":"Configuration"},{"location":"configuration/#configuration","text":"In this section, we refer to these required files for configuring the scheduler: 1. scheduler-inventory.yaml 2. scheduler-config.yaml 3. traps-server-config.yaml When installing SC4SNMP via HELM, we can easily configure all these files from one point of management: config_values.yaml . The structure is: files : scheduler : inventory : | <- scheduler-inventory.yaml address,version,community,walk_interval,profiles,SmartProfiles,delete 10.0.0.1,2c,homelab,300,,, config : | <- scheduler-config.yaml celery: broker: type: \"rabbitmq\" # Sample Configuration file ipv4: True ipv6: False communities: ... traps : config : <- traps-server-config.yaml snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml -f static_values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace","title":"Configuration"},{"location":"configuration/#traps-configuration","text":"traps-server-config.yaml config.yaml Splunk Connect for SNMP supports receiving SNMPv1 traps, SNMPv2 traps, and SNMPv3 traps. To use this functionality, configure using authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in traps-server-config.yaml ( files: traps: config part of config_values.yaml ). Non-authorized traps/informs will not work.","title":"Traps Configuration"},{"location":"configuration/#configure-snmpv1v2c-community-strings","text":"Add SNMPv1/SNMPv2c community strings under v1/v2 section, respectively. Params : community string (required) - SNMPv1/SNMPv2c community string.","title":"Configure SNMPv1/v2c community strings"},{"location":"configuration/#configure-snmpv3-users","text":"It gets a little more complex with respect to SNMPv3. The user database in a SNMPv3 application is actually referenced by a combination of the user\u2019s name (called a \"security Name\") and an identifier for the given SNMP application you\u2019re talking to (called an \"engineID\"). Therefore, both userName and engineID are required for SNMPv3 under the v3 section. Params : userName (required) - A human-readable string representing the name of the SNMP USM user. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 authKey (optional) - Initial value of the secret authentication key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user are encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT privKey (optional) - Initial value of the secret encryption key. securityEngineId (required): The EngineID of the authoritative SNMP engine that the traps were sent from. e.g. snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" v3 : - userName : snmpv3test authKey : AuthPass1 privKey : PrivPass2 securityEngineId : 8000000004030201 - userName : snmpv3test2 authProtocol : SHA authKey : AuthPass11 privProtocol : aes privKey : PrivPass22 securityEngineId : 8000000004030202 - userName : snmpv3test3 securityEngineId : 8000000004030203","title":"Configure SNMPv3 users"},{"location":"configuration/#poller","text":"","title":"Poller"},{"location":"configuration/#scheduler-configuration","text":"scheduler-config.yaml config.yaml scheduler-inventory.yaml inventory.csv Splunk Connect for SNMP supports polling from SNMPv1 agents, SNMPv2 agents, and SNMPv3 agents. To use this functionality, configure using authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ).","title":"Scheduler Configuration"},{"location":"configuration/#inventorycsv","text":"Inventory.csv ( files: scheduler: inventory part of config_values.yaml ) acts as a lookup table where the poller application will read the SNMP agents\u2019 information and its corresponding query information. address , version , community , walk_interval , profiles , SmartProfiles , delete 10 . 0 . 0 . 1 , 2 c , homelab , 300 ,,, \" IP:Port of SNMP agents, where port is optional with default of 161 \" , \" An indication of SNMP versions \" , \" community string for SNMPv1/v2 OR userNanme for SNMPv3 \" , \" query info \" , \" query frequency in seconds \" \"e.g. 174.62.79.72 (IP only) | 174.62.79.72:161 (IP+port)\",\"e.g. 1 | 2c | 3\", \"e.g. public (SNMPv1/SNMPv2c community string) | testUser (SNMPv3 username, setup other params in config.yaml)\",\"e.g 1.3.6.1.2.1.1.9.1.3.1 (single oid for snmp get) | 1.3.6.1.2.1.1.9.1.3.* (oid for snmp walk to get subtree) | router (profile used to setup detials in config.yaml\", \"e.g. 30\"","title":"inventory.csv"},{"location":"configuration/#configyaml","text":"config.yaml acts as an extension for inventory.csv for these three situations.","title":"config.yaml"},{"location":"configuration/#1-configure-optional-parameters-for-snmpv1snmpv2c-community-data","text":"Community-Based Security Model of SNMPv1/SNMPv2c may require more parameters, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv1/SNMPv2c community string as Key under the communities section. Add necessary parameters. Here are supported optional parameters: communityIndex (optional) - Unique index value of a row in snmpCommunityTable. If it is the only positional parameter, it is treated as a communityName. contextEngineId (optional) - Indicates the location of the context in which management information is accessed when using the community string specified by the communityName. contextName (optional) - The context in which management information is accessed when using the above communityName. tag (optional) - Arbitrary string that specifies a set of transport endpoints from which a command responder application will accept management requests with a given communityName or to which notification originator application will send notifications when targets are specified by a tag value(s).","title":"1. Configure optional parameters for SNMPv1/SNMPv2c community data"},{"location":"configuration/#2-configure-optional-parameters-snmpv3-users","text":"SNMPv3 users may require more parameters for different security levels, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv3 userName as Key under usernames section. Add necessary parameters. Here are supported optional parameters: authKey (optional) - Initial value of the secret authentication key. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 privKey (optional) - Initial value of the secret encryption key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT securityEngineId (optional): The snmpEngineID of the authoritative SNMP engine to which a dateRequest message is to be sent. securityName (optional): Along with the snmpEngineID, it identifies a row in the SNMP-USER-BASED-SM-MIB::usmUserTable that is to be used for securing the message. authKeyType (optional): int. Type of authKey material. privKeyType (optional): int. Type of privKey material. contextName : (optional) contextName is used to name an instance of MIB. SNMP engine may serve several instances of the same MIB within possibly multiple SNMP entities. SNMP context is a tool for unambiguously identifying a collection of MIB variables behind the SNMP engine. e.g. usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : testauthKey privKey : testprivKey authProtocol : SHA privProtocol : AES securityEngineId : 8000000004030201 securityName : authKeyType : 0 privKeyType : 0 contextName : \"4c9184f37cff01bcdc32dc486ec36961\"","title":"2. Configure optional parameters SNMPv3 users"},{"location":"configuration/#3-configure-more-detailed-query-information","text":"Users can provide more detailed query information under the profiles section to achieve two purposes: 1) query by mib string; 2) query multiple oids/mib string for one agent. In scheduler-inventory.yaml ( files: scheduler: inventory part of config_values.yaml ), add the profile string(e.g. router) to the profile field under data > inventory.csv section. \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,router,30 In scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ), add the desired query information under the profiles > \\ > varBinds section as list entries. e.g. profiles > router > varBinds . When you use the mib string, you MUST follow the Syntax below [ \"MIB-Files\" , \"MIB object name\" , \"MIB index number\" ] Where \u201cMIB index number\u201d is optional. Specify the index number when you want to get the information for a specific interface. e.g. [\"SNMPv2-MIB\", \"sysUpTime\", 0] Don\u2019t specify the index number when you want to get information for all interfaces. e.g. [\"SNMPv2-MIB\", \"sysORID\"] Note : A wrong index number would cause an error. If you are not sure which index exists, don\u2019t put it at all. For example, in the situation where [\"SNMPv2-MIB\", \"sysUpTime\", 0] exsits, both [\"SNMPv2-MIB\", \"sysUpTime\", 0] and [\"SNMPv2-MIB\", \"sysUpTime\"] will help you get [\"SNMPv2-MIB\", \"sysUpTime\", 0], while [\"SNMPv2-MIB\", \"sysUpTime\", 1] will throw erroe because index 1 doesn't exist for sysUpTime. profiles : router : varBinds : # Syntax: [ \"MIB-Files\", \"MIB object name\", \"MIB index number\"] - [ 'SNMPv2-MIB' , 'sysDescr' , 0 ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysORID' ] - [ 'CISCO-FC-MGMT-MIB' , 'cfcmPortLcStatsEntry' ] - [ 'EFM-CU-MIB' , 'efmCuPort' ] - '1.3.6.1.2.1.1.6.0' - '1.3.6.1.2.1.1.9.1.4.*'","title":"3. Configure more detailed query information"},{"location":"configuration/#4-configure-additional-field-to-the-metrics-data","text":"Users can make every metric data include a profile name (which is not included by default) by adding profile under the additionalMetricField in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) e.g. additionalMetricField : - profile","title":"4. Configure additional field to the metrics data"},{"location":"configuration/#5-configure-poller-to-return-query-with-additional-fields-present","text":"Users can add an enricher section to make poller enrich queries sent to Splunk by adding additional dimensions. There are two types of fields: 1. existingVarBinds : this section updates query results with new fields calculated from the existing SNMP information. 2. additionalVarBinds : this section updates query results with additional parameters defined below.","title":"5. Configure poller to return query with additional fields present"},{"location":"configuration/#existing-varbinds","text":"For now, existingVarBinds section works only for IF-MIB oid family. Every property of IF-MIB family can be extracted and added as an additional dimension to the query. For example, if we want to see the name and the index of the interface along with the basic query information, the enricher must be structured as follows: enricher : oidFamily : IF-MIB : existingVarBinds : - ifIndex : 'interface_index' - ifDescr : 'interface_desc' Let\u2019s run a metrics query in Splunk Search: | msearch \"index\"=\"em_metrics\" While enricher is not being used, the example result is: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } After adding the enricher structure as noted above, the same result should contain \u201cinterface_index\u201d and \u201cinterface_desc\u201d: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 interface_desc : lo interface_index : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } For an event query in Splunk Search: index=\"*\" sourcetype=\"sc4snmp:meta\" Before using enricher , the search result is structured as following: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" When using the same enricher as in the example above, in the result string two new fields \u201cinterface_index\u201d and \u201cinterface_desc\u201d are visible: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" interface_index=\"2\" interface_desc=\"eth0\" The value of newly added properties is calculated according to current query index. For IF-MIB::ifAdminStatus. 2 we\u2019re interested in IF-MIB::ifIndex. 2 and IF-MIB::ifDescr. 2 . IF-MIB::ifNumber.0 = INTEGER : 2 IF-MIB::ifIndex.1 = INTEGER : 1 IF-MIB::ifIndex.2 = INTEGER : 2 IF-MIB::ifDescr.1 = STRING : lo IF-MIB::ifDescr.2 = STRING : eth0 Any other IF-MIB property can be inserted to existingVarBinds. existingVarBinds list parameters existingVarBinds part description example key the key is the word between OID family identifier and the index for ex. for MTU extraction, the key is ifMtu (derived from IF-MIB:: ifMtu .1) value the field name shown as an additional dimension in Splunk interface_mtu","title":"Existing VarBinds"},{"location":"configuration/#additional-varbinds","text":"","title":"Additional VarBinds"},{"location":"configuration/#1-index-number-indexnum","text":"For every OID family there is an option to add index number as an additional dimension to both event and metrics data. In order to enable it, the enricher must be structured as follows: enricher : oidFamily : IF-MIB : additionalVarBinds : - indexNum : 'index_number' SNMPv2-MIB : additionalVarBinds : - indexNum : 'index_number' For the above configuration, every query concerning IF-MIB or SNMPv2-MIB has an additional index_number field equal to the index number of current record, for ex.: For event query: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.2.2=\"eth0\" value1=\"eth0\" IF-MIB::ifDescr.2=\"eth0\" index_number=\"2\" For metrics query: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 index_num : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } Additional varbinds available to configure variable description indexNum index number of current record, for ex. SNMPv2-MIB::sysORID.5 -> index_num is 5 additionalVarBinds list parameters additionalVarBinds part description example key the key is the value from additional varbinds table above indexNum value the field name shown as an additional dimension in Splunk index_number , index_num , if_mib_index_number","title":"1. Index number -- indexNum"},{"location":"configuration/#test-the-poller","text":"SNMPv1/SNMPv2 You can change the inventory contents in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) and use the following command to apply the changes to the Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under the section inventory.csv , and the content below is interpreted as a .csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in files: scheduler: config part of config_values.yaml ) frequency in seconds (how often SNMP connector should ask agent for data) `csv address,version,community,walk_interval,profiles,SmartProfiles,delete 10.0.0.1,2c,homelab,300,,, ` microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml -f static_values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace SNMPv3 Besides changing the inventory contents under the section files: scheduler: inventory part of config_values.yaml , you may need to set up security passphrases for the SNMPv3 under the section files: scheduler: config: usernames part of config_values.yaml . Here are the steps to configure these two SNMPv3 Users. User Name Security Auth Priv Auth Priv Level Protocol Protocol Passphrase Passphrase testUser1 Auth,Priv MD5 DES auctoritas privatus testUser2 Auth,Priv SHA AES authpass privacypass Specify User Name under community filed in section files: scheduler: inventory part of config_values.yaml . address,version,community,walk_interval,profiles,SmartProfiles,delete 10.0.0.1,2c,homelab,300,,, 10.0.0.2:143,2c,homelab,300,,, 10.0.0.2:143,2c,homelab,300,,, Specify other security parameters under section files: scheduler: config part of config_values.yaml . usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : authpass privKey : privacypass authProtocol : SHA privProtocol : AES Apply the changes. microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml -f static_values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace","title":"Test the poller"},{"location":"planning/","text":"Planning \u00b6 Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances when a more feature-complete solution, such as the Splunk Universal Forwarder, is not available. Architecture \u00b6 SC4SNMP is deployed using a Kubernetes distribution, typically MicroK8s, that\u2019s deseigned to be a low-touch experience for integration with sensitive edge network devices. It will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall. Requirements \u00b6 A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create or obtain real and token Planning Infrastructure \u00b6 Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP, (SC4SNMP) note the limitations highlighted above.","title":"Planning"},{"location":"planning/#planning","text":"Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances when a more feature-complete solution, such as the Splunk Universal Forwarder, is not available.","title":"Planning"},{"location":"planning/#architecture","text":"SC4SNMP is deployed using a Kubernetes distribution, typically MicroK8s, that\u2019s deseigned to be a low-touch experience for integration with sensitive edge network devices. It will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall.","title":"Architecture"},{"location":"planning/#requirements","text":"A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create or obtain real and token","title":"Requirements"},{"location":"planning/#planning-infrastructure","text":"Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP, (SC4SNMP) note the limitations highlighted above.","title":"Planning Infrastructure"},{"location":"configuration/deployment-configuration/","text":"Deployment Configuration \u00b6 values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / splunk - connect - for - snmp -- version < VERSION_TAG > > values . yaml variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none The whole file is divided into the following components: scheduler - more detail scheduler configuration worker - more detail worker configuration poller - more detail poller configuration traps - more detail trap configuration mongodb - more detail mongo configuration rabbitmq - more detail rabbitmq configuration Shared values \u00b6 All of the components have the resources field for adjusting memory resources: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More information about the concept of resources can be found in the kuberentes documentation .","title":"Deployment"},{"location":"configuration/deployment-configuration/#deployment-configuration","text":"values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / splunk - connect - for - snmp -- version < VERSION_TAG > > values . yaml variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none The whole file is divided into the following components: scheduler - more detail scheduler configuration worker - more detail worker configuration poller - more detail poller configuration traps - more detail trap configuration mongodb - more detail mongo configuration rabbitmq - more detail rabbitmq configuration","title":"Deployment Configuration"},{"location":"configuration/deployment-configuration/#shared-values","text":"All of the components have the resources field for adjusting memory resources: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More information about the concept of resources can be found in the kuberentes documentation .","title":"Shared values"},{"location":"configuration/mongo-configuration/","text":"Mongo DB Configuration \u00b6 Mongo DB is used as database for keeping schedules. Mongo DB configuration file \u00b6 Mongo DB configuration is keep in values.yaml file in section mongodb . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: mongodb : pdb : create : true persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: MongoDB on Kubernetes ]","title":"Mongo DB"},{"location":"configuration/mongo-configuration/#mongo-db-configuration","text":"Mongo DB is used as database for keeping schedules.","title":"Mongo DB Configuration"},{"location":"configuration/mongo-configuration/#mongo-db-configuration-file","text":"Mongo DB configuration is keep in values.yaml file in section mongodb . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: mongodb : pdb : create : true persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: MongoDB on Kubernetes ]","title":"Mongo DB configuration file"},{"location":"configuration/poller-configuration/","text":"Poller Configuration \u00b6 Instruction contains configuration documentation for Poller. Poller is a service which is responsible for quering SNMP devices using SNMP GET, SNMP WALK functionality. Poller executes two main type of tasks tasks: - Walk task execute SNMP walk. SNMP walk is an SNMP application that uses SNMP GETNEXT requests to collect SNMP data from network and infrastructure SNMP-enabled devices, such as switches and routers. It is time consuming task, which may overload SNMP device when execute too often. It is use by SC4SNMP to callect and push all OIDs values which provided ACL has access to. - Get task - It is light weight task which goal is to query subset of OIDs defined by customer. Task is dedicated to enabled monitoring of most important OIDs with high frequency like memory or CPU utilisation. Poller configuration file \u00b6 Poller configuration is keep in values.yaml file in section poller. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Poller example configuration: poller : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory : | address,version,community,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,2c,public,60,,, Configure inventory \u00b6 inventory section in poller enable to configure inventory for polling data: - address [REQUIRED] - IP address which SC4SNMP should connect to collect data from. - version [REQUIRED] - SNMP version, values allowed: 1, 2c, 3 - community [OPTIONAL] - SNMP community string, filed is required when version is 1 or 2c - walk_interval [OPTIONAL] - Define interval in second for SNMP walk, default value 42000 - profiles - list of SNMP profiles which need to be used for device. More than one profile can be added by semicolon separation eg. profiale1;profile2 . More about profile in Profile Configuration - SmartProfiles - enabled SmartProfile, default value true. Allowed value: true , false . Default value is true - delete - flags which define if inventory should be deleted from scheduled tasks for walk and gets. Allowed value: true , false . Default value is false . Example: poller : inventory : | address,version,community,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,2c,public,60,,, Configure user secrets for SNMPv3 \u00b6 usernameSecrets key in poller enable configure SNMPv3 secrets for polling data. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration Example: poller : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des","title":"Poller"},{"location":"configuration/poller-configuration/#poller-configuration","text":"Instruction contains configuration documentation for Poller. Poller is a service which is responsible for quering SNMP devices using SNMP GET, SNMP WALK functionality. Poller executes two main type of tasks tasks: - Walk task execute SNMP walk. SNMP walk is an SNMP application that uses SNMP GETNEXT requests to collect SNMP data from network and infrastructure SNMP-enabled devices, such as switches and routers. It is time consuming task, which may overload SNMP device when execute too often. It is use by SC4SNMP to callect and push all OIDs values which provided ACL has access to. - Get task - It is light weight task which goal is to query subset of OIDs defined by customer. Task is dedicated to enabled monitoring of most important OIDs with high frequency like memory or CPU utilisation.","title":"Poller Configuration"},{"location":"configuration/poller-configuration/#poller-configuration-file","text":"Poller configuration is keep in values.yaml file in section poller. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Poller example configuration: poller : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory : | address,version,community,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,2c,public,60,,,","title":"Poller configuration file"},{"location":"configuration/poller-configuration/#configure-inventory","text":"inventory section in poller enable to configure inventory for polling data: - address [REQUIRED] - IP address which SC4SNMP should connect to collect data from. - version [REQUIRED] - SNMP version, values allowed: 1, 2c, 3 - community [OPTIONAL] - SNMP community string, filed is required when version is 1 or 2c - walk_interval [OPTIONAL] - Define interval in second for SNMP walk, default value 42000 - profiles - list of SNMP profiles which need to be used for device. More than one profile can be added by semicolon separation eg. profiale1;profile2 . More about profile in Profile Configuration - SmartProfiles - enabled SmartProfile, default value true. Allowed value: true , false . Default value is true - delete - flags which define if inventory should be deleted from scheduled tasks for walk and gets. Allowed value: true , false . Default value is false . Example: poller : inventory : | address,version,community,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,2c,public,60,,,","title":"Configure inventory"},{"location":"configuration/poller-configuration/#configure-user-secrets-for-snmpv3","text":"usernameSecrets key in poller enable configure SNMPv3 secrets for polling data. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration Example: poller : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des","title":"Configure user secrets for SNMPv3"},{"location":"configuration/rabbitmq-configuration/","text":"RabbitMQ configuration \u00b6 RabbitMQ is a service with is used as queue service for SC4SNMP. It is queuing tasks like SNMP Walk and GETs. RabbitMQ configuration file \u00b6 RabbitMQ configuration is keep in values.yaml file in section rabbitmq . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: rabbitmq : pdb : create : true replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: RabbitMQ on Kubernetes","title":"Rabbitmq configuration"},{"location":"configuration/rabbitmq-configuration/#rabbitmq-configuration","text":"RabbitMQ is a service with is used as queue service for SC4SNMP. It is queuing tasks like SNMP Walk and GETs.","title":"RabbitMQ configuration"},{"location":"configuration/rabbitmq-configuration/#rabbitmq-configuration-file","text":"RabbitMQ configuration is keep in values.yaml file in section rabbitmq . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: rabbitmq : pdb : create : true replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: RabbitMQ on Kubernetes","title":"RabbitMQ configuration file"},{"location":"configuration/scheduler-configuration/","text":"Scheduler configuration \u00b6 Scheduler is a service with is responsible for manager schedules for SNMP walks and GETs. Schedules definition are store in Mongo DB. Scheduler configuration file \u00b6 Scheduler configuration is keep in values.yaml file in section scheduler . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: scheduler : logLevel : \"WARN\" profiles : | test_profile: frequency: 5 condition: type: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - \"^.*\" varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [\"SNMPv2-MIB\", \"sysDescr\",0] Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN Configure profile \u00b6 Profiles used in inventory can be created in values.yaml , which can be modified in scheduler config in values.yaml , ex.: scheduler : profiles : | #Name of profile basev1: # Define frequency for profile frequency: 10 #Define condition condition: # Define type of condition. Allowed value field and base typy: field field: \"SNMPv2-MIB.sysDescr\" # Define paterns patterns: - '.*STRING_TO_BE_MATCHED.*' #Define varbinds to query varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0] varBinds configuration \u00b6 varBinds short for \u201cvariable binding\u201d in SNMP. The combination of an Object Identifier (OID) and a value. varBinds are use for defining in profiles what OIDs should be getting from SNMP Agents. varBinds is required subsection of each profile. Syntax configuration of varBinds looks following: [ \u201cMIB-Component\u201d, \u201cMIB object\u201d[Optional], \u201cMIB index number\u201d[Optional]] MIB-Component - The SNMP MIB, itself, consists of distinct component MIBs, each of which refers to a specific defined collection of management information that is part of the overall SNMP MIB eg. SNMPv2-MIB . If only MIB-Component is set than all whole sub tree is getting. MIB object - The SNMP MIB stores only simple data types: scalars and two-dimensional arrays of scalars, called tables. Keywords SYNTAX, ACCESS, and DESCRIPTION as well as other keywords such as STATUS and INDEX are used to define the SNMP MIB managed objects. MIB index number - Define index number for given MIB Object eg. 0 . Example ```yaml varBinds: # Syntax: [ \u201cMIB-Component\u201d, \u201cMIB object name\u201d[Optional], \u201cMIB index number\u201d[Optional]] - [\u2018SNMPv2-MIB\u2019] - [\u2018SNMPv2-MIB\u2019, \u2018sysName\u2019] - [\u2018SNMPv2-MIB\u2019, \u2018sysUpTime\u2019,0] #### Static Profile configuration Static Profile are used when they are defined on list of profile in inventory configuration in ` poller ` service [ Inventory configuration ]( poller - configuration . md / # configure - inventory ). Static Profile are executed even if SmartProfile flag in inventory is set to false . To configure Static Profile following value need to be set in ` profiles ` section : - ` ProfileName ` - define as subsection key in ` profiles ` . - ` frequency ` - define interval between executing SNMP gets in second . - ` varBinds ` - define var binds to query . Example : ``` yaml scheduler : profiles : | static_profile_example : frequency : 20 varBinds : - [ ' SNMPv2 - MIB ' ] - [ ' SNMPv2 - MIB ' , ' sysName ' ] - [ ' SNMPv2 - MIB ' , ' sysUpTime ' , 0 ] SmartProfile configuration \u00b6 SmartProfile are executed when SmartProfile flag in inventory is set to true and condition defined in profile matching. More information about configuring inventory can be found in Inventory configuration To configure Static Profile following value need to be set in profiles section: - ProfileName - define as subsection key in profiles . - frequency - define interval between executing SNMP gets in second. - condition - section define conditions to much profile - type - key of condition section which defines type of condition. Allowed value basic and field . - base type of condition will be executed always when SmartProfile in inventory is set to true. - field type of condition will be executed if match pattern for defined field . Supported fields: - \u201cSNMPv2-MIB.sysDescr\u201d - \u201cSNMPv2-MIB.sysObjectID\u201d - fild Define filed name for condition type field. - pattern Define list of regular expression pattern for MIB object field defined in field section. - varBinds - define var binds to query. Example of basic type of condition scheduler : profiles : | SmartProfile_basic_example: frequency: 10 condition: typy: \"basic\" varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] Example of field type of condition scheduler : profiles : | SmartProfile_field_example: frequency: 10 condition: typy: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - '.*STRING_TO_BE_MATCHED.*' varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName']","title":"Scheduler"},{"location":"configuration/scheduler-configuration/#scheduler-configuration","text":"Scheduler is a service with is responsible for manager schedules for SNMP walks and GETs. Schedules definition are store in Mongo DB.","title":"Scheduler configuration"},{"location":"configuration/scheduler-configuration/#scheduler-configuration-file","text":"Scheduler configuration is keep in values.yaml file in section scheduler . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: scheduler : logLevel : \"WARN\" profiles : | test_profile: frequency: 5 condition: type: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - \"^.*\" varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [\"SNMPv2-MIB\", \"sysDescr\",0]","title":"Scheduler configuration file"},{"location":"configuration/scheduler-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Define log level"},{"location":"configuration/scheduler-configuration/#configure-profile","text":"Profiles used in inventory can be created in values.yaml , which can be modified in scheduler config in values.yaml , ex.: scheduler : profiles : | #Name of profile basev1: # Define frequency for profile frequency: 10 #Define condition condition: # Define type of condition. Allowed value field and base typy: field field: \"SNMPv2-MIB.sysDescr\" # Define paterns patterns: - '.*STRING_TO_BE_MATCHED.*' #Define varbinds to query varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0]","title":"Configure profile"},{"location":"configuration/scheduler-configuration/#varbinds-configuration","text":"varBinds short for \u201cvariable binding\u201d in SNMP. The combination of an Object Identifier (OID) and a value. varBinds are use for defining in profiles what OIDs should be getting from SNMP Agents. varBinds is required subsection of each profile. Syntax configuration of varBinds looks following: [ \u201cMIB-Component\u201d, \u201cMIB object\u201d[Optional], \u201cMIB index number\u201d[Optional]] MIB-Component - The SNMP MIB, itself, consists of distinct component MIBs, each of which refers to a specific defined collection of management information that is part of the overall SNMP MIB eg. SNMPv2-MIB . If only MIB-Component is set than all whole sub tree is getting. MIB object - The SNMP MIB stores only simple data types: scalars and two-dimensional arrays of scalars, called tables. Keywords SYNTAX, ACCESS, and DESCRIPTION as well as other keywords such as STATUS and INDEX are used to define the SNMP MIB managed objects. MIB index number - Define index number for given MIB Object eg. 0 . Example ```yaml varBinds: # Syntax: [ \u201cMIB-Component\u201d, \u201cMIB object name\u201d[Optional], \u201cMIB index number\u201d[Optional]] - [\u2018SNMPv2-MIB\u2019] - [\u2018SNMPv2-MIB\u2019, \u2018sysName\u2019] - [\u2018SNMPv2-MIB\u2019, \u2018sysUpTime\u2019,0] #### Static Profile configuration Static Profile are used when they are defined on list of profile in inventory configuration in ` poller ` service [ Inventory configuration ]( poller - configuration . md / # configure - inventory ). Static Profile are executed even if SmartProfile flag in inventory is set to false . To configure Static Profile following value need to be set in ` profiles ` section : - ` ProfileName ` - define as subsection key in ` profiles ` . - ` frequency ` - define interval between executing SNMP gets in second . - ` varBinds ` - define var binds to query . Example : ``` yaml scheduler : profiles : | static_profile_example : frequency : 20 varBinds : - [ ' SNMPv2 - MIB ' ] - [ ' SNMPv2 - MIB ' , ' sysName ' ] - [ ' SNMPv2 - MIB ' , ' sysUpTime ' , 0 ]","title":"varBinds configuration"},{"location":"configuration/scheduler-configuration/#smartprofile-configuration","text":"SmartProfile are executed when SmartProfile flag in inventory is set to true and condition defined in profile matching. More information about configuring inventory can be found in Inventory configuration To configure Static Profile following value need to be set in profiles section: - ProfileName - define as subsection key in profiles . - frequency - define interval between executing SNMP gets in second. - condition - section define conditions to much profile - type - key of condition section which defines type of condition. Allowed value basic and field . - base type of condition will be executed always when SmartProfile in inventory is set to true. - field type of condition will be executed if match pattern for defined field . Supported fields: - \u201cSNMPv2-MIB.sysDescr\u201d - \u201cSNMPv2-MIB.sysObjectID\u201d - fild Define filed name for condition type field. - pattern Define list of regular expression pattern for MIB object field defined in field section. - varBinds - define var binds to query. Example of basic type of condition scheduler : profiles : | SmartProfile_basic_example: frequency: 10 condition: typy: \"basic\" varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] Example of field type of condition scheduler : profiles : | SmartProfile_field_example: frequency: 10 condition: typy: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - '.*STRING_TO_BE_MATCHED.*' varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName']","title":"SmartProfile configuration"},{"location":"configuration/snmpv3-configuration/","text":"Create SNMP v3 users \u00b6 Configuration of SNMP v3 when supported by the monitored devices is the most secure choice available for authentication and data privacy. Each set of credentials will be stored as \u201cSecret\u201d objects in k8s and will be referenced in the values.yaml. This allows the secret to be created once including automation by third party password managers then consumed without storing sensitive data in plain text. # <secretname>=Arbitrary name of the secret often the same as the username or prefixed with \"sc4snmp-\" # <namespace>=Namespace used to install sc4snmp # <username>=the SNMPv3 Username # <key>=key note must be at least 8 char long subject to target limitations # <authProtocol>=One of SHA (SHA1) or MD5 # <privProtocol>=One of AES or DES # Note MD5 and DES are considered insecure but must be supported for standards compliance kubectl create -n <namespace> secret generic <secretname> \\ --from-literal = userName = <username> \\ --from-literal = authKey = <key> \\ --from-literal = privKey = <key> \\ --from-literal = authProtocol = <authProtocol> \\ --from-literal = privProtocol = <privProtocol> Configured credential can be use in poller and trap service. In services configuration secretname need to be provided.","title":"SNMPv3 configuration"},{"location":"configuration/snmpv3-configuration/#create-snmp-v3-users","text":"Configuration of SNMP v3 when supported by the monitored devices is the most secure choice available for authentication and data privacy. Each set of credentials will be stored as \u201cSecret\u201d objects in k8s and will be referenced in the values.yaml. This allows the secret to be created once including automation by third party password managers then consumed without storing sensitive data in plain text. # <secretname>=Arbitrary name of the secret often the same as the username or prefixed with \"sc4snmp-\" # <namespace>=Namespace used to install sc4snmp # <username>=the SNMPv3 Username # <key>=key note must be at least 8 char long subject to target limitations # <authProtocol>=One of SHA (SHA1) or MD5 # <privProtocol>=One of AES or DES # Note MD5 and DES are considered insecure but must be supported for standards compliance kubectl create -n <namespace> secret generic <secretname> \\ --from-literal = userName = <username> \\ --from-literal = authKey = <key> \\ --from-literal = privKey = <key> \\ --from-literal = authProtocol = <authProtocol> \\ --from-literal = privProtocol = <privProtocol> Configured credential can be use in poller and trap service. In services configuration secretname need to be provided.","title":"Create SNMP v3 users"},{"location":"configuration/trap-configuration/","text":"Trap Configuration \u00b6 Trap service is a simple server which can handle SNMP traps sent by SNMP devices like rauter or switches. Trap configuration file \u00b6 Trap configuration is keep in values.yaml file in section traps. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Trap example configuration: traps : communities : 1 : - public 2c : - public - homelab usernameSecrets : - secretv3 - sc4snmp-homesecure-sha-des # Overrides the image tag whose default is the chart appVersion. logLevel : \"WARN\" # replicas: Number of replicas for trap container should be 2x number of nodes replicas : 2 #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.202.4.202 Define communities \u00b6 communities define version of SNMP protocol and SNMP community string which should be use. communities key is split by protocol version, supported values are 1 and 2c . Under version SNMP community string can be defined. Example: traps : communities : 1 : - public 2c : - public - homelab Configure user secrets for SNMPv3 \u00b6 usernameSecrets key in traps enable configure SNMPv3 secrets for trap messages sent by SNMP device. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in Example: traps : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des Define load balancer IP \u00b6 loadBalancerIP is the IP address in the metallb pool. Example: traps : loadBalancerIP : 10.202.4.202 Define number of traps server replica \u00b6 replicas Defines number of replicas for trap container should be 2x number of nodes. Default value is 2 . Example: traps : replicas : 2 Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Trap"},{"location":"configuration/trap-configuration/#trap-configuration","text":"Trap service is a simple server which can handle SNMP traps sent by SNMP devices like rauter or switches.","title":"Trap Configuration"},{"location":"configuration/trap-configuration/#trap-configuration-file","text":"Trap configuration is keep in values.yaml file in section traps. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Trap example configuration: traps : communities : 1 : - public 2c : - public - homelab usernameSecrets : - secretv3 - sc4snmp-homesecure-sha-des # Overrides the image tag whose default is the chart appVersion. logLevel : \"WARN\" # replicas: Number of replicas for trap container should be 2x number of nodes replicas : 2 #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.202.4.202","title":"Trap configuration file"},{"location":"configuration/trap-configuration/#define-communities","text":"communities define version of SNMP protocol and SNMP community string which should be use. communities key is split by protocol version, supported values are 1 and 2c . Under version SNMP community string can be defined. Example: traps : communities : 1 : - public 2c : - public - homelab","title":"Define communities"},{"location":"configuration/trap-configuration/#configure-user-secrets-for-snmpv3","text":"usernameSecrets key in traps enable configure SNMPv3 secrets for trap messages sent by SNMP device. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in Example: traps : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des","title":"Configure user secrets for SNMPv3"},{"location":"configuration/trap-configuration/#define-load-balancer-ip","text":"loadBalancerIP is the IP address in the metallb pool. Example: traps : loadBalancerIP : 10.202.4.202","title":"Define load balancer IP"},{"location":"configuration/trap-configuration/#define-number-of-traps-server-replica","text":"replicas Defines number of replicas for trap container should be 2x number of nodes. Default value is 2 . Example: traps : replicas : 2","title":"Define number of traps server replica"},{"location":"configuration/trap-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Define log level"},{"location":"configuration/worker-configuration/","text":"Worker Configuration \u00b6 Worker is a service with is responsible for tasks execution like: SNMP Walk, GET or serve Trap messages. Worker configuration file \u00b6 Worker configuration is keep in values.yaml file in section worker . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. worker : # replicas: Number of replicas for worker container should two or more replicas : 2 logLevel : \"WARN\" Define number of worker server replica \u00b6 replicas Defines number of replicas for worker container should be 2x number of nodes. Default value is 2 . Example: worker : replicas : 2 Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Worker"},{"location":"configuration/worker-configuration/#worker-configuration","text":"Worker is a service with is responsible for tasks execution like: SNMP Walk, GET or serve Trap messages.","title":"Worker Configuration"},{"location":"configuration/worker-configuration/#worker-configuration-file","text":"Worker configuration is keep in values.yaml file in section worker . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. worker : # replicas: Number of replicas for worker container should two or more replicas : 2 logLevel : \"WARN\"","title":"Worker configuration file"},{"location":"configuration/worker-configuration/#define-number-of-worker-server-replica","text":"replicas Defines number of replicas for worker container should be 2x number of nodes. Default value is 2 . Example: worker : replicas : 2","title":"Define number of worker server replica"},{"location":"configuration/worker-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Define log level"},{"location":"gettingstarted/k8s-microk8s/","text":"MicroK8s installation on Ubuntu \u00b6 We need to have a normal install of kubectl because of operator scripts sudo snap install microk8s --classic Add user to the microk8s group to no longer have to use the sudo command sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Check microk8s status microk8s status --wait-ready Install required microk8s dependencies to deploy SC4SNMP. Note: when installing metallb you will be prompted for one or more IPs to use as entry points Into the cluster. If your plan to enable clustering, this IP should not be assigned to the host (floats) If you do not plan to cluster, then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax microk8s enable dns metallb rbac storage openebs helm3 microk8s status --wait-ready","title":"Install Microk8s"},{"location":"gettingstarted/k8s-microk8s/#microk8s-installation-on-ubuntu","text":"We need to have a normal install of kubectl because of operator scripts sudo snap install microk8s --classic Add user to the microk8s group to no longer have to use the sudo command sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Check microk8s status microk8s status --wait-ready Install required microk8s dependencies to deploy SC4SNMP. Note: when installing metallb you will be prompted for one or more IPs to use as entry points Into the cluster. If your plan to enable clustering, this IP should not be assigned to the host (floats) If you do not plan to cluster, then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax microk8s enable dns metallb rbac storage openebs helm3 microk8s status --wait-ready","title":"MicroK8s installation on Ubuntu"},{"location":"gettingstarted/sc4snmp-installation/","text":"SC4SNMP Helm installation \u00b6 Add SC4SNMP repository \u00b6 microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now the package should be visible in helm3 search command result: microk8s helm3 search repo snmp --devel Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / splunk - connect - for - snmp 0 . 11 . 0 - beta . 22 0 . 11 . 0 - beta . 22 A Helm chart for SNMP Connect for SNMP Download and modify values.yaml \u00b6 curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d Install SC4SNMP \u00b6 microk8s helm3 install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none From now on, when editing SC4SNMP configuration, the configuration change must be inserted in the corresponding section of values.yaml . For more details check configuration section. Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none Verify deployment \u00b6 In a few minutes, all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE snmp - splunk - connect - for - snmp - worker - 66685 fcb6d - f6rxb 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - scheduler - 6586488 d85 - t6j5d 1 / 1 Running 0 6 m4s snmp - mongodb - arbiter - 0 1 / 1 Running 0 6 m4s snmp - mibserver - 6 f575ddb7d - mmkmn 1 / 1 Running 0 6 m4s snmp - mongodb - 0 2 / 2 Running 0 6 m4s snmp - mongodb - 1 2 / 2 Running 0 4 m58s snmp - rabbitmq - 0 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - traps - 54 f79b945d - bmbg7 1 / 1 Running 0 6 m4s Test SNMP Traps \u00b6 Test the Trap by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system with SNMP installed. Replace the IP address 10.0.101.22 with the shared IP address above apt update apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.2.1.1.4 1 .3.6.1.2.1.1.4 s test Search Splunk: You should see one event per trap command with the host value of the test machine IP address index = \"netops\" sourcetype = \"sc4snmp:traps\" Test SNMP Poller \u00b6 Test the Poller by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system install snmpd. apt update apt-get install snmpd To test snmp poller, snmpd need to be configure to listening on external IP. To enabled listening snmpd to external IP, in configuration file: /etc/snmp/snmpd.conf replace the IP address 10.0.101.22 with the server IP address where snmpd is configured agentaddress 10.0.101.22,127.0.0.1,[::1] . Restart snmpd by execute command: service snmpd stop service snmpd start Configure SC4SNMP Poller to test add IP address which need to be poll. Add configuration entry in value.yaml file by replace the IP address 10.0.101.22 with the server IP address where snmpd were configured. poller: usernameSecrets: - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory: | address,version,community,walk_interval,profiles,SmartProfiles,delete 10 .0.101.22,public,60,,, Load value.yaml file in SC4SNMP microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none Check in Splunk Up to 1 min events appear in Splunk: index = \"netops\" sourcetype = \"sc4snmp:event\" Up to 1 min events appear in Splunk: | mpreview index = \"netmetrics\" | search sourcetype = \"sc4snmp:metric\"","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#sc4snmp-helm-installation","text":"","title":"SC4SNMP Helm installation"},{"location":"gettingstarted/sc4snmp-installation/#add-sc4snmp-repository","text":"microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now the package should be visible in helm3 search command result: microk8s helm3 search repo snmp --devel Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / splunk - connect - for - snmp 0 . 11 . 0 - beta . 22 0 . 11 . 0 - beta . 22 A Helm chart for SNMP Connect for SNMP","title":"Add SC4SNMP repository"},{"location":"gettingstarted/sc4snmp-installation/#download-and-modify-valuesyaml","text":"curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d","title":"Download and modify values.yaml"},{"location":"gettingstarted/sc4snmp-installation/#install-sc4snmp","text":"microk8s helm3 install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none From now on, when editing SC4SNMP configuration, the configuration change must be inserted in the corresponding section of values.yaml . For more details check configuration section. Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#verify-deployment","text":"In a few minutes, all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE snmp - splunk - connect - for - snmp - worker - 66685 fcb6d - f6rxb 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - scheduler - 6586488 d85 - t6j5d 1 / 1 Running 0 6 m4s snmp - mongodb - arbiter - 0 1 / 1 Running 0 6 m4s snmp - mibserver - 6 f575ddb7d - mmkmn 1 / 1 Running 0 6 m4s snmp - mongodb - 0 2 / 2 Running 0 6 m4s snmp - mongodb - 1 2 / 2 Running 0 4 m58s snmp - rabbitmq - 0 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - traps - 54 f79b945d - bmbg7 1 / 1 Running 0 6 m4s","title":"Verify deployment"},{"location":"gettingstarted/sc4snmp-installation/#test-snmp-traps","text":"Test the Trap by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system with SNMP installed. Replace the IP address 10.0.101.22 with the shared IP address above apt update apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.2.1.1.4 1 .3.6.1.2.1.1.4 s test Search Splunk: You should see one event per trap command with the host value of the test machine IP address index = \"netops\" sourcetype = \"sc4snmp:traps\"","title":"Test SNMP Traps"},{"location":"gettingstarted/sc4snmp-installation/#test-snmp-poller","text":"Test the Poller by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system install snmpd. apt update apt-get install snmpd To test snmp poller, snmpd need to be configure to listening on external IP. To enabled listening snmpd to external IP, in configuration file: /etc/snmp/snmpd.conf replace the IP address 10.0.101.22 with the server IP address where snmpd is configured agentaddress 10.0.101.22,127.0.0.1,[::1] . Restart snmpd by execute command: service snmpd stop service snmpd start Configure SC4SNMP Poller to test add IP address which need to be poll. Add configuration entry in value.yaml file by replace the IP address 10.0.101.22 with the server IP address where snmpd were configured. poller: usernameSecrets: - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory: | address,version,community,walk_interval,profiles,SmartProfiles,delete 10 .0.101.22,public,60,,, Load value.yaml file in SC4SNMP microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none Check in Splunk Up to 1 min events appear in Splunk: index = \"netops\" sourcetype = \"sc4snmp:event\" Up to 1 min events appear in Splunk: | mpreview index = \"netmetrics\" | search sourcetype = \"sc4snmp:metric\"","title":"Test SNMP Poller"},{"location":"gettingstarted/sck-installation/","text":"SPLUNK for Kubernetes installation \u00b6 The below steps are sufficient for a SCK installation for the SC4SNMP project. In case you want to investigate more, all information about Splunk Connect for Kubernetes is available here . Instalation steps \u00b6 Add SCK repository to HELM \u00b6 microk8s helm3 repo add splunk https : // splunk . github . io / splunk - connect - for - kubernetes Create values file \u00b6 In order to connect to SPLUNK instance, you must create a sck_values.yaml file with this structure, populating variables marked with \u201c###\u201d (as described below): #global settings global : logLevel : info splunk : hec : protocol : https insecureSSL : \"false\" host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### port : ###SPLUNK_PORT### kubernetes : clusterName : ###CLUSTER_NAME### #local config for logging chart splunk-kubernetes-logging : # Enable chart enabled : true # Determine logging level per chart logLevel : info containers : logFormatType : cri logFormat : \"%Y-%m-%dT%H:%M:%S.%N%:z\" # Filter on Namespace to reduce log noise from all namespaces fluentd : path : \"/var/log/containers/*_sc4snmp_*.log,/var/log/containers/*_sck_*.log\" kubernetes : securityContext : true # Set journald path. Update to reflect MicroK8s systemd services. See MicroK8s Docs. journalLogPath : /var/log/journal # Review flush intervals for Splunk Cloud vs Self-Managed back off timers buffer : \"@type\" : memory total_limit_size : 600m chunk_limit_size : 10m chunk_limit_records : 100000 flush_interval : 5s flush_thread_count : 1 overflow_action : block retry_max_times : 10 retry_type : periodic k8sMetadata : # Pod labels to collect podLabels : - app - k8s-app - release - environment - tier # In case snmp prefix is useful or if you want to remove \"kube\" sourcetypePrefix : \"kube\" splunk : hec : indexName : em_logs logs : sck : from : pod : sck-splunk-kubernetes- container : splunk-fluentd-k8s- multiline : firstline : /^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}\\:\\d{2}\\:\\d{2}\\s\\+\\d{4}\\s\\[\\w+\\]\\:/ separator : \"\\n\" flushInterval : 5 #local config for objects chart splunk-kubernetes-objects : # enable or diable objects enabled : false rbac : create : true serviceAccount : create : true name : splunk-kubernetes-objects kubernetes : insecureSSL : true objects : core : v1 : - name : pods - name : namespaces - name : component_statuses - name : nodes - name : services - name : events mode : watch splunk : hec : indexName : em_meta #local config for metrics chart splunk-kubernetes-metrics : # enable or disbale metrics enabled : false metricsInterval : 60s kubernetes : kubeletPort : 10255 kubeletPortAggregator : 10250 useRestClientSSL : false insecureSSL : true rbac : create : true serviceAccount : create : true name : splunk-kubernetes-metrics splunk : hec : indexName : em_metrics customFilters : node : tag : \"kube.node.**\" type : record_modifier body : |- <record> entity_type k8s_node </record> pod : tag : \"kube.pod.**\" type : record_modifier body : |- <record> entity_type k8s_pod </record> Values description \u00b6 Values required to be filled: Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token \u201c450a69af-16a9-4f87-9628-c26f04ad3785\u201d ###CLUSTER_NAME### name of the cluster \u201cfoo\u201d In case you want to change index names (note that in this case you need to keep consistent names in Splunk instance and SC4SNMP values file), you can override these variables: Index type variable description default value Logs index splunk-kubernetes-logging: splunk: hec: indexName: name of the logs index \u201cem_index\u201d Meta index splunk-kubernetes-objects: splunk: hec: indexName: name of the meta index \u201cem_meta\u201d Metrics index splunk-kubernetes-metrics: splunk: hec: indexName: name of the metrics index \u201cem_metrics\u201d Other variables you can override, if necessary: in case you need it: variable description default global: splunk: hec: protocol port of splunk instance \u201c8088\u201d global: splunk: hec: protocol insecure_ssl is insecure ssl allowed \u201cfalse\u201d Install SCK with HELM \u00b6 microk8s helm3 install sck-for-snmp -f sck_values.yaml splunk/splunk-connect-for-kubernetes","title":"Install Splunk for Kubernetes"},{"location":"gettingstarted/sck-installation/#splunk-for-kubernetes-installation","text":"The below steps are sufficient for a SCK installation for the SC4SNMP project. In case you want to investigate more, all information about Splunk Connect for Kubernetes is available here .","title":"SPLUNK for Kubernetes installation"},{"location":"gettingstarted/sck-installation/#instalation-steps","text":"","title":"Instalation steps"},{"location":"gettingstarted/sck-installation/#add-sck-repository-to-helm","text":"microk8s helm3 repo add splunk https : // splunk . github . io / splunk - connect - for - kubernetes","title":"Add SCK repository to HELM"},{"location":"gettingstarted/sck-installation/#create-values-file","text":"In order to connect to SPLUNK instance, you must create a sck_values.yaml file with this structure, populating variables marked with \u201c###\u201d (as described below): #global settings global : logLevel : info splunk : hec : protocol : https insecureSSL : \"false\" host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### port : ###SPLUNK_PORT### kubernetes : clusterName : ###CLUSTER_NAME### #local config for logging chart splunk-kubernetes-logging : # Enable chart enabled : true # Determine logging level per chart logLevel : info containers : logFormatType : cri logFormat : \"%Y-%m-%dT%H:%M:%S.%N%:z\" # Filter on Namespace to reduce log noise from all namespaces fluentd : path : \"/var/log/containers/*_sc4snmp_*.log,/var/log/containers/*_sck_*.log\" kubernetes : securityContext : true # Set journald path. Update to reflect MicroK8s systemd services. See MicroK8s Docs. journalLogPath : /var/log/journal # Review flush intervals for Splunk Cloud vs Self-Managed back off timers buffer : \"@type\" : memory total_limit_size : 600m chunk_limit_size : 10m chunk_limit_records : 100000 flush_interval : 5s flush_thread_count : 1 overflow_action : block retry_max_times : 10 retry_type : periodic k8sMetadata : # Pod labels to collect podLabels : - app - k8s-app - release - environment - tier # In case snmp prefix is useful or if you want to remove \"kube\" sourcetypePrefix : \"kube\" splunk : hec : indexName : em_logs logs : sck : from : pod : sck-splunk-kubernetes- container : splunk-fluentd-k8s- multiline : firstline : /^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}\\:\\d{2}\\:\\d{2}\\s\\+\\d{4}\\s\\[\\w+\\]\\:/ separator : \"\\n\" flushInterval : 5 #local config for objects chart splunk-kubernetes-objects : # enable or diable objects enabled : false rbac : create : true serviceAccount : create : true name : splunk-kubernetes-objects kubernetes : insecureSSL : true objects : core : v1 : - name : pods - name : namespaces - name : component_statuses - name : nodes - name : services - name : events mode : watch splunk : hec : indexName : em_meta #local config for metrics chart splunk-kubernetes-metrics : # enable or disbale metrics enabled : false metricsInterval : 60s kubernetes : kubeletPort : 10255 kubeletPortAggregator : 10250 useRestClientSSL : false insecureSSL : true rbac : create : true serviceAccount : create : true name : splunk-kubernetes-metrics splunk : hec : indexName : em_metrics customFilters : node : tag : \"kube.node.**\" type : record_modifier body : |- <record> entity_type k8s_node </record> pod : tag : \"kube.pod.**\" type : record_modifier body : |- <record> entity_type k8s_pod </record>","title":"Create values file"},{"location":"gettingstarted/sck-installation/#values-description","text":"Values required to be filled: Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token \u201c450a69af-16a9-4f87-9628-c26f04ad3785\u201d ###CLUSTER_NAME### name of the cluster \u201cfoo\u201d In case you want to change index names (note that in this case you need to keep consistent names in Splunk instance and SC4SNMP values file), you can override these variables: Index type variable description default value Logs index splunk-kubernetes-logging: splunk: hec: indexName: name of the logs index \u201cem_index\u201d Meta index splunk-kubernetes-objects: splunk: hec: indexName: name of the meta index \u201cem_meta\u201d Metrics index splunk-kubernetes-metrics: splunk: hec: indexName: name of the metrics index \u201cem_metrics\u201d Other variables you can override, if necessary: in case you need it: variable description default global: splunk: hec: protocol port of splunk instance \u201c8088\u201d global: splunk: hec: protocol insecure_ssl is insecure ssl allowed \u201cfalse\u201d","title":"Values description"},{"location":"gettingstarted/sck-installation/#install-sck-with-helm","text":"microk8s helm3 install sck-for-snmp -f sck_values.yaml splunk/splunk-connect-for-kubernetes","title":"Install SCK with HELM"},{"location":"gettingstarted/splunk-requirements/","text":"Splunk requirements \u00b6 Prepare Splunk \u00b6 Requirements (Splunk Enterprise/Enterprise Cloud) \u00b6 Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes: em_metrics (metrics type) em_meta (event type) em_logs (event type) netmetrics (metrics type) netops (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server. If HA deployment will be used, the IP must be in addition to the managment interface of each cluster member. Obtain the ip address of an internal DNS server that is able to resolve the Splunk Endpoint. Requirements (Splunk Infrastructure Monitoring) \u00b6 Obtain the correct realm and token.","title":"Splunk Requirements"},{"location":"gettingstarted/splunk-requirements/#splunk-requirements","text":"","title":"Splunk requirements"},{"location":"gettingstarted/splunk-requirements/#prepare-splunk","text":"","title":"Prepare Splunk"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-enterpriseenterprise-cloud","text":"Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes: em_metrics (metrics type) em_meta (event type) em_logs (event type) netmetrics (metrics type) netops (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server. If HA deployment will be used, the IP must be in addition to the managment interface of each cluster member. Obtain the ip address of an internal DNS server that is able to resolve the Splunk Endpoint.","title":"Requirements (Splunk Enterprise/Enterprise Cloud)"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-infrastructure-monitoring","text":"Obtain the correct realm and token.","title":"Requirements (Splunk Infrastructure Monitoring)"}]}