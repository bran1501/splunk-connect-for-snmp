{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Splunk Connect for SNMP \u00b6 THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback please let your account team know you are experimenting with our new solution. Splunk Connect for SNMP is an edge deployed containerized and highly available solution for collection of SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Home"},{"location":"#splunk-connect-for-snmp","text":"THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback please let your account team know you are experimenting with our new solution. Splunk Connect for SNMP is an edge deployed containerized and highly available solution for collection of SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Splunk Connect for SNMP"},{"location":"configuration/","text":"Configuration \u00b6 In this section we\u2019re refering to following files required to configure scheduler: 1. scheduler-inventory.yaml 2. scheduler-config.yaml 3. traps-server-config.yaml While installing SC4SNMP via HELM we can easily configure all of those using one point of management: config_values.yaml . The structure is: files : scheduler : inventory : | <- scheduler-inventory.yaml host,version,community,profile,freqinseconds #10.0.0.1,2c,public,basev1,300 config : | <- scheduler-config.yaml celery: broker: type: \"rabbitmq\" # Sample Configuration file ipv4: True ipv6: False communities: ... traps : config : <- traps-server-config.yaml snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" Use following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace Traps Configuration \u00b6 traps-server-config.yaml config.yaml Splunk Connect for SNMP supports receiving SNMPv1 traps, SNMPv2 traps, and SNMPv3 traps. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in traps-server-config.yaml ( files: traps: config part of config_values.yaml ). Non-authorized traps/informs will be dropped. Configure SNMPv1/v2c community strings \u00b6 Add SNMPv1/SNMPv2c community strings under v1/v2 section, respectively. Params : community string (required) - SNMPv1/SNMPv2c community string. Configure SNMPv3 users \u00b6 It gets a little more complex with respect to SNMPv3. The user database in a SNMPv3 application is actually referenced by a combination of the user's name (called a \"security Name\") and an identifier for the given SNMP application you're talking to (called an \"engineID\"). Therefore, both userName and engineID are required for SNMPv3 under v3 section. Params : userName (required) - A human-readable string representing the name of the SNMP USM user. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 authKey (optional) - Initial value of the secret authentication key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT privKey (optional) - Initial value of the secret encryption key. securityEngineId (required): The EngineID of the authoritative SNMP engine that the traps was sent from. e.g. snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" v3 : - userName : snmpv3test authKey : AuthPass1 privKey : PrivPass2 securityEngineId : 8000000004030201 - userName : snmpv3test2 authProtocol : SHA authKey : AuthPass11 privProtocol : aes privKey : PrivPass22 securityEngineId : 8000000004030202 - userName : snmpv3test3 securityEngineId : 8000000004030203 Poller \u00b6 Scheduler Configuration \u00b6 scheduler-config.yaml config.yaml scheduler-inventory.yaml inventory.csv Splunk Connect for SNMP supports polling from SNMPv1 agents, SNMPv2 agents, and SNMPv3 agents. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ). inventory.csv \u00b6 Inventory.csv ( files: scheduler: inventory part of config_values.yaml ) acts as a lookup table where the poller application will read the SNMP agents' information and its corresponding queries information. \" host \" , \" version \" , \" community \" , \" profile \" , \" freqinseconds \" \" IP:Port of SNMP agents, where port is optional with default is 161 \" , \" An indication of SNMP versions \" , \" community string for SNMPv1/v2 OR userNanme for SNMPv3 \" , \" query info \" , \" query frequency in seconds \" \"e.g. 174.62.79.72 (IP only) | 174.62.79.72:161 (IP+port)\",\"e.g. 1 | 2c | 3\", \"e.g. public (SNMPv1/SNMPv2c community string) | testUser (SNMPv3 username, setup other params in config.yaml)\",\"e.g 1.3.6.1.2.1.1.9.1.3.1 (single oid for snmp get) | 1.3.6.1.2.1.1.9.1.3.* (oid for snmp walk to get subtree) | router (profile used to setup detials in config.yaml\", \"e.g. 30\" config.yaml \u00b6 config.yaml acts as an extension for inventory.csv for these three situations. 1. Configure optional parameters for SNMPv1/SNMPv2c community data \u00b6 Community-Based Security Model of SNMPv1/SNMPv2c may require more params, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv1/SNMPv2c community string as Key under communities section. Add necessary parameters. Here are supported optional parameters: communityIndex (optional) - Unique index value of a row in snmpCommunityTable. If it is the only positional parameter, it is treated as a communityName. contextEngineId (optional) - Indicates the location of the context in which management information is accessed when using the community string specified by the communityName. contextName (optional) - The context in which management information is accessed when using the above communityName. tag (optional) - Arbitrary string that specifies a set of transport endpoints from which a command responder application will accept management requests with given communityName or to which notification originator application will send notifications when targets are specified by a tag value(s). 2. Configure optional parameters SNMPv3 users \u00b6 SNMPv3 users may require more params for different security levels, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv3 userName as Key under usernames section. Add necessary parameters. Here are supported optional parameters: authKey (optional) - Initial value of the secret authentication key. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 privKey (optional) - Initial value of the secret encryption key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT securityEngineId (optional): The snmpEngineID of the authoritative SNMP engine to which a dateRequest message is to be sent. securityName (optional): Together with the snmpEngineID it identifies a row in the SNMP-USER-BASED-SM-MIB::usmUserTable that is to be used for securing the message. authKeyType (optional): int. Type of authKey material. privKeyType (optional): int. Type of privKey material. contextName : (optional) contextName is used to name an instance of MIB. SNMP engine may serve several instances of the same MIB within possibly multiple SNMP entities. SNMP context is a tool for unambiguously identifying a collection of MIB variables behind the SNMP engine. e.g. usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : testauthKey privKey : testprivKey authProtocol : SHA privProtocol : AES securityEngineId : 8000000004030201 securityName : authKeyType : 0 privKeyType : 0 contextName : \"4c9184f37cff01bcdc32dc486ec36961\" 3. Configure more detailed query information \u00b6 User can provide more detailed query information under profiles section to achieve two purposes: 1) query by mib string; 2) query multiple oids/mib string for one agent. In scheduler-inventory.yaml ( files: scheduler: inventory part of config_values.yaml ), add the profile string(e.g. router) to profile field under data > inventory.csv section. \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,router,30 In scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ), add the desired query information under profiles > \\ > varBinds section as list entries. e.g. profiles > router > varBinds . When you use the mib string, you MUST follow the Syntax below [ \"MIB-Files\" , \"MIB object name\" , \"MIB index number\" ] Where \u201cMIB index number\u201d is optional. Specify the index number when you want to get the information for a specific interface. e.g. [\"SNMPv2-MIB\", \"sysUpTime\", 0] Don\u2019t put the index number when you want to get information for all interfaces. e.g. [\"SNMPv2-MIB\", \"sysORID\"] Note : A wrong index number would cause an error. If you are not sure which index exists, don\u2019t put it at all. For example, in the situation where [\"SNMPv2-MIB\", \"sysUpTime\", 0] exsits, both [\"SNMPv2-MIB\", \"sysUpTime\", 0] and [\"SNMPv2-MIB\", \"sysUpTime\"] will help you get [\"SNMPv2-MIB\", \"sysUpTime\", 0], while [\"SNMPv2-MIB\", \"sysUpTime\", 1] will throw erroe because index 1 doesn't exist for sysUpTime. profiles : router : varBinds : # Syntax: [ \"MIB-Files\", \"MIB object name\", \"MIB index number\"] - [ 'SNMPv2-MIB' , 'sysDescr' , 0 ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysORID' ] - [ 'CISCO-FC-MGMT-MIB' , 'cfcmPortLcStatsEntry' ] - [ 'EFM-CU-MIB' , 'efmCuPort' ] - '1.3.6.1.2.1.1.6.0' - '1.3.6.1.2.1.1.9.1.4.*' 4. Configure additional field to the metrics data \u00b6 User can make every metric data to include profile name (which is not included by default) by adding profile under the additionalMetricField in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) e.g. additionalMetricField : - profile 5. Configure poller to return query with additional fields present \u00b6 User can provide enricher section to make poller enrich queries sent to Splunk by adding additional dimensions. There are two types of fields: 1. existingVarBinds : this section updates query results with new fields calculated from the existing SNMP information. 2. additionalVarBinds : this section updates query results with additional parameters defined below. Existing VarBinds \u00b6 For now, existingVarBinds section works only for IF-MIB oid family. Every property of IF-MIB family can be extracted and added as an additional dimension to the query. For example, if we want to see the name and the index of the interface along with the basic query information, the enricher must be structured as following: enricher : oidFamily : IF-MIB : existingVarBinds : - ifIndex : 'interface_index' - ifDescr : 'interface_desc' Let\u2019s run a metrics query in Splunk Search: | msearch \"index\"=\"em_metrics\" While enricher is not being used, the example result is: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } After adding enricher structure as above, the same result should contain \u201cinterface_index\u201d and \u201cinterface_desc\u201d: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 interface_desc : lo interface_index : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } For an event query in Splunk Search: index=\"*\" sourcetype=\"sc4snmp:meta\" Before using enricher , the search result is structured as following: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" When using the same enricher as in the example above, in the result string two new fields \u201cinterface_index\u201d and \u201cinterface_desc\u201d are visible: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" interface_index=\"2\" interface_desc=\"eth0\" The value of newly added properties is calculated according to current query index. For IF-MIB::ifAdminStatus. 2 we\u2019re interested in IF-MIB::ifIndex. 2 and IF-MIB::ifDescr. 2 . IF-MIB::ifNumber.0 = INTEGER : 2 IF-MIB::ifIndex.1 = INTEGER : 1 IF-MIB::ifIndex.2 = INTEGER : 2 IF-MIB::ifDescr.1 = STRING : lo IF-MIB::ifDescr.2 = STRING : eth0 Any other IF-MIB property can be inserted to existingVarBinds. existingVarBinds list parameters existingVarBinds part description example key the key is the word between OID family identifier and the index for ex. for MTU extraction, the key is ifMtu (derived from IF-MIB:: ifMtu .1) value the field name shown as an additional dimension in Splunk interface_mtu Additional VarBinds \u00b6 1. Index number \u2013 indexNum \u00b6 For every OID family there is an option to add index number as an additional dimension to both event and metrics data. In order to enable it, the enricher must be structured as following: enricher : oidFamily : IF-MIB : additionalVarBinds : - indexNum : 'index_number' SNMPv2-MIB : additionalVarBinds : - indexNum : 'index_number' For above configuration every query concerning IF-MIB or SNMPv2-MIB has additional index_number field equal to the index number of current record, for ex.: For event query: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.2.2=\"eth0\" value1=\"eth0\" IF-MIB::ifDescr.2=\"eth0\" index_number=\"2\" For metrics query: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 index_num : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } Additional varbinds available to configure variable description indexNum index number of current record, for ex. SNMPv2-MIB::sysORID.5 -> index_num is 5 additionalVarBinds list parameters additionalVarBinds part description example key the key is the value from additional varbinds table above indexNum value the field name shown as an additional dimension in Splunk index_number , index_num , if_mib_index_number Test the poller \u00b6 SNMPv1/SNMPv2 You can change the inventory contents in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) and use following command to apply the changes to Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under section inventory.csv , content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in files: scheduler: config part of config_values.yaml ) frequency in seconds (how often SNMP connector should ask agent for data) `csv \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal,2c,public,1.3.6.1.2.1.1.9.1.3.*,60 ` microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace SNMPv3 Besides changing the inventory contents under section files: scheduler: inventory part of config_values.yaml , you may need to set up security passphrases for the SNMPv3 under section files: scheduler: config: usernames part of config_values.yaml . Here are the steps to configure these two SNMPv3 Users. User Name Security Auth Priv Auth Priv Level Protocol Protocol Passphrase Passphrase testUser1 Auth,Priv MD5 DES auctoritas privatus testUser2 Auth,Priv SHA AES authpass privacypass Specify User Name under community filed in section files: scheduler: inventory part of config_values.yaml . \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" host.docker.internal1,3,testUser1,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal2,3,testUser2,1.3.6.1.2.1.1.9.1.3.*,30 Specify other security params under section files: scheduler: config part of config_values.yaml . usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : authpass privKey : privacypass authProtocol : SHA privProtocol : AES Apply the changes. microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace","title":"Configuration"},{"location":"configuration/#configuration","text":"In this section we\u2019re refering to following files required to configure scheduler: 1. scheduler-inventory.yaml 2. scheduler-config.yaml 3. traps-server-config.yaml While installing SC4SNMP via HELM we can easily configure all of those using one point of management: config_values.yaml . The structure is: files : scheduler : inventory : | <- scheduler-inventory.yaml host,version,community,profile,freqinseconds #10.0.0.1,2c,public,basev1,300 config : | <- scheduler-config.yaml celery: broker: type: \"rabbitmq\" # Sample Configuration file ipv4: True ipv6: False communities: ... traps : config : <- traps-server-config.yaml snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" Use following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace","title":"Configuration"},{"location":"configuration/#traps-configuration","text":"traps-server-config.yaml config.yaml Splunk Connect for SNMP supports receiving SNMPv1 traps, SNMPv2 traps, and SNMPv3 traps. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in traps-server-config.yaml ( files: traps: config part of config_values.yaml ). Non-authorized traps/informs will be dropped.","title":"Traps Configuration"},{"location":"configuration/#configure-snmpv1v2c-community-strings","text":"Add SNMPv1/SNMPv2c community strings under v1/v2 section, respectively. Params : community string (required) - SNMPv1/SNMPv2c community string.","title":"Configure SNMPv1/v2c community strings"},{"location":"configuration/#configure-snmpv3-users","text":"It gets a little more complex with respect to SNMPv3. The user database in a SNMPv3 application is actually referenced by a combination of the user's name (called a \"security Name\") and an identifier for the given SNMP application you're talking to (called an \"engineID\"). Therefore, both userName and engineID are required for SNMPv3 under v3 section. Params : userName (required) - A human-readable string representing the name of the SNMP USM user. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 authKey (optional) - Initial value of the secret authentication key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT privKey (optional) - Initial value of the secret encryption key. securityEngineId (required): The EngineID of the authoritative SNMP engine that the traps was sent from. e.g. snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" v3 : - userName : snmpv3test authKey : AuthPass1 privKey : PrivPass2 securityEngineId : 8000000004030201 - userName : snmpv3test2 authProtocol : SHA authKey : AuthPass11 privProtocol : aes privKey : PrivPass22 securityEngineId : 8000000004030202 - userName : snmpv3test3 securityEngineId : 8000000004030203","title":"Configure SNMPv3 users"},{"location":"configuration/#poller","text":"","title":"Poller"},{"location":"configuration/#scheduler-configuration","text":"scheduler-config.yaml config.yaml scheduler-inventory.yaml inventory.csv Splunk Connect for SNMP supports polling from SNMPv1 agents, SNMPv2 agents, and SNMPv3 agents. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ).","title":"Scheduler Configuration"},{"location":"configuration/#inventorycsv","text":"Inventory.csv ( files: scheduler: inventory part of config_values.yaml ) acts as a lookup table where the poller application will read the SNMP agents' information and its corresponding queries information. \" host \" , \" version \" , \" community \" , \" profile \" , \" freqinseconds \" \" IP:Port of SNMP agents, where port is optional with default is 161 \" , \" An indication of SNMP versions \" , \" community string for SNMPv1/v2 OR userNanme for SNMPv3 \" , \" query info \" , \" query frequency in seconds \" \"e.g. 174.62.79.72 (IP only) | 174.62.79.72:161 (IP+port)\",\"e.g. 1 | 2c | 3\", \"e.g. public (SNMPv1/SNMPv2c community string) | testUser (SNMPv3 username, setup other params in config.yaml)\",\"e.g 1.3.6.1.2.1.1.9.1.3.1 (single oid for snmp get) | 1.3.6.1.2.1.1.9.1.3.* (oid for snmp walk to get subtree) | router (profile used to setup detials in config.yaml\", \"e.g. 30\"","title":"inventory.csv"},{"location":"configuration/#configyaml","text":"config.yaml acts as an extension for inventory.csv for these three situations.","title":"config.yaml"},{"location":"configuration/#1-configure-optional-parameters-for-snmpv1snmpv2c-community-data","text":"Community-Based Security Model of SNMPv1/SNMPv2c may require more params, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv1/SNMPv2c community string as Key under communities section. Add necessary parameters. Here are supported optional parameters: communityIndex (optional) - Unique index value of a row in snmpCommunityTable. If it is the only positional parameter, it is treated as a communityName. contextEngineId (optional) - Indicates the location of the context in which management information is accessed when using the community string specified by the communityName. contextName (optional) - The context in which management information is accessed when using the above communityName. tag (optional) - Arbitrary string that specifies a set of transport endpoints from which a command responder application will accept management requests with given communityName or to which notification originator application will send notifications when targets are specified by a tag value(s).","title":"1. Configure optional parameters for SNMPv1/SNMPv2c community data"},{"location":"configuration/#2-configure-optional-parameters-snmpv3-users","text":"SNMPv3 users may require more params for different security levels, which can be set up in config.yaml ( files: scheduler: config part of config_values.yaml ). Add SNMPv3 userName as Key under usernames section. Add necessary parameters. Here are supported optional parameters: authKey (optional) - Initial value of the secret authentication key. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 privKey (optional) - Initial value of the secret encryption key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT securityEngineId (optional): The snmpEngineID of the authoritative SNMP engine to which a dateRequest message is to be sent. securityName (optional): Together with the snmpEngineID it identifies a row in the SNMP-USER-BASED-SM-MIB::usmUserTable that is to be used for securing the message. authKeyType (optional): int. Type of authKey material. privKeyType (optional): int. Type of privKey material. contextName : (optional) contextName is used to name an instance of MIB. SNMP engine may serve several instances of the same MIB within possibly multiple SNMP entities. SNMP context is a tool for unambiguously identifying a collection of MIB variables behind the SNMP engine. e.g. usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : testauthKey privKey : testprivKey authProtocol : SHA privProtocol : AES securityEngineId : 8000000004030201 securityName : authKeyType : 0 privKeyType : 0 contextName : \"4c9184f37cff01bcdc32dc486ec36961\"","title":"2. Configure optional parameters SNMPv3 users"},{"location":"configuration/#3-configure-more-detailed-query-information","text":"User can provide more detailed query information under profiles section to achieve two purposes: 1) query by mib string; 2) query multiple oids/mib string for one agent. In scheduler-inventory.yaml ( files: scheduler: inventory part of config_values.yaml ), add the profile string(e.g. router) to profile field under data > inventory.csv section. \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,router,30 In scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ), add the desired query information under profiles > \\ > varBinds section as list entries. e.g. profiles > router > varBinds . When you use the mib string, you MUST follow the Syntax below [ \"MIB-Files\" , \"MIB object name\" , \"MIB index number\" ] Where \u201cMIB index number\u201d is optional. Specify the index number when you want to get the information for a specific interface. e.g. [\"SNMPv2-MIB\", \"sysUpTime\", 0] Don\u2019t put the index number when you want to get information for all interfaces. e.g. [\"SNMPv2-MIB\", \"sysORID\"] Note : A wrong index number would cause an error. If you are not sure which index exists, don\u2019t put it at all. For example, in the situation where [\"SNMPv2-MIB\", \"sysUpTime\", 0] exsits, both [\"SNMPv2-MIB\", \"sysUpTime\", 0] and [\"SNMPv2-MIB\", \"sysUpTime\"] will help you get [\"SNMPv2-MIB\", \"sysUpTime\", 0], while [\"SNMPv2-MIB\", \"sysUpTime\", 1] will throw erroe because index 1 doesn't exist for sysUpTime. profiles : router : varBinds : # Syntax: [ \"MIB-Files\", \"MIB object name\", \"MIB index number\"] - [ 'SNMPv2-MIB' , 'sysDescr' , 0 ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysORID' ] - [ 'CISCO-FC-MGMT-MIB' , 'cfcmPortLcStatsEntry' ] - [ 'EFM-CU-MIB' , 'efmCuPort' ] - '1.3.6.1.2.1.1.6.0' - '1.3.6.1.2.1.1.9.1.4.*'","title":"3. Configure more detailed query information"},{"location":"configuration/#4-configure-additional-field-to-the-metrics-data","text":"User can make every metric data to include profile name (which is not included by default) by adding profile under the additionalMetricField in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) e.g. additionalMetricField : - profile","title":"4. Configure additional field to the metrics data"},{"location":"configuration/#5-configure-poller-to-return-query-with-additional-fields-present","text":"User can provide enricher section to make poller enrich queries sent to Splunk by adding additional dimensions. There are two types of fields: 1. existingVarBinds : this section updates query results with new fields calculated from the existing SNMP information. 2. additionalVarBinds : this section updates query results with additional parameters defined below.","title":"5. Configure poller to return query with additional fields present"},{"location":"configuration/#existing-varbinds","text":"For now, existingVarBinds section works only for IF-MIB oid family. Every property of IF-MIB family can be extracted and added as an additional dimension to the query. For example, if we want to see the name and the index of the interface along with the basic query information, the enricher must be structured as following: enricher : oidFamily : IF-MIB : existingVarBinds : - ifIndex : 'interface_index' - ifDescr : 'interface_desc' Let\u2019s run a metrics query in Splunk Search: | msearch \"index\"=\"em_metrics\" While enricher is not being used, the example result is: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } After adding enricher structure as above, the same result should contain \u201cinterface_index\u201d and \u201cinterface_desc\u201d: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 interface_desc : lo interface_index : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } For an event query in Splunk Search: index=\"*\" sourcetype=\"sc4snmp:meta\" Before using enricher , the search result is structured as following: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" When using the same enricher as in the example above, in the result string two new fields \u201cinterface_index\u201d and \u201cinterface_desc\u201d are visible: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.6.2=\"0x00127962f940\" value1=\"0x00127962f940\" IF-MIB::ifPhysAddress.2=\"12:79:62:f9:40\" interface_index=\"2\" interface_desc=\"eth0\" The value of newly added properties is calculated according to current query index. For IF-MIB::ifAdminStatus. 2 we\u2019re interested in IF-MIB::ifIndex. 2 and IF-MIB::ifDescr. 2 . IF-MIB::ifNumber.0 = INTEGER : 2 IF-MIB::ifIndex.1 = INTEGER : 1 IF-MIB::ifIndex.2 = INTEGER : 2 IF-MIB::ifDescr.1 = STRING : lo IF-MIB::ifDescr.2 = STRING : eth0 Any other IF-MIB property can be inserted to existingVarBinds. existingVarBinds list parameters existingVarBinds part description example key the key is the word between OID family identifier and the index for ex. for MTU extraction, the key is ifMtu (derived from IF-MIB:: ifMtu .1) value the field name shown as an additional dimension in Splunk interface_mtu","title":"Existing VarBinds"},{"location":"configuration/#additional-varbinds","text":"","title":"Additional VarBinds"},{"location":"configuration/#1-index-number-indexnum","text":"For every OID family there is an option to add index number as an additional dimension to both event and metrics data. In order to enable it, the enricher must be structured as following: enricher : oidFamily : IF-MIB : additionalVarBinds : - indexNum : 'index_number' SNMPv2-MIB : additionalVarBinds : - indexNum : 'index_number' For above configuration every query concerning IF-MIB or SNMPv2-MIB has additional index_number field equal to the index number of current record, for ex.: For event query: oid-type1=\"ObjectIdentity\" value1-type=\"OctetString\" 1.3.6.1.2.1.2.2.1.2.2=\"eth0\" value1=\"eth0\" IF-MIB::ifDescr.2=\"eth0\" index_number=\"2\" For metrics query: { [ - ] com.splunk.index : em_metrics host.name : 10.202.14.102 index_num : 1 metric_name : sc4snmp.IF-MIB.ifInOctets_1 : 398485 } Additional varbinds available to configure variable description indexNum index number of current record, for ex. SNMPv2-MIB::sysORID.5 -> index_num is 5 additionalVarBinds list parameters additionalVarBinds part description example key the key is the value from additional varbinds table above indexNum value the field name shown as an additional dimension in Splunk index_number , index_num , if_mib_index_number","title":"1. Index number -- indexNum"},{"location":"configuration/#test-the-poller","text":"SNMPv1/SNMPv2 You can change the inventory contents in scheduler-config.yaml ( files: scheduler: config part of config_values.yaml ) and use following command to apply the changes to Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under section inventory.csv , content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in files: scheduler: config part of config_values.yaml ) frequency in seconds (how often SNMP connector should ask agent for data) `csv \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal,2c,public,1.3.6.1.2.1.1.9.1.3.*,60 ` microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace SNMPv3 Besides changing the inventory contents under section files: scheduler: inventory part of config_values.yaml , you may need to set up security passphrases for the SNMPv3 under section files: scheduler: config: usernames part of config_values.yaml . Here are the steps to configure these two SNMPv3 Users. User Name Security Auth Priv Auth Priv Level Protocol Protocol Passphrase Passphrase testUser1 Auth,Priv MD5 DES auctoritas privatus testUser2 Auth,Priv SHA AES authpass privacypass Specify User Name under community filed in section files: scheduler: inventory part of config_values.yaml . \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" host.docker.internal1,3,testUser1,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal2,3,testUser2,1.3.6.1.2.1.1.9.1.3.*,30 Specify other security params under section files: scheduler: config part of config_values.yaml . usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : authpass privKey : privacypass authProtocol : SHA privProtocol : AES Apply the changes. microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace","title":"Test the poller"},{"location":"planning/","text":"Planning \u00b6 Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances where a more feature complete solution such as the Splunk Universal Forwarder is not available. Architecture \u00b6 SC4SNMP is deployed using a Kubernetes distribution typically MicroK8s, deseigned to be a low touch experience for integration with sensitive edge network devices it will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall. Requirements \u00b6 A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create of obtain real and token Planning Infrastructure \u00b6 Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP (SC4SNMP) above limitations need to be taken under consideration.","title":"Planning"},{"location":"planning/#planning","text":"Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances where a more feature complete solution such as the Splunk Universal Forwarder is not available.","title":"Planning"},{"location":"planning/#architecture","text":"SC4SNMP is deployed using a Kubernetes distribution typically MicroK8s, deseigned to be a low touch experience for integration with sensitive edge network devices it will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall.","title":"Architecture"},{"location":"planning/#requirements","text":"A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create of obtain real and token","title":"Requirements"},{"location":"planning/#planning-infrastructure","text":"Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP (SC4SNMP) above limitations need to be taken under consideration.","title":"Planning Infrastructure"},{"location":"gettingstarted/additional-helm-configuration/","text":"Additional HELM configuration \u00b6 deployment_values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / snmp - installer > values . yaml The whole file is divided on following components: scheduler splunk mib mongodb rabbitmq Shared values \u00b6 All of the components have resources field for memory resources adjusting: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More informations about resources concept in kuberentes documentation . Scheduler, MIB and Worker contain logLevel variable that indicates the level of logging for the pod. Scheduler values \u00b6 variable description example index indexes names, should be the same as the ones given in SCK configuration event: em_logs / metrics: em_metrics / meta: em_meta Splunk values \u00b6 variable Description Example host host address of splunk instance i-08c221389a3b9899a.ec2.splunkit.io token Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 port port of splunk instance \u201c8088\u201d insecureSSL is insecure ssl allowed \u201ctrue\u201d clusterName name of the cluster \u201cfoo\u201d Traps values \u00b6 variable Description Example loadBalancerIP shared IP 10.0.101.22 RabbitMQ values \u00b6 Values described here: https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq in Parameters section. MongoDB values \u00b6 Values described here: https://github.com/bitnami/charts/tree/master/bitnami/mongodb in Parameters section.","title":"Additional HELM values"},{"location":"gettingstarted/additional-helm-configuration/#additional-helm-configuration","text":"deployment_values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / snmp - installer > values . yaml The whole file is divided on following components: scheduler splunk mib mongodb rabbitmq","title":"Additional HELM configuration"},{"location":"gettingstarted/additional-helm-configuration/#shared-values","text":"All of the components have resources field for memory resources adjusting: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More informations about resources concept in kuberentes documentation . Scheduler, MIB and Worker contain logLevel variable that indicates the level of logging for the pod.","title":"Shared values"},{"location":"gettingstarted/additional-helm-configuration/#scheduler-values","text":"variable description example index indexes names, should be the same as the ones given in SCK configuration event: em_logs / metrics: em_metrics / meta: em_meta","title":"Scheduler values"},{"location":"gettingstarted/additional-helm-configuration/#splunk-values","text":"variable Description Example host host address of splunk instance i-08c221389a3b9899a.ec2.splunkit.io token Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 port port of splunk instance \u201c8088\u201d insecureSSL is insecure ssl allowed \u201ctrue\u201d clusterName name of the cluster \u201cfoo\u201d","title":"Splunk values"},{"location":"gettingstarted/additional-helm-configuration/#traps-values","text":"variable Description Example loadBalancerIP shared IP 10.0.101.22","title":"Traps values"},{"location":"gettingstarted/additional-helm-configuration/#rabbitmq-values","text":"Values described here: https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq in Parameters section.","title":"RabbitMQ values"},{"location":"gettingstarted/additional-helm-configuration/#mongodb-values","text":"Values described here: https://github.com/bitnami/charts/tree/master/bitnami/mongodb in Parameters section.","title":"MongoDB values"},{"location":"gettingstarted/k8s-microk8s/","text":"MicroK8s installation on Ubuntu \u00b6 We need to have a normal install of kubectl because of operator scripts sudo snap install kubectl --classic sudo snap install microk8s --classic Add user to microk8s group to not to use sudo anymore sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Check microk8s status microk8s status --wait-ready Install microk8s dependencies necessary to deploy SC4SNMP. Note: when installing metallb you will be prompted for one or more IPs to used as entry points Into the cluster if your plan to enable clustering this IP should not be assigned to the host (floats) If you do not plan to cluster then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax microk8s enable dns metallb rbac storage openebs helm3 microk8s status --wait-ready","title":"Install Microk8s"},{"location":"gettingstarted/k8s-microk8s/#microk8s-installation-on-ubuntu","text":"We need to have a normal install of kubectl because of operator scripts sudo snap install kubectl --classic sudo snap install microk8s --classic Add user to microk8s group to not to use sudo anymore sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Check microk8s status microk8s status --wait-ready Install microk8s dependencies necessary to deploy SC4SNMP. Note: when installing metallb you will be prompted for one or more IPs to used as entry points Into the cluster if your plan to enable clustering this IP should not be assigned to the host (floats) If you do not plan to cluster then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax microk8s enable dns metallb rbac storage openebs helm3 microk8s status --wait-ready","title":"MicroK8s installation on Ubuntu"},{"location":"gettingstarted/sc4snmp-configuration/","text":"Test SNMP Traps \u00b6 Test the trap from a linux system with snmp installed replace the ip 10.0.101.22 with the shared ip above apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.6.3.1.1.5.1 1 .3.6.1.2.1.1.5.0 s test Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_logs sourcetype = \"sc4snmp:traps\" Setup Poller \u00b6 Test the poller by logging to Splunk and confirm presence of events in snmp em_logs and metrics in em_metrics index. Inventory \u00b6 * You can change the inventory contents in config_values.yaml , in scheduler inventory field, ex.: files : scheduler : inventory : | host , version , community , profile 10.0 . 101.22 , 2 c , public , basev1 10.0 . 101.23 , 2 c , public ,* Where 10.0.101.22 is a host IP. Content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in config.yaml, defined in scheduler config in values.yaml), for automatic profile assignment \u2018*\u2019 can be used, profile name may contain only letters, numbers, underscore or dash Config \u00b6 Profiles used in inventory can be created in config_values.yaml , which can be modified in scheduler config in values.yaml , ex.: files : scheduler : config : | celery : ... profiles : basev1 : frequency : 10 patterns : - '.*STRING_TO_BE_MATCHED.*' varBinds : # Syntax : [ \"MIB-Files\" , \"MIB object name\" \"MIB index number\" ] - [ 'SNMPv2-MIB' , 'sysDescr' ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysName' ] frequency - frequency in seconds (how often SNMP connector should ask agent for data) patterns - list of regular expressions that will be matched against sysDescr or sysObjectId Every change in values.yaml file can be applied with the command: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace This command should produce this kind of output: Release \"snmp\" has been upgraded. Happy Helming! NAME: snmp LAST DEPLOYED: Thu Sep 9 10:54:04 2021 NAMESPACE: sc4snmp STATUS: deployed REVISION: 2 TEST SUITE: None More information about how to configure deployment_values.yaml is available here: Additional HELM values Test Poller \u00b6 Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_meta sourcetype = \"sc4snmp:meta\" SNMPv2_MIB__sysLocation_0 = \"*\" | dedup host | mcatalog values ( metric_name ) where index = em_metrics AND metric_name = sc4snmp* AND host = <hostname> Maintain \u00b6 Manage configuration obtain and update communities, user/secrets and inventories","title":"Configure Poller and Traps"},{"location":"gettingstarted/sc4snmp-configuration/#test-snmp-traps","text":"Test the trap from a linux system with snmp installed replace the ip 10.0.101.22 with the shared ip above apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.6.3.1.1.5.1 1 .3.6.1.2.1.1.5.0 s test Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_logs sourcetype = \"sc4snmp:traps\"","title":"Test SNMP Traps"},{"location":"gettingstarted/sc4snmp-configuration/#setup-poller","text":"Test the poller by logging to Splunk and confirm presence of events in snmp em_logs and metrics in em_metrics index.","title":"Setup Poller"},{"location":"gettingstarted/sc4snmp-configuration/#inventory","text":"* You can change the inventory contents in config_values.yaml , in scheduler inventory field, ex.: files : scheduler : inventory : | host , version , community , profile 10.0 . 101.22 , 2 c , public , basev1 10.0 . 101.23 , 2 c , public ,* Where 10.0.101.22 is a host IP. Content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in config.yaml, defined in scheduler config in values.yaml), for automatic profile assignment \u2018*\u2019 can be used, profile name may contain only letters, numbers, underscore or dash","title":"Inventory"},{"location":"gettingstarted/sc4snmp-configuration/#config","text":"Profiles used in inventory can be created in config_values.yaml , which can be modified in scheduler config in values.yaml , ex.: files : scheduler : config : | celery : ... profiles : basev1 : frequency : 10 patterns : - '.*STRING_TO_BE_MATCHED.*' varBinds : # Syntax : [ \"MIB-Files\" , \"MIB object name\" \"MIB index number\" ] - [ 'SNMPv2-MIB' , 'sysDescr' ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysName' ] frequency - frequency in seconds (how often SNMP connector should ask agent for data) patterns - list of regular expressions that will be matched against sysDescr or sysObjectId Every change in values.yaml file can be applied with the command: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace This command should produce this kind of output: Release \"snmp\" has been upgraded. Happy Helming! NAME: snmp LAST DEPLOYED: Thu Sep 9 10:54:04 2021 NAMESPACE: sc4snmp STATUS: deployed REVISION: 2 TEST SUITE: None More information about how to configure deployment_values.yaml is available here: Additional HELM values","title":"Config"},{"location":"gettingstarted/sc4snmp-configuration/#test-poller","text":"Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_meta sourcetype = \"sc4snmp:meta\" SNMPv2_MIB__sysLocation_0 = \"*\" | dedup host | mcatalog values ( metric_name ) where index = em_metrics AND metric_name = sc4snmp* AND host = <hostname>","title":"Test Poller"},{"location":"gettingstarted/sc4snmp-configuration/#maintain","text":"Manage configuration obtain and update communities, user/secrets and inventories","title":"Maintain"},{"location":"gettingstarted/sc4snmp-installation/","text":"SC4SNMP Helm installation \u00b6 Add SC4SNMP repository \u00b6 microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now package should be visible in helm3 search command result: microk8s helm3 search repo snmp Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / snmp - installer 0 . 1 . 1 1 . 16 . 0 A Helm chart for Splunk for SNMP Download and modify deployment_values.yaml and config_values.yaml files \u00b6 curl - o ~/ deployment_values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / deploy - helm / snmp - installer / deployment_values . yaml curl - o ~/ config_values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / deploy - helm / snmp - installer / config_values . yaml deployment_values.yaml is being used during the installation process for configuring kubernetes values. config_values.yaml contains configuration of SC4SNMP. Variables required to be updated in deployment_values.yaml : Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d Install SC4SNMP \u00b6 microk8s helm3 install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace From now on, when editing SC4SNMP configuration, the configuration change must be inserted in corresponding section of config_values.yaml . For more details check configuration section. Use following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace Verify deployment \u00b6 In a few minutes all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE sc4snmp-traps-569547fcb4-9gxd5 1/1 Running 0 19m sc4snmp-worker-65b4c6df9d-bmgrj 1/1 Running 0 19m sc4snmp-otel-6b65b45b84-frj6x 1/1 Running 0 19m sc4snmp-mib-server-9f765c956-rbm7z 1/1 Running 0 19m sc4snmp-scheduler-5bb8d5fd9c-p7j86 1/1 Running 1 19m sc4snmp-mongodb-85f6c9c575-vhfr9 2/2 Running 0 19m sc4snmp-rabbitmq-0 1/1 Running 0 19m","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#sc4snmp-helm-installation","text":"","title":"SC4SNMP Helm installation"},{"location":"gettingstarted/sc4snmp-installation/#add-sc4snmp-repository","text":"microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now package should be visible in helm3 search command result: microk8s helm3 search repo snmp Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / snmp - installer 0 . 1 . 1 1 . 16 . 0 A Helm chart for Splunk for SNMP","title":"Add SC4SNMP repository"},{"location":"gettingstarted/sc4snmp-installation/#download-and-modify-deployment_valuesyaml-and-config_valuesyaml-files","text":"curl - o ~/ deployment_values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / deploy - helm / snmp - installer / deployment_values . yaml curl - o ~/ config_values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / deploy - helm / snmp - installer / config_values . yaml deployment_values.yaml is being used during the installation process for configuring kubernetes values. config_values.yaml contains configuration of SC4SNMP. Variables required to be updated in deployment_values.yaml : Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d","title":"Download and modify deployment_values.yaml and config_values.yaml files"},{"location":"gettingstarted/sc4snmp-installation/#install-sc4snmp","text":"microk8s helm3 install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace From now on, when editing SC4SNMP configuration, the configuration change must be inserted in corresponding section of config_values.yaml . For more details check configuration section. Use following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f deployment_values.yaml -f config_values.yaml splunk-connect-for-snmp/snmp-installer --namespace = sc4snmp --create-namespace","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#verify-deployment","text":"In a few minutes all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE sc4snmp-traps-569547fcb4-9gxd5 1/1 Running 0 19m sc4snmp-worker-65b4c6df9d-bmgrj 1/1 Running 0 19m sc4snmp-otel-6b65b45b84-frj6x 1/1 Running 0 19m sc4snmp-mib-server-9f765c956-rbm7z 1/1 Running 0 19m sc4snmp-scheduler-5bb8d5fd9c-p7j86 1/1 Running 1 19m sc4snmp-mongodb-85f6c9c575-vhfr9 2/2 Running 0 19m sc4snmp-rabbitmq-0 1/1 Running 0 19m","title":"Verify deployment"},{"location":"gettingstarted/sck-installation/","text":"SPLUNK for Kubernetes installation \u00b6 Below steps are sufficient for SCK installation for SC4SNMP project. In case you want to investigate more, all information about Splunk Connect for Kubernetes are available here . Instalation steps \u00b6 Add SCK repository to HELM \u00b6 microk8s helm3 repo add splunk https : // splunk . github . io / splunk - connect - for - kubernetes Create values file \u00b6 In order to connect to SPLUNK instance, there\u2019s a need to create sck_values.yaml file of this following structure filling variables marked with \u201c###\u201d (description below). #global settings global : logLevel : info splunk : hec : protocol : https insecureSSL : \"true\" host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### port : ###SPLUNK_PORT### kubernetes : clusterName : ###CLUSTER_NAME### #local config for logging chart splunk-kubernetes-logging : # Enable chart enabled : true # Determine logging level per chart logLevel : info containers : logFormatType : cri logFormat : \"%Y-%m-%dT%H:%M:%S.%N%:z\" # Filter on Namespace to reduce log noise from all namespaces fluentd : path : \"/var/log/containers/*_sc4snmp_*.log,/var/log/containers/*_sck_*.log\" kubernetes : securityContext : true # Set journald path. Update to reflect MicroK8s systemd services. See MicroK8s Docs. journalLogPath : /var/log/journal # Review flush intervals for Splunk Cloud vs Self-Managed back off timers buffer : \"@type\" : memory total_limit_size : 600m chunk_limit_size : 10m chunk_limit_records : 100000 flush_interval : 5s flush_thread_count : 1 overflow_action : block retry_max_times : 10 retry_type : periodic k8sMetadata : # Pod labels to collect podLabels : - app - k8s-app - release - environment - tier # In case snmp prefix is useful or if you want to remove \"kube\" sourcetypePrefix : \"kube\" splunk : hec : indexName : em_logs logs : sck : from : pod : sck-splunk-kubernetes- container : splunk-fluentd-k8s- multiline : firstline : /^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}\\:\\d{2}\\:\\d{2}\\s\\+\\d{4}\\s\\[\\w+\\]\\:/ separator : \"\\n\" flushInterval : 5 #local config for objects chart splunk-kubernetes-objects : # enable or diable objects enabled : false rbac : create : true serviceAccount : create : true name : splunk-kubernetes-objects kubernetes : insecureSSL : true objects : core : v1 : - name : pods - name : namespaces - name : component_statuses - name : nodes - name : services - name : events mode : watch splunk : hec : indexName : em_meta #local config for metrics chart splunk-kubernetes-metrics : # enable or disbale metrics enabled : false metricsInterval : 60s kubernetes : kubeletPort : 10255 kubeletPortAggregator : 10250 useRestClientSSL : false insecureSSL : true rbac : create : true serviceAccount : create : true name : splunk-kubernetes-metrics splunk : hec : indexName : em_metrics customFilters : node : tag : \"kube.node.**\" type : record_modifier body : |- <record> entity_type k8s_node </record> pod : tag : \"kube.pod.**\" type : record_modifier body : |- <record> entity_type k8s_pod </record> Values description \u00b6 Values required to be filled: Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token \u201c450a69af-16a9-4f87-9628-c26f04ad3785\u201d ###CLUSTER_NAME### name of the cluster \u201cfoo\u201d In case you want to change index names (note that in this case you need to keep consistent names in Splunk instance and SC4SNMP values file), you can override this variables: Index type variable description default value Logs index splunk-kubernetes-logging: splunk: hec: indexName: name of the logs index \u201cem_index\u201d Meta index splunk-kubernetes-objects: splunk: hec: indexName: name of the meta index \u201cem_meta\u201d Metrics index splunk-kubernetes-metrics: splunk: hec: indexName: name of the metrics index \u201cem_metrics\u201d Other variables possible to override in case you need it: variable description default global: splunk: hec: protocol port of splunk instance \u201c8088\u201d global: splunk: hec: protocol insecure_ssl is insecure ssl allowed \u201ctrue\u201d Install SCK with HELM \u00b6 microk8s helm3 install sck-for-snmp -f sck_values.yaml splunk/splunk-connect-for-kubernetes","title":"Install Splunk for Kubernetes"},{"location":"gettingstarted/sck-installation/#splunk-for-kubernetes-installation","text":"Below steps are sufficient for SCK installation for SC4SNMP project. In case you want to investigate more, all information about Splunk Connect for Kubernetes are available here .","title":"SPLUNK for Kubernetes installation"},{"location":"gettingstarted/sck-installation/#instalation-steps","text":"","title":"Instalation steps"},{"location":"gettingstarted/sck-installation/#add-sck-repository-to-helm","text":"microk8s helm3 repo add splunk https : // splunk . github . io / splunk - connect - for - kubernetes","title":"Add SCK repository to HELM"},{"location":"gettingstarted/sck-installation/#create-values-file","text":"In order to connect to SPLUNK instance, there\u2019s a need to create sck_values.yaml file of this following structure filling variables marked with \u201c###\u201d (description below). #global settings global : logLevel : info splunk : hec : protocol : https insecureSSL : \"true\" host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### port : ###SPLUNK_PORT### kubernetes : clusterName : ###CLUSTER_NAME### #local config for logging chart splunk-kubernetes-logging : # Enable chart enabled : true # Determine logging level per chart logLevel : info containers : logFormatType : cri logFormat : \"%Y-%m-%dT%H:%M:%S.%N%:z\" # Filter on Namespace to reduce log noise from all namespaces fluentd : path : \"/var/log/containers/*_sc4snmp_*.log,/var/log/containers/*_sck_*.log\" kubernetes : securityContext : true # Set journald path. Update to reflect MicroK8s systemd services. See MicroK8s Docs. journalLogPath : /var/log/journal # Review flush intervals for Splunk Cloud vs Self-Managed back off timers buffer : \"@type\" : memory total_limit_size : 600m chunk_limit_size : 10m chunk_limit_records : 100000 flush_interval : 5s flush_thread_count : 1 overflow_action : block retry_max_times : 10 retry_type : periodic k8sMetadata : # Pod labels to collect podLabels : - app - k8s-app - release - environment - tier # In case snmp prefix is useful or if you want to remove \"kube\" sourcetypePrefix : \"kube\" splunk : hec : indexName : em_logs logs : sck : from : pod : sck-splunk-kubernetes- container : splunk-fluentd-k8s- multiline : firstline : /^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}\\:\\d{2}\\:\\d{2}\\s\\+\\d{4}\\s\\[\\w+\\]\\:/ separator : \"\\n\" flushInterval : 5 #local config for objects chart splunk-kubernetes-objects : # enable or diable objects enabled : false rbac : create : true serviceAccount : create : true name : splunk-kubernetes-objects kubernetes : insecureSSL : true objects : core : v1 : - name : pods - name : namespaces - name : component_statuses - name : nodes - name : services - name : events mode : watch splunk : hec : indexName : em_meta #local config for metrics chart splunk-kubernetes-metrics : # enable or disbale metrics enabled : false metricsInterval : 60s kubernetes : kubeletPort : 10255 kubeletPortAggregator : 10250 useRestClientSSL : false insecureSSL : true rbac : create : true serviceAccount : create : true name : splunk-kubernetes-metrics splunk : hec : indexName : em_metrics customFilters : node : tag : \"kube.node.**\" type : record_modifier body : |- <record> entity_type k8s_node </record> pod : tag : \"kube.pod.**\" type : record_modifier body : |- <record> entity_type k8s_pod </record>","title":"Create values file"},{"location":"gettingstarted/sck-installation/#values-description","text":"Values required to be filled: Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token \u201c450a69af-16a9-4f87-9628-c26f04ad3785\u201d ###CLUSTER_NAME### name of the cluster \u201cfoo\u201d In case you want to change index names (note that in this case you need to keep consistent names in Splunk instance and SC4SNMP values file), you can override this variables: Index type variable description default value Logs index splunk-kubernetes-logging: splunk: hec: indexName: name of the logs index \u201cem_index\u201d Meta index splunk-kubernetes-objects: splunk: hec: indexName: name of the meta index \u201cem_meta\u201d Metrics index splunk-kubernetes-metrics: splunk: hec: indexName: name of the metrics index \u201cem_metrics\u201d Other variables possible to override in case you need it: variable description default global: splunk: hec: protocol port of splunk instance \u201c8088\u201d global: splunk: hec: protocol insecure_ssl is insecure ssl allowed \u201ctrue\u201d","title":"Values description"},{"location":"gettingstarted/sck-installation/#install-sck-with-helm","text":"microk8s helm3 install sck-for-snmp -f sck_values.yaml splunk/splunk-connect-for-kubernetes","title":"Install SCK with HELM"},{"location":"gettingstarted/splunk-requirements/","text":"Splunk requirements \u00b6 Prepare Splunk \u00b6 Requirements (Splunk Enterprise/Enterprise Cloud) \u00b6 Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes em_metrics (metrics type) em_meta (event type) em_logs (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server if HA deployment will be used the IP must be in addition to the managment inteface of each cluster member. Obtain the ip address of an internal DNS server able to resolve the Splunk Endpoint Requirements (Splunk Infrastructure Monitoring) \u00b6 Obtain the correct realm and token.","title":"Splunk Requirements"},{"location":"gettingstarted/splunk-requirements/#splunk-requirements","text":"","title":"Splunk requirements"},{"location":"gettingstarted/splunk-requirements/#prepare-splunk","text":"","title":"Prepare Splunk"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-enterpriseenterprise-cloud","text":"Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes em_metrics (metrics type) em_meta (event type) em_logs (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server if HA deployment will be used the IP must be in addition to the managment inteface of each cluster member. Obtain the ip address of an internal DNS server able to resolve the Splunk Endpoint","title":"Requirements (Splunk Enterprise/Enterprise Cloud)"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-infrastructure-monitoring","text":"Obtain the correct realm and token.","title":"Requirements (Splunk Infrastructure Monitoring)"}]}