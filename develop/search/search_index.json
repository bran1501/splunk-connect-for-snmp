{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Splunk Connect for SNMP \u00b6 Splunk welcomes your experimentation and feedback. Let your account team know you are testing Splunk Connect for SNMP. Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Home"},{"location":"#splunk-connect-for-snmp","text":"Splunk welcomes your experimentation and feedback. Let your account team know you are testing Splunk Connect for SNMP. Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Splunk Connect for SNMP"},{"location":"bestpractices/","text":"Debug Splunk Connect for SNMP \u00b6 Advices \u00b6 Check when SNMP WALK was executed last time for device \u00b6 Configure SCK Go to your Splunk and execute search: index=\"em_logs\" \"Sending due task\" \"sc4snmp;<IP_ADDRESS>;walk\" and replace by IP Address which you are intrested. Uninstall Splunk Connect ro SNMP \u00b6 To uninstall SC4SNMP run following commands: shell script microk8s helm3 uninstall snmp -n sc4snmp microk8s kubectl delete pvc --all -n sc4snmp","title":"How to"},{"location":"bestpractices/#debug-splunk-connect-for-snmp","text":"","title":"Debug Splunk Connect for SNMP"},{"location":"bestpractices/#advices","text":"","title":"Advices"},{"location":"bestpractices/#check-when-snmp-walk-was-executed-last-time-for-device","text":"Configure SCK Go to your Splunk and execute search: index=\"em_logs\" \"Sending due task\" \"sc4snmp;<IP_ADDRESS>;walk\" and replace by IP Address which you are intrested.","title":"Check when SNMP WALK was executed last time for device"},{"location":"bestpractices/#uninstall-splunk-connect-ro-snmp","text":"To uninstall SC4SNMP run following commands: shell script microk8s helm3 uninstall snmp -n sc4snmp microk8s kubectl delete pvc --all -n sc4snmp","title":"Uninstall Splunk Connect ro SNMP"},{"location":"ha/","text":"High Availability Considerations \u00b6 The SNMP protocol uses UDP as the transport protocol and is subject to network reliability, as a cosntraint. Network architecture should be considered when designing for high availability. When using a single node collector ensure automatic recovery from virtual infrastructure i.e. VMware, Openstack etc. When using a multi node cluster ensure nodes are not located such that a simple majority of nodes can be lost for example consider row, rack, network, power, storage When determine the placement of clusters the closest location by number of network hops should be utilized. For \u201cdata center\u201d applications collection should be local to the data center. Consider IP Anycast","title":"High Availability"},{"location":"ha/#high-availability-considerations","text":"The SNMP protocol uses UDP as the transport protocol and is subject to network reliability, as a cosntraint. Network architecture should be considered when designing for high availability. When using a single node collector ensure automatic recovery from virtual infrastructure i.e. VMware, Openstack etc. When using a multi node cluster ensure nodes are not located such that a simple majority of nodes can be lost for example consider row, rack, network, power, storage When determine the placement of clusters the closest location by number of network hops should be utilized. For \u201cdata center\u201d applications collection should be local to the data center. Consider IP Anycast","title":"High Availability Considerations"},{"location":"planning/","text":"Planning \u00b6 Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances when a more feature-complete solution, such as the Splunk Universal Forwarder, is not available. Architecture \u00b6 SC4SNMP is deployed using a Kubernetes distribution, typically MicroK8s, that\u2019s deseigned to be a low-touch experience for integration with sensitive edge network devices. It will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall. Requirements \u00b6 A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create or obtain real and token Planning Infrastructure \u00b6 Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP, (SC4SNMP) note the limitations highlighted above.","title":"Planning"},{"location":"planning/#planning","text":"Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances when a more feature-complete solution, such as the Splunk Universal Forwarder, is not available.","title":"Planning"},{"location":"planning/#architecture","text":"SC4SNMP is deployed using a Kubernetes distribution, typically MicroK8s, that\u2019s deseigned to be a low-touch experience for integration with sensitive edge network devices. It will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall.","title":"Architecture"},{"location":"planning/#requirements","text":"A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create or obtain real and token","title":"Requirements"},{"location":"planning/#planning-infrastructure","text":"Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP, (SC4SNMP) note the limitations highlighted above.","title":"Planning Infrastructure"},{"location":"releases/","text":"Releases \u00b6 Known Issues \u00b6 List of open known issues is available under Known issue link Open issues to the product \u00b6 To open issue for Splunk Connect for SNMP go to github SC4SNMP project and open issue. Releases \u00b6 1.0.0 \u00b6 Features \u00b6 Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud. First release contains features like: - Polling date using SNMP GET and WALK - Handle SNMP TRAP messages - Supports SNMP V1, V2 and V3.","title":"Releases"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#known-issues","text":"List of open known issues is available under Known issue link","title":"Known Issues"},{"location":"releases/#open-issues-to-the-product","text":"To open issue for Splunk Connect for SNMP go to github SC4SNMP project and open issue.","title":"Open issues to the product"},{"location":"releases/#releases_1","text":"","title":"Releases"},{"location":"releases/#100","text":"","title":"1.0.0"},{"location":"releases/#features","text":"Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud. First release contains features like: - Polling date using SNMP GET and WALK - Handle SNMP TRAP messages - Supports SNMP V1, V2 and V3.","title":"Features"},{"location":"security/","text":"Security Considerations \u00b6 The SC4SNMP solution implements SNMP in a compatible mode for current and legacy network device gear. SNMP is a protocol widely considered to be risky and requires threat mitigation at the network level. Do not expose SNMP endpoints untrusted connections such as the internet or general LAN network of a typical enterprise. Do not allow SNMPv1 or SNMPv2 connections to cross a network zone where man in the middle interception is possible. Be aware many SNMPv3 devices rely on insecure cryptography including DES, MD5, and SHA. Do not presume SNMPv3 devices and connections are secure by default. When possible use SNMPv3 with the most secure protocol options mutually supported. The default IP of each node should be considered a management interface and should be protected from network access by untrusted device by a hardware or software firewall. When possible the IP allocated for SNMP communicate should not be shared by the management interface.","title":"Security"},{"location":"security/#security-considerations","text":"The SC4SNMP solution implements SNMP in a compatible mode for current and legacy network device gear. SNMP is a protocol widely considered to be risky and requires threat mitigation at the network level. Do not expose SNMP endpoints untrusted connections such as the internet or general LAN network of a typical enterprise. Do not allow SNMPv1 or SNMPv2 connections to cross a network zone where man in the middle interception is possible. Be aware many SNMPv3 devices rely on insecure cryptography including DES, MD5, and SHA. Do not presume SNMPv3 devices and connections are secure by default. When possible use SNMPv3 with the most secure protocol options mutually supported. The default IP of each node should be considered a management interface and should be protected from network access by untrusted device by a hardware or software firewall. When possible the IP allocated for SNMP communicate should not be shared by the management interface.","title":"Security Considerations"},{"location":"configuration/deployment-configuration/","text":"Deployment Configuration \u00b6 values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / splunk - connect - for - snmp > values . yaml The whole file is divided into the following components: scheduler - more detail scheduler configuration worker - more detail worker configuration poller - more detail poller configuration otel - more detail otel configuration traps - more detail trap configuration mongodb - more detail mongo configuration rabbitmq - more detail rabbitmq configuration Shared values \u00b6 All of the components have the resources field for adjusting memory resources: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More information about the concept of resources can be found in the kuberentes documentation .","title":"Deployment"},{"location":"configuration/deployment-configuration/#deployment-configuration","text":"values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / splunk - connect - for - snmp > values . yaml The whole file is divided into the following components: scheduler - more detail scheduler configuration worker - more detail worker configuration poller - more detail poller configuration otel - more detail otel configuration traps - more detail trap configuration mongodb - more detail mongo configuration rabbitmq - more detail rabbitmq configuration","title":"Deployment Configuration"},{"location":"configuration/deployment-configuration/#shared-values","text":"All of the components have the resources field for adjusting memory resources: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More information about the concept of resources can be found in the kuberentes documentation .","title":"Shared values"},{"location":"configuration/mongo-configuration/","text":"Mongo DB Configuration \u00b6 Mongo DB is used as database for keeping schedules. Mongo DB configuration file \u00b6 Mongo DB configuration is keep in values.yaml file in section mongodb . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: mongodb : #Architecture, Architecture for Mongo deployments is immutable to move from standalone to replicaset will require a uninstall. # \"replicaset\" for HA or multi node deployments # \"standalone\" for single node non HA #architecture: \"standalone\" pdb : create : true #The following requests and limits are appropriate starting points #For productions deployments resources : limits : cpu : 2 memory : 2Gi requests : cpu : 750m memory : 512Mi persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: MongoDB on Kubernetes","title":"Mongo DB"},{"location":"configuration/mongo-configuration/#mongo-db-configuration","text":"Mongo DB is used as database for keeping schedules.","title":"Mongo DB Configuration"},{"location":"configuration/mongo-configuration/#mongo-db-configuration-file","text":"Mongo DB configuration is keep in values.yaml file in section mongodb . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: mongodb : #Architecture, Architecture for Mongo deployments is immutable to move from standalone to replicaset will require a uninstall. # \"replicaset\" for HA or multi node deployments # \"standalone\" for single node non HA #architecture: \"standalone\" pdb : create : true #The following requests and limits are appropriate starting points #For productions deployments resources : limits : cpu : 2 memory : 2Gi requests : cpu : 750m memory : 512Mi persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: MongoDB on Kubernetes","title":"Mongo DB configuration file"},{"location":"configuration/otel-configuration/","text":"Otel configuration \u00b6 Splunk OpenTelemetry Collector is a component that provides an option to send metrics to signalFx. In order to use it, you must set enabled flag in values.yaml to true : otel : # otel must be enabled if you want to use signalFx enabled : true Also you need to specify signalFx token and realm, so at the end otel element in values.yaml looks like this: otel : enabled : true signalfxToken : BCwaJ_Ands4Xh7Nrg signalfxRealm : us0 After executing microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace=sc4snmp --create-namespace , the otel pod should be up and running: splunker@ip-10-202-13-233:~$ microk8s kubectl get pods -n sc4snmp NAME READY STATUS RESTARTS AGE snmp-splunk-connect-for-snmp-worker-7496b66947-6hjhl 1/1 Running 0 32s snmp-splunk-connect-for-snmp-worker-7496b66947-flcg7 1/1 Running 0 32s snmp-splunk-connect-for-snmp-scheduler-846f9b4f69-4rxd8 1/1 Running 0 32s snmp-mibserver-cdfccf586-cwz7h 1/1 Running 0 32s snmp-splunk-connect-for-snmp-inventory--1-dxz5d 1/1 Running 0 32s snmp-splunk-connect-for-snmp-traps-6bbf57497b-v8d7l 1/1 Running 0 32s snmp-splunk-connect-for-snmp-traps-6bbf57497b-nvxrz 1/1 Running 0 31s snmp-splunk-connect-for-snmp-otel-59b89747f-kn6tf 1/1 Running 0 32s snmp-rabbitmq-0 0/1 Running 0 31s snmp-mongodb-9957b9f4d-f94hv 2/2 Running 0 32s","title":"Otel configuration"},{"location":"configuration/otel-configuration/#otel-configuration","text":"Splunk OpenTelemetry Collector is a component that provides an option to send metrics to signalFx. In order to use it, you must set enabled flag in values.yaml to true : otel : # otel must be enabled if you want to use signalFx enabled : true Also you need to specify signalFx token and realm, so at the end otel element in values.yaml looks like this: otel : enabled : true signalfxToken : BCwaJ_Ands4Xh7Nrg signalfxRealm : us0 After executing microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace=sc4snmp --create-namespace , the otel pod should be up and running: splunker@ip-10-202-13-233:~$ microk8s kubectl get pods -n sc4snmp NAME READY STATUS RESTARTS AGE snmp-splunk-connect-for-snmp-worker-7496b66947-6hjhl 1/1 Running 0 32s snmp-splunk-connect-for-snmp-worker-7496b66947-flcg7 1/1 Running 0 32s snmp-splunk-connect-for-snmp-scheduler-846f9b4f69-4rxd8 1/1 Running 0 32s snmp-mibserver-cdfccf586-cwz7h 1/1 Running 0 32s snmp-splunk-connect-for-snmp-inventory--1-dxz5d 1/1 Running 0 32s snmp-splunk-connect-for-snmp-traps-6bbf57497b-v8d7l 1/1 Running 0 32s snmp-splunk-connect-for-snmp-traps-6bbf57497b-nvxrz 1/1 Running 0 31s snmp-splunk-connect-for-snmp-otel-59b89747f-kn6tf 1/1 Running 0 32s snmp-rabbitmq-0 0/1 Running 0 31s snmp-mongodb-9957b9f4d-f94hv 2/2 Running 0 32s","title":"Otel configuration"},{"location":"configuration/poller-configuration/","text":"Poller Configuration \u00b6 Instruction contains configuration documentation for Poller. Poller is a service which is responsible for quering SNMP devices using SNMP GET, SNMP WALK functionality. Poller executes two main type of tasks tasks: - Walk task execute SNMP walk. SNMP walk is an SNMP application that uses SNMP GETNEXT requests to collect SNMP data from network and infrastructure SNMP-enabled devices, such as switches and routers. It is time consuming task, which may overload SNMP device when execute too often. It is use by SC4SNMP to callect and push all OIDs values which provided ACL has access to. - Get task - It is light weight task which goal is to query subset of OIDs defined by customer. Task is dedicated to enabled monitoring of most important OIDs with high frequency like memory or CPU utilisation. Poller configuration file \u00b6 Poller configuration is keep in values.yaml file in section poller. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Poller example configuration: poller : logLevel : \"WARN\" inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,, Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARNING , ERROR . Default value is WARNING Configure inventory \u00b6 inventory section in poller enable to configure inventory for polling data: address [REQUIRED] - IP address which SC4SNMP should connect to collect data from. port [OPTIONAL] - SNMP listening port. Default value 161 . version [REQUIRED] - SNMP version, allowed values: 1 , 2c or 3 community [OPTIONAL] - SNMP community string, filed is required when version is 1 or 2c secret [OPTIONAL] - usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. Field is required when version is 3 . More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration securityEngine [OPTIONAL] - Security engine required by SNMPv3. Field is required when version is 3 . walk_interval [OPTIONAL] - Define interval in second for SNMP walk, default value 42000 profiles [OPTIONAL] - list of SNMP profiles which need to be used for device. More than one profile can be added by semicolon separation eg. profiale1;profile2 . More about profile in Profile Configuration SmartProfiles [OPTIONAL] - enabled SmartProfile, default value true. Allowed value: true , false . Default value is true delete [OPTIONAL] - flags which define if inventory should be deleted from scheduled tasks for walk and gets. Allowed value: true , false . Default value is false . Example: poller : inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,,","title":"Poller"},{"location":"configuration/poller-configuration/#poller-configuration","text":"Instruction contains configuration documentation for Poller. Poller is a service which is responsible for quering SNMP devices using SNMP GET, SNMP WALK functionality. Poller executes two main type of tasks tasks: - Walk task execute SNMP walk. SNMP walk is an SNMP application that uses SNMP GETNEXT requests to collect SNMP data from network and infrastructure SNMP-enabled devices, such as switches and routers. It is time consuming task, which may overload SNMP device when execute too often. It is use by SC4SNMP to callect and push all OIDs values which provided ACL has access to. - Get task - It is light weight task which goal is to query subset of OIDs defined by customer. Task is dedicated to enabled monitoring of most important OIDs with high frequency like memory or CPU utilisation.","title":"Poller Configuration"},{"location":"configuration/poller-configuration/#poller-configuration-file","text":"Poller configuration is keep in values.yaml file in section poller. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Poller example configuration: poller : logLevel : \"WARN\" inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,,","title":"Poller configuration file"},{"location":"configuration/poller-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARNING , ERROR . Default value is WARNING","title":"Define log level"},{"location":"configuration/poller-configuration/#configure-inventory","text":"inventory section in poller enable to configure inventory for polling data: address [REQUIRED] - IP address which SC4SNMP should connect to collect data from. port [OPTIONAL] - SNMP listening port. Default value 161 . version [REQUIRED] - SNMP version, allowed values: 1 , 2c or 3 community [OPTIONAL] - SNMP community string, filed is required when version is 1 or 2c secret [OPTIONAL] - usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. Field is required when version is 3 . More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration securityEngine [OPTIONAL] - Security engine required by SNMPv3. Field is required when version is 3 . walk_interval [OPTIONAL] - Define interval in second for SNMP walk, default value 42000 profiles [OPTIONAL] - list of SNMP profiles which need to be used for device. More than one profile can be added by semicolon separation eg. profiale1;profile2 . More about profile in Profile Configuration SmartProfiles [OPTIONAL] - enabled SmartProfile, default value true. Allowed value: true , false . Default value is true delete [OPTIONAL] - flags which define if inventory should be deleted from scheduled tasks for walk and gets. Allowed value: true , false . Default value is false . Example: poller : inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,,","title":"Configure inventory"},{"location":"configuration/rabbitmq-configuration/","text":"RabbitMQ configuration \u00b6 RabbitMQ is a service with is used as queue service for SC4SNMP. It is queuing tasks like SNMP Walk and GETs. RabbitMQ configuration file \u00b6 RabbitMQ configuration is keep in values.yaml file in section rabbitmq . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: rabbitmq : pdb : create : true #For HA configuration at least three replicas should be used replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true #The following requests and limits are appropriate starting points #For productions deployments resources : limits : cpu : 2 memory : 2Gi requests : cpu : 750m memory : 512Mi Recommendation is to do not change this setting. In case of need to change it please follow documentation: RabbitMQ on Kubernetes","title":"RabbitMQ"},{"location":"configuration/rabbitmq-configuration/#rabbitmq-configuration","text":"RabbitMQ is a service with is used as queue service for SC4SNMP. It is queuing tasks like SNMP Walk and GETs.","title":"RabbitMQ configuration"},{"location":"configuration/rabbitmq-configuration/#rabbitmq-configuration-file","text":"RabbitMQ configuration is keep in values.yaml file in section rabbitmq . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: rabbitmq : pdb : create : true #For HA configuration at least three replicas should be used replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true #The following requests and limits are appropriate starting points #For productions deployments resources : limits : cpu : 2 memory : 2Gi requests : cpu : 750m memory : 512Mi Recommendation is to do not change this setting. In case of need to change it please follow documentation: RabbitMQ on Kubernetes","title":"RabbitMQ configuration file"},{"location":"configuration/scheduler-configuration/","text":"Scheduler configuration \u00b6 Scheduler is a service with is responsible for manager schedules for SNMP walks and GETs. Schedules definition are store in Mongo DB. Scheduler configuration file \u00b6 Scheduler configuration is keep in values.yaml file in section scheduler . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: scheduler : logLevel : \"WARN\" profiles : | test_profile: frequency: 5 condition: type: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - \"^.*\" varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [\"SNMPv2-MIB\", \"sysDescr\",0] Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARNING , ERROR . Default value is WARNING Define resource requests and limits \u00b6 scheduler : #The following resource specification is appropriate for most deployments to scale the #Larger inventories may require more memory but should not require additional cpu resources : limits : cpu : 1 memory : 1Gi requests : cpu : 200m memory : 128Mi Configure profile \u00b6 Profiles used in inventory can be created in values.yaml , which can be modified in scheduler config in values.yaml , ex.: scheduler : profiles : | #Name of profile basev1: # Define frequency for profile frequency: 10 #Define condition condition: # Define type of condition. Allowed value field and base typy: field field: \"SNMPv2-MIB.sysDescr\" # Define paterns patterns: - '.*STRING_TO_BE_MATCHED.*' #Define varbinds to query varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0] varBinds configuration \u00b6 varBinds short for \u201cvariable binding\u201d in SNMP. The combination of an Object Identifier (OID) and a value. varBinds are use for defining in profiles what OIDs should be getting from SNMP Agents. varBinds is required subsection of each profile. Syntax configuration of varBinds looks following: [ \u201cMIB-Component\u201d, \u201cMIB object\u201d[Optional], \u201cMIB index number\u201d[Optional]] MIB-Component - The SNMP MIB, itself, consists of distinct component MIBs, each of which refers to a specific defined collection of management information that is part of the overall SNMP MIB eg. SNMPv2-MIB . If only MIB-Component is set than all whole sub tree is getting. MIB object - The SNMP MIB stores only simple data types: scalars and two-dimensional arrays of scalars, called tables. Keywords SYNTAX, ACCESS, and DESCRIPTION as well as other keywords such as STATUS and INDEX are used to define the SNMP MIB managed objects. MIB index number - Define index number for given MIB Object eg. 0 . Example: varBinds : # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [ 'SNMPv2-MIB' ] - [ 'SNMPv2-MIB' , 'sysName' ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] Static Profile configuration \u00b6 Static Profile are used when they are defined on list of profile in inventory configuration in poller service Inventory configuration . Static Profile are executed even if SmartProfile flag in inventory is set to false. To configure Static Profile following value need to be set in profiles section: ProfileName - define as subsection key in profiles . frequency - define interval between executing SNMP gets in second. varBinds - define var binds to query. Example: scheduler : profiles : | static_profile_example: frequency: 20 varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0] SmartProfile configuration \u00b6 SmartProfile are executed when SmartProfile flag in inventory is set to true and condition defined in profile matching. More information about configuring inventory can be found in Inventory configuration To configure Static Profile following value need to be set in profiles section: ProfileName - define as subsection key in profiles . frequency - define interval between executing SNMP gets in second. condition - section define conditions to much profile type - key of condition section which defines type of condition. Allowed value base and field . base type of condition will be executed always when SmartProfile in inventory is set to true. field type of condition will be executed if match pattern for defined field . Supported fields: \u201cSNMPv2-MIB.sysDescr\u201d \u201cSNMPv2-MIB.sysObjectID\u201d field Define field name for condition type field. pattern Define list of regular expression pattern for MIB object field defined in field section. varBinds - define var binds to query. Example of base type of condition scheduler : profiles : | SmartProfile_base_example: frequency: 10 condition: typy: \"base\" varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] Example of field type of condition scheduler : profiles : | SmartProfile_field_example: frequency: 10 condition: typy: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - '.*STRING_TO_BE_MATCHED.*' varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] NOTE: Be aware that profile changes may not be reflected immediately. It can take up to 5 minutes for changes to propagate. There is also 5 minute TTL for an inventory pod. Basically SC4SNMP allows one inventory upgrade and then block updates for next 5 minutes","title":"Scheduler"},{"location":"configuration/scheduler-configuration/#scheduler-configuration","text":"Scheduler is a service with is responsible for manager schedules for SNMP walks and GETs. Schedules definition are store in Mongo DB.","title":"Scheduler configuration"},{"location":"configuration/scheduler-configuration/#scheduler-configuration-file","text":"Scheduler configuration is keep in values.yaml file in section scheduler . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: scheduler : logLevel : \"WARN\" profiles : | test_profile: frequency: 5 condition: type: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - \"^.*\" varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [\"SNMPv2-MIB\", \"sysDescr\",0]","title":"Scheduler configuration file"},{"location":"configuration/scheduler-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARNING , ERROR . Default value is WARNING","title":"Define log level"},{"location":"configuration/scheduler-configuration/#define-resource-requests-and-limits","text":"scheduler : #The following resource specification is appropriate for most deployments to scale the #Larger inventories may require more memory but should not require additional cpu resources : limits : cpu : 1 memory : 1Gi requests : cpu : 200m memory : 128Mi","title":"Define resource requests and limits"},{"location":"configuration/scheduler-configuration/#configure-profile","text":"Profiles used in inventory can be created in values.yaml , which can be modified in scheduler config in values.yaml , ex.: scheduler : profiles : | #Name of profile basev1: # Define frequency for profile frequency: 10 #Define condition condition: # Define type of condition. Allowed value field and base typy: field field: \"SNMPv2-MIB.sysDescr\" # Define paterns patterns: - '.*STRING_TO_BE_MATCHED.*' #Define varbinds to query varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0]","title":"Configure profile"},{"location":"configuration/scheduler-configuration/#varbinds-configuration","text":"varBinds short for \u201cvariable binding\u201d in SNMP. The combination of an Object Identifier (OID) and a value. varBinds are use for defining in profiles what OIDs should be getting from SNMP Agents. varBinds is required subsection of each profile. Syntax configuration of varBinds looks following: [ \u201cMIB-Component\u201d, \u201cMIB object\u201d[Optional], \u201cMIB index number\u201d[Optional]] MIB-Component - The SNMP MIB, itself, consists of distinct component MIBs, each of which refers to a specific defined collection of management information that is part of the overall SNMP MIB eg. SNMPv2-MIB . If only MIB-Component is set than all whole sub tree is getting. MIB object - The SNMP MIB stores only simple data types: scalars and two-dimensional arrays of scalars, called tables. Keywords SYNTAX, ACCESS, and DESCRIPTION as well as other keywords such as STATUS and INDEX are used to define the SNMP MIB managed objects. MIB index number - Define index number for given MIB Object eg. 0 . Example: varBinds : # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [ 'SNMPv2-MIB' ] - [ 'SNMPv2-MIB' , 'sysName' ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ]","title":"varBinds configuration"},{"location":"configuration/scheduler-configuration/#static-profile-configuration","text":"Static Profile are used when they are defined on list of profile in inventory configuration in poller service Inventory configuration . Static Profile are executed even if SmartProfile flag in inventory is set to false. To configure Static Profile following value need to be set in profiles section: ProfileName - define as subsection key in profiles . frequency - define interval between executing SNMP gets in second. varBinds - define var binds to query. Example: scheduler : profiles : | static_profile_example: frequency: 20 varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0]","title":"Static Profile configuration"},{"location":"configuration/scheduler-configuration/#smartprofile-configuration","text":"SmartProfile are executed when SmartProfile flag in inventory is set to true and condition defined in profile matching. More information about configuring inventory can be found in Inventory configuration To configure Static Profile following value need to be set in profiles section: ProfileName - define as subsection key in profiles . frequency - define interval between executing SNMP gets in second. condition - section define conditions to much profile type - key of condition section which defines type of condition. Allowed value base and field . base type of condition will be executed always when SmartProfile in inventory is set to true. field type of condition will be executed if match pattern for defined field . Supported fields: \u201cSNMPv2-MIB.sysDescr\u201d \u201cSNMPv2-MIB.sysObjectID\u201d field Define field name for condition type field. pattern Define list of regular expression pattern for MIB object field defined in field section. varBinds - define var binds to query. Example of base type of condition scheduler : profiles : | SmartProfile_base_example: frequency: 10 condition: typy: \"base\" varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] Example of field type of condition scheduler : profiles : | SmartProfile_field_example: frequency: 10 condition: typy: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - '.*STRING_TO_BE_MATCHED.*' varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] NOTE: Be aware that profile changes may not be reflected immediately. It can take up to 5 minutes for changes to propagate. There is also 5 minute TTL for an inventory pod. Basically SC4SNMP allows one inventory upgrade and then block updates for next 5 minutes","title":"SmartProfile configuration"},{"location":"configuration/snmpv3-configuration/","text":"Create SNMP v3 users \u00b6 Configuration of SNMP v3 when supported by the monitored devices is the most secure choice available for authentication and data privacy. Each set of credentials will be stored as \u201cSecret\u201d objects in k8s and will be referenced in the values.yaml. This allows the secret to be created once including automation by third party password managers then consumed without storing sensitive data in plain text. # <secretname>=Arbitrary name of the secret often the same as the username or prefixed with \"sc4snmp-\" # <namespace>=Namespace used to install sc4snmp # <username>=the SNMPv3 Username # <key>=key note must be at least 8 char long subject to target limitations # <authProtocol>=One of SHA (SHA1) or MD5 # <privProtocol>=One of AES or DES # Note MD5 and DES are considered insecure but must be supported for standards compliance kubectl create -n <namespace> secret generic <secretname> \\ --from-literal = userName = <username> \\ --from-literal = authKey = <key> \\ --from-literal = privKey = <key> \\ --from-literal = authProtocol = <authProtocol> \\ --from-literal = privProtocol = <privProtocol> Configured credential can be use in poller and trap services. In services configuration secretname need to be provided.","title":"SNMPv3 configuration"},{"location":"configuration/snmpv3-configuration/#create-snmp-v3-users","text":"Configuration of SNMP v3 when supported by the monitored devices is the most secure choice available for authentication and data privacy. Each set of credentials will be stored as \u201cSecret\u201d objects in k8s and will be referenced in the values.yaml. This allows the secret to be created once including automation by third party password managers then consumed without storing sensitive data in plain text. # <secretname>=Arbitrary name of the secret often the same as the username or prefixed with \"sc4snmp-\" # <namespace>=Namespace used to install sc4snmp # <username>=the SNMPv3 Username # <key>=key note must be at least 8 char long subject to target limitations # <authProtocol>=One of SHA (SHA1) or MD5 # <privProtocol>=One of AES or DES # Note MD5 and DES are considered insecure but must be supported for standards compliance kubectl create -n <namespace> secret generic <secretname> \\ --from-literal = userName = <username> \\ --from-literal = authKey = <key> \\ --from-literal = privKey = <key> \\ --from-literal = authProtocol = <authProtocol> \\ --from-literal = privProtocol = <privProtocol> Configured credential can be use in poller and trap services. In services configuration secretname need to be provided.","title":"Create SNMP v3 users"},{"location":"configuration/trap-configuration/","text":"Trap Configuration \u00b6 Trap service is a simple server which can handle SNMP traps sent by SNMP devices like rauter or switches. Trap configuration file \u00b6 Trap configuration is keep in values.yaml file in section traps. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Trap example configuration: traps : communities : 1 : - public 2c : - public - homelab usernameSecrets : - secretv3 - sc4snmp-homesecure-sha-des # Overrides the image tag whose default is the chart appVersion. logLevel : \"WARN\" # replicas: Number of replicas for trap container should be 2x number of nodes replicas : 2 #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.202.4.202 resources : limits : cpu : 500m memory : 512Mi requests : cpu : 200m memory : 256Mi Define communities \u00b6 communities define version of SNMP protocol and SNMP community string which should be use. communities key is split by protocol version, supported values are 1 and 2c . Under version SNMP community string can be defined. Example: traps : communities : 1 : - public 2c : - public - homelab Configure user secrets for SNMPv3 \u00b6 usernameSecrets key in traps enable configure SNMPv3 secrets for trap messages sent by SNMP device. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration Example: traps : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des Define load balancer IP \u00b6 loadBalancerIP is the IP address in the metallb pool. Example: traps : loadBalancerIP : 10.202.4.202 Define number of traps server replica \u00b6 replicas Defines number of replicas for trap container should be 2x number of nodes. Default value is 2 . Example: traps : #For production deployments the value should be 2x the number of nodes # Minimum 2 for single node # Minimum 6 for multi node HA replicaCount : 2 Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARNING , ERROR . Default value is WARNING","title":"Trap"},{"location":"configuration/trap-configuration/#trap-configuration","text":"Trap service is a simple server which can handle SNMP traps sent by SNMP devices like rauter or switches.","title":"Trap Configuration"},{"location":"configuration/trap-configuration/#trap-configuration-file","text":"Trap configuration is keep in values.yaml file in section traps. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Trap example configuration: traps : communities : 1 : - public 2c : - public - homelab usernameSecrets : - secretv3 - sc4snmp-homesecure-sha-des # Overrides the image tag whose default is the chart appVersion. logLevel : \"WARN\" # replicas: Number of replicas for trap container should be 2x number of nodes replicas : 2 #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.202.4.202 resources : limits : cpu : 500m memory : 512Mi requests : cpu : 200m memory : 256Mi","title":"Trap configuration file"},{"location":"configuration/trap-configuration/#define-communities","text":"communities define version of SNMP protocol and SNMP community string which should be use. communities key is split by protocol version, supported values are 1 and 2c . Under version SNMP community string can be defined. Example: traps : communities : 1 : - public 2c : - public - homelab","title":"Define communities"},{"location":"configuration/trap-configuration/#configure-user-secrets-for-snmpv3","text":"usernameSecrets key in traps enable configure SNMPv3 secrets for trap messages sent by SNMP device. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration Example: traps : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des","title":"Configure user secrets for SNMPv3"},{"location":"configuration/trap-configuration/#define-load-balancer-ip","text":"loadBalancerIP is the IP address in the metallb pool. Example: traps : loadBalancerIP : 10.202.4.202","title":"Define load balancer IP"},{"location":"configuration/trap-configuration/#define-number-of-traps-server-replica","text":"replicas Defines number of replicas for trap container should be 2x number of nodes. Default value is 2 . Example: traps : #For production deployments the value should be 2x the number of nodes # Minimum 2 for single node # Minimum 6 for multi node HA replicaCount : 2","title":"Define number of traps server replica"},{"location":"configuration/trap-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARNING , ERROR . Default value is WARNING","title":"Define log level"},{"location":"configuration/worker-configuration/","text":"Worker Configuration \u00b6 Worker is a service with is responsible for tasks execution like: SNMP Walk, GET or processing trap messages. Worker configuration file \u00b6 Worker configuration is keep in values.yaml file in section worker . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. worker : # replicas: Number of replicas for worker container should two or more replicaCount : 2 #Log level one of INFO, WARNING, CRITICAL, DEBUG, ERROR logLevel : \"WARNING\" #The following resource specification is appropriate for most deployments to scale the #Environment increase the number of workers rather than the resources per container resources : limits : cpu : 2 memory : 512Mi requests : cpu : 500m memory : 128Mi","title":"Worker"},{"location":"configuration/worker-configuration/#worker-configuration","text":"Worker is a service with is responsible for tasks execution like: SNMP Walk, GET or processing trap messages.","title":"Worker Configuration"},{"location":"configuration/worker-configuration/#worker-configuration-file","text":"Worker configuration is keep in values.yaml file in section worker . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. worker : # replicas: Number of replicas for worker container should two or more replicaCount : 2 #Log level one of INFO, WARNING, CRITICAL, DEBUG, ERROR logLevel : \"WARNING\" #The following resource specification is appropriate for most deployments to scale the #Environment increase the number of workers rather than the resources per container resources : limits : cpu : 2 memory : 512Mi requests : cpu : 500m memory : 128Mi","title":"Worker configuration file"},{"location":"gettingstarted/sc4snmp-installation/","text":"SC4SNMP Helm installation \u00b6 The basic installation process and configuration used in this section are typical for single node non HA deployments and do not have resource requests and limits. See the configuration sections for mongo, rabbitmq, scheduler, worker, and traps for guidance on production configuration. Add SC4SNMP repository \u00b6 microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now the package should be visible in helm3 search command result: microk8s helm3 search repo snmp Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / splunk - connect - for - snmp 1 . 0 . 0 1 . 0 . 0 A Helm chart for SNMP Connect for SNMP Download and modify values.yaml \u00b6 splunk : protocol : https host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### insecureSSL : \"false\" port : \"###SPLUNK_PORT###\" clusterName : my-cluster image : pullPolicy : \"Always\" traps : communities : 2c : - public - homelab #usernameSecrets: # - sc4snmp-hlab-sha-aes # - sc4snmp-hlab-sha-des #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.1.0.1 worker : # replicas: Number of replicas for worker container should two or more #replicaCount: 2 # udpConnectionTimeout: timeout in seconds for SNMP operations #udpConnectionTimeout: 5 logLevel : \"DEBUG\" scheduler : logLevel : \"INFO\" # profiles: | # generic_switch: # frequency: 60 # varBinds: # - ['SNMPv2-MIB', 'sysDescr'] # - ['SNMPv2-MIB', 'sysName', 0] # - ['IF-MIB'] # - ['TCP-MIB'] # - ['UDP-MIB'] poller : # usernameSecrets: # - sc4snmp-hlab-sha-aes # - sc4snmp-hlab-sha-des # inventory: | # address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete # 10.0.0.1,,3,,sc4snmp-hlab-sha-aes,,600,,, # 10.0.0.199,,2c,public,,,600,,,True # 10.0.0.100,,3,,sc4snmp-hlab-sha-des,,600,,, otel : # otel must be enabled if you want to use signalFx enabled : false # signalfxToken: BCwaJ_Ands4Xh7Nrg # signalfxRealm: us0 mongodb : pdb : create : true persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true rabbitmq : pdb : create : true replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true values.yaml is being used during the installation process for configuring kubernetes values. Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d Install SC4SNMP \u00b6 microk8s helm3 install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace From now on, when editing SC4SNMP configuration, the configuration change must be inserted in the corresponding section of values.yaml . For more details check configuration section. Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace Verify deployment \u00b6 In a few minutes, all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE snmp - splunk - connect - for - snmp - worker - 66685 fcb6d - f6rxb 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - scheduler - 6586488 d85 - t6j5d 1 / 1 Running 0 6 m4s snmp - mongodb - arbiter - 0 1 / 1 Running 0 6 m4s snmp - mibserver - 6 f575ddb7d - mmkmn 1 / 1 Running 0 6 m4s snmp - mongodb - 0 2 / 2 Running 0 6 m4s snmp - mongodb - 1 2 / 2 Running 0 4 m58s snmp - rabbitmq - 0 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - traps - 54 f79b945d - bmbg7 1 / 1 Running 0 6 m4s Test SNMP Traps \u00b6 Test the Trap by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system with SNMP installed. Replace the IP address 10.0.101.22 with the shared IP address above apt update apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.2.1.1.4 1 .3.6.1.2.1.1.4 s test Search Splunk: You should see one event per trap command with the host value of the test machine IP address index = \"netops\" sourcetype = \"sc4snmp:traps\" Test SNMP Poller \u00b6 Test the Poller by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system install snmpd. apt update apt-get install snmpd To test snmp poller, snmpd need to be configure to listening on external IP. To enabled listening snmpd to external IP, in configuration file: /etc/snmp/snmpd.conf replace the IP address 10.0.101.22 with the server IP address where snmpd is configured agentaddress 10.0.101.22,127.0.0.1,[::1] . Restart snmpd by execute command: service snmpd stop service snmpd start Configure SC4SNMP Poller to test add IP address which need to be poll. Add configuration entry in value.yaml file by replace the IP address 10.0.101.22 with the server IP address where snmpd were configured. poller: usernameSecrets: - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory: | address,version,community,walk_interval,profiles,SmartProfiles,delete 10 .0.101.22,public,60,,, Load value.yaml file in SC4SNMP microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace Check in Splunk Up to 1 min events appear in Splunk: index = \"netops\" sourcetype = \"sc4snmp:event\" Up to 1 min events appear in Splunk: | mpreview index = \"netmetrics\" | search sourcetype = \"sc4snmp:metric\"","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#sc4snmp-helm-installation","text":"The basic installation process and configuration used in this section are typical for single node non HA deployments and do not have resource requests and limits. See the configuration sections for mongo, rabbitmq, scheduler, worker, and traps for guidance on production configuration.","title":"SC4SNMP Helm installation"},{"location":"gettingstarted/sc4snmp-installation/#add-sc4snmp-repository","text":"microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now the package should be visible in helm3 search command result: microk8s helm3 search repo snmp Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / splunk - connect - for - snmp 1 . 0 . 0 1 . 0 . 0 A Helm chart for SNMP Connect for SNMP","title":"Add SC4SNMP repository"},{"location":"gettingstarted/sc4snmp-installation/#download-and-modify-valuesyaml","text":"splunk : protocol : https host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### insecureSSL : \"false\" port : \"###SPLUNK_PORT###\" clusterName : my-cluster image : pullPolicy : \"Always\" traps : communities : 2c : - public - homelab #usernameSecrets: # - sc4snmp-hlab-sha-aes # - sc4snmp-hlab-sha-des #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.1.0.1 worker : # replicas: Number of replicas for worker container should two or more #replicaCount: 2 # udpConnectionTimeout: timeout in seconds for SNMP operations #udpConnectionTimeout: 5 logLevel : \"DEBUG\" scheduler : logLevel : \"INFO\" # profiles: | # generic_switch: # frequency: 60 # varBinds: # - ['SNMPv2-MIB', 'sysDescr'] # - ['SNMPv2-MIB', 'sysName', 0] # - ['IF-MIB'] # - ['TCP-MIB'] # - ['UDP-MIB'] poller : # usernameSecrets: # - sc4snmp-hlab-sha-aes # - sc4snmp-hlab-sha-des # inventory: | # address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete # 10.0.0.1,,3,,sc4snmp-hlab-sha-aes,,600,,, # 10.0.0.199,,2c,public,,,600,,,True # 10.0.0.100,,3,,sc4snmp-hlab-sha-des,,600,,, otel : # otel must be enabled if you want to use signalFx enabled : false # signalfxToken: BCwaJ_Ands4Xh7Nrg # signalfxRealm: us0 mongodb : pdb : create : true persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true rabbitmq : pdb : create : true replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true values.yaml is being used during the installation process for configuring kubernetes values. Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d","title":"Download and modify values.yaml"},{"location":"gettingstarted/sc4snmp-installation/#install-sc4snmp","text":"microk8s helm3 install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace From now on, when editing SC4SNMP configuration, the configuration change must be inserted in the corresponding section of values.yaml . For more details check configuration section. Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#verify-deployment","text":"In a few minutes, all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE snmp - splunk - connect - for - snmp - worker - 66685 fcb6d - f6rxb 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - scheduler - 6586488 d85 - t6j5d 1 / 1 Running 0 6 m4s snmp - mongodb - arbiter - 0 1 / 1 Running 0 6 m4s snmp - mibserver - 6 f575ddb7d - mmkmn 1 / 1 Running 0 6 m4s snmp - mongodb - 0 2 / 2 Running 0 6 m4s snmp - mongodb - 1 2 / 2 Running 0 4 m58s snmp - rabbitmq - 0 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - traps - 54 f79b945d - bmbg7 1 / 1 Running 0 6 m4s","title":"Verify deployment"},{"location":"gettingstarted/sc4snmp-installation/#test-snmp-traps","text":"Test the Trap by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system with SNMP installed. Replace the IP address 10.0.101.22 with the shared IP address above apt update apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.2.1.1.4 1 .3.6.1.2.1.1.4 s test Search Splunk: You should see one event per trap command with the host value of the test machine IP address index = \"netops\" sourcetype = \"sc4snmp:traps\"","title":"Test SNMP Traps"},{"location":"gettingstarted/sc4snmp-installation/#test-snmp-poller","text":"Test the Poller by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system install snmpd. apt update apt-get install snmpd To test snmp poller, snmpd need to be configure to listening on external IP. To enabled listening snmpd to external IP, in configuration file: /etc/snmp/snmpd.conf replace the IP address 10.0.101.22 with the server IP address where snmpd is configured agentaddress 10.0.101.22,127.0.0.1,[::1] . Restart snmpd by execute command: service snmpd stop service snmpd start Configure SC4SNMP Poller to test add IP address which need to be poll. Add configuration entry in value.yaml file by replace the IP address 10.0.101.22 with the server IP address where snmpd were configured. poller: usernameSecrets: - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory: | address,version,community,walk_interval,profiles,SmartProfiles,delete 10 .0.101.22,public,60,,, Load value.yaml file in SC4SNMP microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace Check in Splunk Up to 1 min events appear in Splunk: index = \"netops\" sourcetype = \"sc4snmp:event\" Up to 1 min events appear in Splunk: | mpreview index = \"netmetrics\" | search sourcetype = \"sc4snmp:metric\"","title":"Test SNMP Poller"},{"location":"gettingstarted/sck-installation/","text":"Splunk Connect for Kubernetes installation \u00b6 The below steps are sufficient for a SCK installation for the SC4SNMP project with Splunk Enterprise/Enterprise Cloud. To learn more about SCK visit . Including configuration with Splunk Observability Cloud. Instalation steps \u00b6 Add SCK repository to HELM \u00b6 microk8s helm3 repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart Install SCK with HELM \u00b6 In order to run SCK on your environment, replace <> variables according to the description presented below microk8s helm3 upgrade --install sck \\ --set = \"clusterName=<cluster_name>\" \\ --set = \"splunkPlatform.endpoint=<splunk_endpoint>\" \\ --set = \"splunkPlatform.insecureSkipVerify=<insecure_skip_verify>\" \\ --set = \"splunkPlatform.token=<splunk_token>\" \\ --set = \"splunkPlatform.metricsEnabled=true\" \\ --set = \"splunkPlatform.metricsIndex=em_metrics\" \\ --set = \"splunkPlatform.index=em_logs\" \\ splunk-otel-collector-chart/splunk-otel-collector Variables description \u00b6 Placeholder Description Example splunk_endpoint host address of splunk instance https://endpoint.example.com:8088/services/collector insecure_skip_verify is insecure ssl allowed false splunk_token Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 cluster_name name of the cluster my-cluster An example of filled up command is: microk8s helm3 upgrade --install sck \\ --set = \"clusterName=my-cluster\" \\ --set = \"splunkPlatform.endpoint=https://endpoint.example.com/services/collector\" \\ --set = \"splunkPlatform.insecureSkipVerify=false\" \\ --set = \"splunkPlatform.token=4d22911c-18d9-4706-ae7b-dd1b976ca6f7\" \\ --set = \"splunkPlatform.metricsEnabled=true\" \\ --set = \"splunkPlatform.metricsIndex=em_metrics\" \\ --set = \"splunkPlatform.index=em_logs\" \\ splunk-otel-collector-chart/splunk-otel-collector","title":"Install Splunk for Kubernetes"},{"location":"gettingstarted/sck-installation/#splunk-connect-for-kubernetes-installation","text":"The below steps are sufficient for a SCK installation for the SC4SNMP project with Splunk Enterprise/Enterprise Cloud. To learn more about SCK visit . Including configuration with Splunk Observability Cloud.","title":"Splunk Connect for Kubernetes installation"},{"location":"gettingstarted/sck-installation/#instalation-steps","text":"","title":"Instalation steps"},{"location":"gettingstarted/sck-installation/#add-sck-repository-to-helm","text":"microk8s helm3 repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart","title":"Add SCK repository to HELM"},{"location":"gettingstarted/sck-installation/#install-sck-with-helm","text":"In order to run SCK on your environment, replace <> variables according to the description presented below microk8s helm3 upgrade --install sck \\ --set = \"clusterName=<cluster_name>\" \\ --set = \"splunkPlatform.endpoint=<splunk_endpoint>\" \\ --set = \"splunkPlatform.insecureSkipVerify=<insecure_skip_verify>\" \\ --set = \"splunkPlatform.token=<splunk_token>\" \\ --set = \"splunkPlatform.metricsEnabled=true\" \\ --set = \"splunkPlatform.metricsIndex=em_metrics\" \\ --set = \"splunkPlatform.index=em_logs\" \\ splunk-otel-collector-chart/splunk-otel-collector","title":"Install SCK with HELM"},{"location":"gettingstarted/sck-installation/#variables-description","text":"Placeholder Description Example splunk_endpoint host address of splunk instance https://endpoint.example.com:8088/services/collector insecure_skip_verify is insecure ssl allowed false splunk_token Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 cluster_name name of the cluster my-cluster An example of filled up command is: microk8s helm3 upgrade --install sck \\ --set = \"clusterName=my-cluster\" \\ --set = \"splunkPlatform.endpoint=https://endpoint.example.com/services/collector\" \\ --set = \"splunkPlatform.insecureSkipVerify=false\" \\ --set = \"splunkPlatform.token=4d22911c-18d9-4706-ae7b-dd1b976ca6f7\" \\ --set = \"splunkPlatform.metricsEnabled=true\" \\ --set = \"splunkPlatform.metricsIndex=em_metrics\" \\ --set = \"splunkPlatform.index=em_logs\" \\ splunk-otel-collector-chart/splunk-otel-collector","title":"Variables description"},{"location":"gettingstarted/splunk-requirements/","text":"Splunk requirements \u00b6 Prepare Splunk \u00b6 Requirements (Splunk Enterprise/Enterprise Cloud) \u00b6 Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes: em_metrics (metrics type) em_meta (event type) em_logs (event type) netmetrics (metrics type) netops (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server. If HA deployment will be used, the IP must be in addition to the managment interface of each cluster member. Obtain the ip address of an internal DNS server that is able to resolve the Splunk Endpoint. Requirements (Splunk Infrastructure Monitoring) \u00b6 Obtain the correct realm and token.","title":"Splunk Requirements"},{"location":"gettingstarted/splunk-requirements/#splunk-requirements","text":"","title":"Splunk requirements"},{"location":"gettingstarted/splunk-requirements/#prepare-splunk","text":"","title":"Prepare Splunk"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-enterpriseenterprise-cloud","text":"Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes: em_metrics (metrics type) em_meta (event type) em_logs (event type) netmetrics (metrics type) netops (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server. If HA deployment will be used, the IP must be in addition to the managment interface of each cluster member. Obtain the ip address of an internal DNS server that is able to resolve the Splunk Endpoint.","title":"Requirements (Splunk Enterprise/Enterprise Cloud)"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-infrastructure-monitoring","text":"Obtain the correct realm and token.","title":"Requirements (Splunk Infrastructure Monitoring)"},{"location":"gettingstarted/mk8s/k8s-microk8s/","text":"Splunk Connect for SNMP using MicroK8s \u00b6 Using this deployment option any Linux deployment of Microk8s can be used to support SC4SNMP given the following requirements are met. The minimum requirements below are suitable for proof of value and small installations, actual requirements will differ. Single node minimum * 4 cores * 8 GB of memory per node * 50 GB mounted as / Three node minimum per node * 4 cores * 8 GB of memory per node * 50 GB mounted / MicroK8s installation on Ubuntu \u00b6 The following quick start guidance is based on Ubuntu 20.04LTS with MicroK8s with internet access. Other deployment options may be found in the MicroK8s documentation including offline and with proxy. Install MicroK8s using Snap \u00b6 sudo snap install microk8s --classic Add user to the microk8s group to no longer have to use the sudo command sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Wait for Installation of Mk8S to complete microk8s status --wait-ready Add additional nodes (optional) \u00b6 Repeat the steps above for each additional node (minimum total 3) On the first node issue the following, this will return joining instructions microk8s add-node On each additional node use the output from the command above Install basic services required for sc4snmp \u00b6 The following commands can be issued from any one node in a cluster sudo systemctl enable iscsid microk8s enable rbac storage openebs helm3 microk8s status --wait-ready Install the DNS server for mk8s and configure the forwarding DNS servers replace the IP addressed below (opendns) from allowed values for your network microk8s enable dns:208.67.222.222,208.67.220.220 microk8s status --wait-ready Install Metallb \u00b6 Note: when installing metallb you will be prompted for one or more IPs to use as entry points Into the cluster. If your plan to enable clustering, this IP should not be assigned to the host (floats) If you do not plan to cluster, then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax for single server installations this can be the same as the primary ip. microk8s enable metallb microk8s status --wait-ready","title":"Platform Microk8s"},{"location":"gettingstarted/mk8s/k8s-microk8s/#splunk-connect-for-snmp-using-microk8s","text":"Using this deployment option any Linux deployment of Microk8s can be used to support SC4SNMP given the following requirements are met. The minimum requirements below are suitable for proof of value and small installations, actual requirements will differ. Single node minimum * 4 cores * 8 GB of memory per node * 50 GB mounted as / Three node minimum per node * 4 cores * 8 GB of memory per node * 50 GB mounted /","title":"Splunk Connect for SNMP using MicroK8s"},{"location":"gettingstarted/mk8s/k8s-microk8s/#microk8s-installation-on-ubuntu","text":"The following quick start guidance is based on Ubuntu 20.04LTS with MicroK8s with internet access. Other deployment options may be found in the MicroK8s documentation including offline and with proxy.","title":"MicroK8s installation on Ubuntu"},{"location":"gettingstarted/mk8s/k8s-microk8s/#install-microk8s-using-snap","text":"sudo snap install microk8s --classic Add user to the microk8s group to no longer have to use the sudo command sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Wait for Installation of Mk8S to complete microk8s status --wait-ready","title":"Install MicroK8s using Snap"},{"location":"gettingstarted/mk8s/k8s-microk8s/#add-additional-nodes-optional","text":"Repeat the steps above for each additional node (minimum total 3) On the first node issue the following, this will return joining instructions microk8s add-node On each additional node use the output from the command above","title":"Add additional nodes (optional)"},{"location":"gettingstarted/mk8s/k8s-microk8s/#install-basic-services-required-for-sc4snmp","text":"The following commands can be issued from any one node in a cluster sudo systemctl enable iscsid microk8s enable rbac storage openebs helm3 microk8s status --wait-ready Install the DNS server for mk8s and configure the forwarding DNS servers replace the IP addressed below (opendns) from allowed values for your network microk8s enable dns:208.67.222.222,208.67.220.220 microk8s status --wait-ready","title":"Install basic services required for sc4snmp"},{"location":"gettingstarted/mk8s/k8s-microk8s/#install-metallb","text":"Note: when installing metallb you will be prompted for one or more IPs to use as entry points Into the cluster. If your plan to enable clustering, this IP should not be assigned to the host (floats) If you do not plan to cluster, then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax for single server installations this can be the same as the primary ip. microk8s enable metallb microk8s status --wait-ready","title":"Install Metallb"}]}