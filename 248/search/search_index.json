{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Splunk Connect for SNMP \u00b6 THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback. Let your account team know you are testing Splunk Connect for SNMP. Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Home"},{"location":"#splunk-connect-for-snmp","text":"THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback. Let your account team know you are testing Splunk Connect for SNMP. Splunk Connect for SNMP is an edge-deployed, containerized and highly available solution for collecting SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Splunk Connect for SNMP"},{"location":"planning/","text":"Planning \u00b6 Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances when a more feature-complete solution, such as the Splunk Universal Forwarder, is not available. Architecture \u00b6 SC4SNMP is deployed using a Kubernetes distribution, typically MicroK8s, that\u2019s deseigned to be a low-touch experience for integration with sensitive edge network devices. It will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall. Requirements \u00b6 A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create or obtain real and token Planning Infrastructure \u00b6 Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP, (SC4SNMP) note the limitations highlighted above.","title":"Planning"},{"location":"planning/#planning","text":"Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances when a more feature-complete solution, such as the Splunk Universal Forwarder, is not available.","title":"Planning"},{"location":"planning/#architecture","text":"SC4SNMP is deployed using a Kubernetes distribution, typically MicroK8s, that\u2019s deseigned to be a low-touch experience for integration with sensitive edge network devices. It will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall.","title":"Architecture"},{"location":"planning/#requirements","text":"A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create or obtain real and token","title":"Requirements"},{"location":"planning/#planning-infrastructure","text":"Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on a machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP, (SC4SNMP) note the limitations highlighted above.","title":"Planning Infrastructure"},{"location":"configuration/deployment-configuration/","text":"Deployment Configuration \u00b6 values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / splunk - connect - for - snmp -- version < VERSION_TAG > > values . yaml variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none The whole file is divided into the following components: scheduler - more detail scheduler configuration worker - more detail worker configuration poller - more detail poller configuration traps - more detail trap configuration mongodb - more detail mongo configuration rabbitmq - more detail rabbitmq configuration Shared values \u00b6 All of the components have the resources field for adjusting memory resources: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More information about the concept of resources can be found in the kuberentes documentation .","title":"Deployment"},{"location":"configuration/deployment-configuration/#deployment-configuration","text":"values.yaml are the main point of SC4SNMP management. The most important variables are already there from the very beginning after executing: microk8s helm3 inspect values splunk - connect - for - snmp / splunk - connect - for - snmp -- version < VERSION_TAG > > values . yaml variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none The whole file is divided into the following components: scheduler - more detail scheduler configuration worker - more detail worker configuration poller - more detail poller configuration traps - more detail trap configuration mongodb - more detail mongo configuration rabbitmq - more detail rabbitmq configuration","title":"Deployment Configuration"},{"location":"configuration/deployment-configuration/#shared-values","text":"All of the components have the resources field for adjusting memory resources: resources : limits : cpu : 1000m memory : 2Gi requests : cpu : 1000m memory : 2Gi More information about the concept of resources can be found in the kuberentes documentation .","title":"Shared values"},{"location":"configuration/mongo-configuration/","text":"Mongo DB Configuration \u00b6 Mongo DB is used as database for keeping schedules. Mongo DB configuration file \u00b6 Mongo DB configuration is keep in values.yaml file in section mongodb . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: mongodb : pdb : create : true persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: MongoDB on Kubernetes","title":"Mongo DB"},{"location":"configuration/mongo-configuration/#mongo-db-configuration","text":"Mongo DB is used as database for keeping schedules.","title":"Mongo DB Configuration"},{"location":"configuration/mongo-configuration/#mongo-db-configuration-file","text":"Mongo DB configuration is keep in values.yaml file in section mongodb . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: mongodb : pdb : create : true persistence : storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: MongoDB on Kubernetes","title":"Mongo DB configuration file"},{"location":"configuration/poller-configuration/","text":"Poller Configuration \u00b6 Instruction contains configuration documentation for Poller. Poller is a service which is responsible for quering SNMP devices using SNMP GET, SNMP WALK functionality. Poller executes two main type of tasks tasks: - Walk task execute SNMP walk. SNMP walk is an SNMP application that uses SNMP GETNEXT requests to collect SNMP data from network and infrastructure SNMP-enabled devices, such as switches and routers. It is time consuming task, which may overload SNMP device when execute too often. It is use by SC4SNMP to callect and push all OIDs values which provided ACL has access to. - Get task - It is light weight task which goal is to query subset of OIDs defined by customer. Task is dedicated to enabled monitoring of most important OIDs with high frequency like memory or CPU utilisation. Poller configuration file \u00b6 Poller configuration is keep in values.yaml file in section poller. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Poller example configuration: poller : logLevel : \"WARN\" inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,, Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN Configure inventory \u00b6 inventory section in poller enable to configure inventory for polling data: address [REQUIRED] - IP address which SC4SNMP should connect to collect data from. port [OPTIONAL] - SNMP listening port. Default value 161 . version [REQUIRED] - SNMP version, allowed values: 1 , 2c or 3 community [OPTIONAL] - SNMP community string, filed is required when version is 1 or 2c secret [OPTIONAL] - usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be used, as a value it need to put name of \u201cSecret\u201d objects. This field is required when selected version is 3 . More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration securityEngine [OPTIONAL] - Security engine required by SNMPv3. Field is required when version is 3 . walk_interval [OPTIONAL] - Define interval in second for SNMP walk, default value 42000 profiles [OPTIONAL] - list of SNMP profiles which need to be used for a device. More than one profile can be added, profiles should be separated by a semicolon eg. profile1;profile2 . More about profile in Profile Configuration SmartProfiles [OPTIONAL] - enables SmartProfiles, allowed values: true , false . Default value is true delete [OPTIONAL] - flag which defines if inventory should be deleted from scheduler configuration. Allowed value: true , false . Default value is false . Example: poller : inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,,","title":"Poller"},{"location":"configuration/poller-configuration/#poller-configuration","text":"Instruction contains configuration documentation for Poller. Poller is a service which is responsible for quering SNMP devices using SNMP GET, SNMP WALK functionality. Poller executes two main type of tasks tasks: - Walk task execute SNMP walk. SNMP walk is an SNMP application that uses SNMP GETNEXT requests to collect SNMP data from network and infrastructure SNMP-enabled devices, such as switches and routers. It is time consuming task, which may overload SNMP device when execute too often. It is use by SC4SNMP to callect and push all OIDs values which provided ACL has access to. - Get task - It is light weight task which goal is to query subset of OIDs defined by customer. Task is dedicated to enabled monitoring of most important OIDs with high frequency like memory or CPU utilisation.","title":"Poller Configuration"},{"location":"configuration/poller-configuration/#poller-configuration-file","text":"Poller configuration is keep in values.yaml file in section poller. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Poller example configuration: poller : logLevel : \"WARN\" inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,,","title":"Poller configuration file"},{"location":"configuration/poller-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Define log level"},{"location":"configuration/poller-configuration/#configure-inventory","text":"inventory section in poller enable to configure inventory for polling data: address [REQUIRED] - IP address which SC4SNMP should connect to collect data from. port [OPTIONAL] - SNMP listening port. Default value 161 . version [REQUIRED] - SNMP version, allowed values: 1 , 2c or 3 community [OPTIONAL] - SNMP community string, filed is required when version is 1 or 2c secret [OPTIONAL] - usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be used, as a value it need to put name of \u201cSecret\u201d objects. This field is required when selected version is 3 . More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration securityEngine [OPTIONAL] - Security engine required by SNMPv3. Field is required when version is 3 . walk_interval [OPTIONAL] - Define interval in second for SNMP walk, default value 42000 profiles [OPTIONAL] - list of SNMP profiles which need to be used for a device. More than one profile can be added, profiles should be separated by a semicolon eg. profile1;profile2 . More about profile in Profile Configuration SmartProfiles [OPTIONAL] - enables SmartProfiles, allowed values: true , false . Default value is true delete [OPTIONAL] - flag which defines if inventory should be deleted from scheduler configuration. Allowed value: true , false . Default value is false . Example: poller : inventory : | address,port,version,community,secret,securityEngine,walk_interval,profiles,SmartProfiles,delete 10.202.4.202,,2c,public,,,2000,,,","title":"Configure inventory"},{"location":"configuration/rabbitmq-configuration/","text":"RabbitMQ configuration \u00b6 RabbitMQ is a service with is used as queue service for SC4SNMP. It is queuing tasks like SNMP Walk and GETs. RabbitMQ configuration file \u00b6 RabbitMQ configuration is keep in values.yaml file in section rabbitmq . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: rabbitmq : pdb : create : true replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: RabbitMQ on Kubernetes","title":"RabbitMQ"},{"location":"configuration/rabbitmq-configuration/#rabbitmq-configuration","text":"RabbitMQ is a service with is used as queue service for SC4SNMP. It is queuing tasks like SNMP Walk and GETs.","title":"RabbitMQ configuration"},{"location":"configuration/rabbitmq-configuration/#rabbitmq-configuration-file","text":"RabbitMQ configuration is keep in values.yaml file in section rabbitmq . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: rabbitmq : pdb : create : true replicaCount : 1 persistence : enabled : true storageClass : \"microk8s-hostpath\" volumePermissions : enabled : true Recommendation is to do not change this setting. In case of need to change it please follow documentation: RabbitMQ on Kubernetes","title":"RabbitMQ configuration file"},{"location":"configuration/scheduler-configuration/","text":"Scheduler configuration \u00b6 Scheduler is a service which is responsible for managing schedules for SNMP walks and polls. Schedules definition are stored in Mongo DB. Scheduler configuration file \u00b6 Scheduler configuration can be found in values.yaml file under scheduler section. To downland example file execute following command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: scheduler : logLevel : \"WARN\" profiles : | test_profile: frequency: 5 condition: type: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - \"^.*\" varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [\"SNMPv2-MIB\", \"sysDescr\",0] Defining log level \u00b6 Log level for scheduler can be set by changing value for key logLevel . Allowed values are: DEBUG , INFO , WARN , ERROR . Default value is WARN Configuring profiles \u00b6 Profiles used in inventory can be created and modified in profiles section which is part of scheduler configuration, ex.: scheduler : profiles : | #Name of profile basev1: # Define frequency for profile frequency: 10 #Define condition condition: # Define type of condition. Allowed value field and base typy: field field: \"SNMPv2-MIB.sysDescr\" # Define paterns patterns: - '.*STRING_TO_BE_MATCHED.*' #Define varbinds to query varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0] varBinds configuration \u00b6 varBinds short for \u201cvariable binding\u201d in SNMP. The combination of an Object Identifier (OID) and a value. varBinds are used for defining in profiles what OIDs should be requested from SNMP Agents. varBinds is a required subsection of each profile. varBinds configuration syntax is following: [ \u201cMIB-Component\u201d, \u201cMIB object\u201d[Optional], \u201cMIB index number\u201d[Optional]] MIB-Component - The SNMP MIB, itself, consists of distinct MIBs components, each of which refers to a specific defined collection of management information that is part of the overall SNMP MIB eg. SNMPv2-MIB . If only MIB-Component is set then whole sub tree will be requested. MIB object - The SNMP MIB stores only simple data types: scalars and two-dimensional arrays of scalars, called tables. Keywords SYNTAX, ACCESS, and DESCRIPTION as well as other keywords such as STATUS and INDEX are used to define the SNMP MIB managed objects. MIB index number - Define index number for given MIB Object eg. 0 . Example: varBinds : # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [ 'SNMPv2-MIB' ] - [ 'SNMPv2-MIB' , 'sysName' ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] Static Profile configuration \u00b6 Static Profiles will be used when they are added on list of profiles in poller inventory configuration Inventory configuration . Static Profiles are executed regardless of the current setting of SmartProfiles flag in inventory. To configure Static Profile following values need to be configured in profiles section: ProfileName - define as subsection key in profiles . frequency - define an interval between executing SNMP polls in seconds. varBinds - define var binds to query. Example: scheduler : profiles : | static_profile_example: frequency: 20 varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0] SmartProfiles profile configuration \u00b6 SmartProfiles are executed when SmartProfiles flag in inventory is set to true and condition defined in a given profile is matching. More information about configuring inventory can be found in Inventory configuration To configure Static Profile following values need to be set in profiles section: ProfileName - define as subsection key in profiles . frequency - define an interval between executing SNMP gets in seconds. condition - section define conditions to match profile type - key of condition section which defines type of condition. Allowed value base and field . base type of condition, will always be executed when SmartProfiles flag in inventory is set to true. field type of condition, will be executed if pattern is matched for defined field . field Define field name for condition type field . Determines on which field pattern matching will be done. Supported fields: - \u201cSNMPv2-MIB.sysDescr\u201d - \u201cSNMPv2-MIB.sysObjectID\u201d patterns Define list of regular expression patterns which will be used for matching. varBinds - define var binds to poll. Example of base type of condition scheduler : profiles : | SmartProfile_base_example: frequency: 10 condition: typy: \"base\" varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] Example of field type of condition scheduler : profiles : | SmartProfile_field_example: frequency: 10 condition: typy: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - '.*STRING_TO_BE_MATCHED.*' varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName']","title":"Scheduler"},{"location":"configuration/scheduler-configuration/#scheduler-configuration","text":"Scheduler is a service which is responsible for managing schedules for SNMP walks and polls. Schedules definition are stored in Mongo DB.","title":"Scheduler configuration"},{"location":"configuration/scheduler-configuration/#scheduler-configuration-file","text":"Scheduler configuration can be found in values.yaml file under scheduler section. To downland example file execute following command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Example: scheduler : logLevel : \"WARN\" profiles : | test_profile: frequency: 5 condition: type: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - \"^.*\" varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [\"SNMPv2-MIB\", \"sysDescr\",0]","title":"Scheduler configuration file"},{"location":"configuration/scheduler-configuration/#defining-log-level","text":"Log level for scheduler can be set by changing value for key logLevel . Allowed values are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Defining log level"},{"location":"configuration/scheduler-configuration/#configuring-profiles","text":"Profiles used in inventory can be created and modified in profiles section which is part of scheduler configuration, ex.: scheduler : profiles : | #Name of profile basev1: # Define frequency for profile frequency: 10 #Define condition condition: # Define type of condition. Allowed value field and base typy: field field: \"SNMPv2-MIB.sysDescr\" # Define paterns patterns: - '.*STRING_TO_BE_MATCHED.*' #Define varbinds to query varBinds: # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0]","title":"Configuring profiles"},{"location":"configuration/scheduler-configuration/#varbinds-configuration","text":"varBinds short for \u201cvariable binding\u201d in SNMP. The combination of an Object Identifier (OID) and a value. varBinds are used for defining in profiles what OIDs should be requested from SNMP Agents. varBinds is a required subsection of each profile. varBinds configuration syntax is following: [ \u201cMIB-Component\u201d, \u201cMIB object\u201d[Optional], \u201cMIB index number\u201d[Optional]] MIB-Component - The SNMP MIB, itself, consists of distinct MIBs components, each of which refers to a specific defined collection of management information that is part of the overall SNMP MIB eg. SNMPv2-MIB . If only MIB-Component is set then whole sub tree will be requested. MIB object - The SNMP MIB stores only simple data types: scalars and two-dimensional arrays of scalars, called tables. Keywords SYNTAX, ACCESS, and DESCRIPTION as well as other keywords such as STATUS and INDEX are used to define the SNMP MIB managed objects. MIB index number - Define index number for given MIB Object eg. 0 . Example: varBinds : # Syntax: [ \"MIB-Component\", \"MIB object name\"[Optional], \"MIB index number\"[Optional]] - [ 'SNMPv2-MIB' ] - [ 'SNMPv2-MIB' , 'sysName' ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ]","title":"varBinds configuration"},{"location":"configuration/scheduler-configuration/#static-profile-configuration","text":"Static Profiles will be used when they are added on list of profiles in poller inventory configuration Inventory configuration . Static Profiles are executed regardless of the current setting of SmartProfiles flag in inventory. To configure Static Profile following values need to be configured in profiles section: ProfileName - define as subsection key in profiles . frequency - define an interval between executing SNMP polls in seconds. varBinds - define var binds to query. Example: scheduler : profiles : | static_profile_example: frequency: 20 varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] - ['SNMPv2-MIB', 'sysUpTime',0]","title":"Static Profile configuration"},{"location":"configuration/scheduler-configuration/#smartprofiles-profile-configuration","text":"SmartProfiles are executed when SmartProfiles flag in inventory is set to true and condition defined in a given profile is matching. More information about configuring inventory can be found in Inventory configuration To configure Static Profile following values need to be set in profiles section: ProfileName - define as subsection key in profiles . frequency - define an interval between executing SNMP gets in seconds. condition - section define conditions to match profile type - key of condition section which defines type of condition. Allowed value base and field . base type of condition, will always be executed when SmartProfiles flag in inventory is set to true. field type of condition, will be executed if pattern is matched for defined field . field Define field name for condition type field . Determines on which field pattern matching will be done. Supported fields: - \u201cSNMPv2-MIB.sysDescr\u201d - \u201cSNMPv2-MIB.sysObjectID\u201d patterns Define list of regular expression patterns which will be used for matching. varBinds - define var binds to poll. Example of base type of condition scheduler : profiles : | SmartProfile_base_example: frequency: 10 condition: typy: \"base\" varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName'] Example of field type of condition scheduler : profiles : | SmartProfile_field_example: frequency: 10 condition: typy: \"field\" field: \"SNMPv2-MIB.sysDescr\" patterns: - '.*STRING_TO_BE_MATCHED.*' varBinds: - ['SNMPv2-MIB'] - ['SNMPv2-MIB', 'sysName']","title":"SmartProfiles profile configuration"},{"location":"configuration/snmpv3-configuration/","text":"Create SNMP v3 users \u00b6 Configuration of SNMP v3 when supported by the monitored devices is the most secure choice available for authentication and data privacy. Each set of credentials will be stored as \u201cSecret\u201d objects in k8s and will be referenced in the values.yaml. This allows the secret to be created once including automation by third party password managers then consumed without storing sensitive data in plain text. # <secretname>=Arbitrary name of the secret often the same as the username or prefixed with \"sc4snmp-\" # <namespace>=Namespace used to install sc4snmp # <username>=the SNMPv3 Username # <key>=key note must be at least 8 char long subject to target limitations # <authProtocol>=One of SHA (SHA1) or MD5 # <privProtocol>=One of AES or DES # Note MD5 and DES are considered insecure but must be supported for standards compliance kubectl create -n <namespace> secret generic <secretname> \\ --from-literal = userName = <username> \\ --from-literal = authKey = <key> \\ --from-literal = privKey = <key> \\ --from-literal = authProtocol = <authProtocol> \\ --from-literal = privProtocol = <privProtocol> Configured credential can be use in poller and trap services. In services configuration secretname need to be provided.","title":"SNMPv3 configuration"},{"location":"configuration/snmpv3-configuration/#create-snmp-v3-users","text":"Configuration of SNMP v3 when supported by the monitored devices is the most secure choice available for authentication and data privacy. Each set of credentials will be stored as \u201cSecret\u201d objects in k8s and will be referenced in the values.yaml. This allows the secret to be created once including automation by third party password managers then consumed without storing sensitive data in plain text. # <secretname>=Arbitrary name of the secret often the same as the username or prefixed with \"sc4snmp-\" # <namespace>=Namespace used to install sc4snmp # <username>=the SNMPv3 Username # <key>=key note must be at least 8 char long subject to target limitations # <authProtocol>=One of SHA (SHA1) or MD5 # <privProtocol>=One of AES or DES # Note MD5 and DES are considered insecure but must be supported for standards compliance kubectl create -n <namespace> secret generic <secretname> \\ --from-literal = userName = <username> \\ --from-literal = authKey = <key> \\ --from-literal = privKey = <key> \\ --from-literal = authProtocol = <authProtocol> \\ --from-literal = privProtocol = <privProtocol> Configured credential can be use in poller and trap services. In services configuration secretname need to be provided.","title":"Create SNMP v3 users"},{"location":"configuration/trap-configuration/","text":"Trap Configuration \u00b6 Trap service is a simple server which can handle SNMP traps sent by SNMP devices like rauter or switches. Trap configuration file \u00b6 Trap configuration is keep in values.yaml file in section traps. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Trap example configuration: traps : communities : 1 : - public 2c : - public - homelab usernameSecrets : - secretv3 - sc4snmp-homesecure-sha-des # Overrides the image tag whose default is the chart appVersion. logLevel : \"WARN\" # replicas: Number of replicas for trap container should be 2x number of nodes replicas : 2 #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.202.4.202 Define communities \u00b6 communities define version of SNMP protocol and SNMP community string which should be use. communities key is split by protocol version, supported values are 1 and 2c . Under version SNMP community string can be defined. Example: traps : communities : 1 : - public 2c : - public - homelab Configure user secrets for SNMPv3 \u00b6 usernameSecrets key in traps enable configure SNMPv3 secrets for trap messages sent by SNMP device. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration Example: traps : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des Define load balancer IP \u00b6 loadBalancerIP is the IP address in the metallb pool. Example: traps : loadBalancerIP : 10.202.4.202 Define number of traps server replica \u00b6 replicas Defines number of replicas for trap container should be 2x number of nodes. Default value is 2 . Example: traps : replicas : 2 Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Trap"},{"location":"configuration/trap-configuration/#trap-configuration","text":"Trap service is a simple server which can handle SNMP traps sent by SNMP devices like rauter or switches.","title":"Trap Configuration"},{"location":"configuration/trap-configuration/#trap-configuration-file","text":"Trap configuration is keep in values.yaml file in section traps. To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Trap example configuration: traps : communities : 1 : - public 2c : - public - homelab usernameSecrets : - secretv3 - sc4snmp-homesecure-sha-des # Overrides the image tag whose default is the chart appVersion. logLevel : \"WARN\" # replicas: Number of replicas for trap container should be 2x number of nodes replicas : 2 #loadBalancerIP: The IP address in the metallb pool loadBalancerIP : 10.202.4.202","title":"Trap configuration file"},{"location":"configuration/trap-configuration/#define-communities","text":"communities define version of SNMP protocol and SNMP community string which should be use. communities key is split by protocol version, supported values are 1 and 2c . Under version SNMP community string can be defined. Example: traps : communities : 1 : - public 2c : - public - homelab","title":"Define communities"},{"location":"configuration/trap-configuration/#configure-user-secrets-for-snmpv3","text":"usernameSecrets key in traps enable configure SNMPv3 secrets for trap messages sent by SNMP device. usernameSecrets define which secrets in \u201cSecret\u201d objects in k8s should be use, as a value it need to put name of \u201cSecret\u201d objects. More information how to define \u201cSecrets\u201d object for SNMPv3 can be found in SNMPv3 Configuration Example: traps : usernameSecrets : - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des","title":"Configure user secrets for SNMPv3"},{"location":"configuration/trap-configuration/#define-load-balancer-ip","text":"loadBalancerIP is the IP address in the metallb pool. Example: traps : loadBalancerIP : 10.202.4.202","title":"Define load balancer IP"},{"location":"configuration/trap-configuration/#define-number-of-traps-server-replica","text":"replicas Defines number of replicas for trap container should be 2x number of nodes. Default value is 2 . Example: traps : replicas : 2","title":"Define number of traps server replica"},{"location":"configuration/trap-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Define log level"},{"location":"configuration/worker-configuration/","text":"Worker Configuration \u00b6 Worker is a service with is responsible for tasks execution like: SNMP Walk, GET or serve Trap messages. Worker configuration file \u00b6 Worker configuration is keep in values.yaml file in section worker . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. worker : # replicas: Number of replicas for worker container should two or more replicas : 2 logLevel : \"WARN\" Define number of worker server replica \u00b6 replicas Defines number of replicas for worker container should be 2x number of nodes. Default value is 2 . Example: worker : replicas : 2 Define log level \u00b6 Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Worker"},{"location":"configuration/worker-configuration/#worker-configuration","text":"Worker is a service with is responsible for tasks execution like: SNMP Walk, GET or serve Trap messages.","title":"Worker Configuration"},{"location":"configuration/worker-configuration/#worker-configuration-file","text":"Worker configuration is keep in values.yaml file in section worker . To downland example file execute command: curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. worker : # replicas: Number of replicas for worker container should two or more replicas : 2 logLevel : \"WARN\"","title":"Worker configuration file"},{"location":"configuration/worker-configuration/#define-number-of-worker-server-replica","text":"replicas Defines number of replicas for worker container should be 2x number of nodes. Default value is 2 . Example: worker : replicas : 2","title":"Define number of worker server replica"},{"location":"configuration/worker-configuration/#define-log-level","text":"Log level for trap can be set by changing value for key logLevel . Allowed value are: DEBUG , INFO , WARN , ERROR . Default value is WARN","title":"Define log level"},{"location":"gettingstarted/k8s-microk8s/","text":"MicroK8s installation on Ubuntu \u00b6 We need to have a normal install of kubectl because of operator scripts sudo snap install microk8s --classic Add user to the microk8s group to no longer have to use the sudo command sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Check microk8s status microk8s status --wait-ready Install required microk8s dependencies to deploy SC4SNMP. Note: when installing metallb you will be prompted for one or more IPs to use as entry points Into the cluster. If your plan to enable clustering, this IP should not be assigned to the host (floats) If you do not plan to cluster, then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax microk8s enable dns metallb rbac storage openebs helm3 microk8s status --wait-ready","title":"Install Microk8s"},{"location":"gettingstarted/k8s-microk8s/#microk8s-installation-on-ubuntu","text":"We need to have a normal install of kubectl because of operator scripts sudo snap install microk8s --classic Add user to the microk8s group to no longer have to use the sudo command sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER Check microk8s status microk8s status --wait-ready Install required microk8s dependencies to deploy SC4SNMP. Note: when installing metallb you will be prompted for one or more IPs to use as entry points Into the cluster. If your plan to enable clustering, this IP should not be assigned to the host (floats) If you do not plan to cluster, then this IP may be the same IP as the host Note2: a single IP in cidr format is x.x.x.x/32 use CIDR or range syntax microk8s enable dns metallb rbac storage openebs helm3 microk8s status --wait-ready","title":"MicroK8s installation on Ubuntu"},{"location":"gettingstarted/sc4snmp-installation/","text":"SC4SNMP Helm installation \u00b6 Add SC4SNMP repository \u00b6 microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now the package should be visible in helm3 search command result: microk8s helm3 search repo snmp --devel Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / splunk - connect - for - snmp 0 . 11 . 0 - beta . 22 0 . 11 . 0 - beta . 22 A Helm chart for SNMP Connect for SNMP Download and modify values.yaml \u00b6 curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d Install SC4SNMP \u00b6 microk8s helm3 install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none From now on, when editing SC4SNMP configuration, the configuration change must be inserted in the corresponding section of values.yaml . For more details check configuration section. Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none Verify deployment \u00b6 In a few minutes, all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE snmp - splunk - connect - for - snmp - worker - 66685 fcb6d - f6rxb 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - scheduler - 6586488 d85 - t6j5d 1 / 1 Running 0 6 m4s snmp - mongodb - arbiter - 0 1 / 1 Running 0 6 m4s snmp - mibserver - 6 f575ddb7d - mmkmn 1 / 1 Running 0 6 m4s snmp - mongodb - 0 2 / 2 Running 0 6 m4s snmp - mongodb - 1 2 / 2 Running 0 4 m58s snmp - rabbitmq - 0 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - traps - 54 f79b945d - bmbg7 1 / 1 Running 0 6 m4s Test SNMP Traps \u00b6 Test the Trap by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system with SNMP installed. Replace the IP address 10.0.101.22 with the shared IP address above apt update apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.2.1.1.4 1 .3.6.1.2.1.1.4 s test Search Splunk: You should see one event per trap command with the host value of the test machine IP address index = \"netops\" sourcetype = \"sc4snmp:traps\" Test SNMP Poller \u00b6 Test the Poller by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system install snmpd. apt update apt-get install snmpd To test snmp poller, snmpd need to be configure to listening on external IP. To enabled listening snmpd to external IP, in configuration file: /etc/snmp/snmpd.conf replace the IP address 10.0.101.22 with the server IP address where snmpd is configured agentaddress 10.0.101.22,127.0.0.1,[::1] . Restart snmpd by execute command: service snmpd stop service snmpd start Configure SC4SNMP Poller to test add IP address which need to be poll. Add configuration entry in value.yaml file by replace the IP address 10.0.101.22 with the server IP address where snmpd were configured. poller: usernameSecrets: - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory: | address,version,community,walk_interval,profiles,SmartProfiles,delete 10 .0.101.22,public,60,,, Load value.yaml file in SC4SNMP microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none Check in Splunk Up to 1 min events appear in Splunk: index = \"netops\" sourcetype = \"sc4snmp:event\" Up to 1 min events appear in Splunk: | mpreview index = \"netmetrics\" | search sourcetype = \"sc4snmp:metric\"","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#sc4snmp-helm-installation","text":"","title":"SC4SNMP Helm installation"},{"location":"gettingstarted/sc4snmp-installation/#add-sc4snmp-repository","text":"microk8s helm3 repo add splunk - connect - for - snmp https : // splunk . github . io / splunk - connect - for - snmp microk8s helm3 repo update Now the package should be visible in helm3 search command result: microk8s helm3 search repo snmp --devel Example output: NAME CHART VERSION APP VERSION DESCRIPTION splunk - connect - for - snmp / splunk - connect - for - snmp 0 . 11 . 0 - beta . 22 0 . 11 . 0 - beta . 22 A Helm chart for SNMP Connect for SNMP","title":"Add SC4SNMP repository"},{"location":"gettingstarted/sc4snmp-installation/#download-and-modify-valuesyaml","text":"curl - o ~/ values . yaml https : // raw . githubusercontent . com / splunk / splunk - connect - for - snmp / develop / values . yaml values.yaml is being used during the installation process for configuring kubernetes values. Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token 450a69af-16a9-4f87-9628-c26f04ad3785 ###X.X.X.X### SHARED IP address used for SNMP Traps 10.202.18.166 Other variables to update in case you want to: variable description default splunk: protocol port of splunk instance https splunk: insecure_ssl is insecure ssl allowed \u201ctrue\u201d splunk: cluster_name name of the cluster \u201cfoo\u201d","title":"Download and modify values.yaml"},{"location":"gettingstarted/sc4snmp-installation/#install-sc4snmp","text":"microk8s helm3 install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none From now on, when editing SC4SNMP configuration, the configuration change must be inserted in the corresponding section of values.yaml . For more details check configuration section. Use the following command to propagate configuration changes: microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none","title":"Install SC4SNMP"},{"location":"gettingstarted/sc4snmp-installation/#verify-deployment","text":"In a few minutes, all pods should be up and running. It can be verified with: microk8s kubectl get pods -n sc4snmp Example output: NAME READY STATUS RESTARTS AGE snmp - splunk - connect - for - snmp - worker - 66685 fcb6d - f6rxb 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - scheduler - 6586488 d85 - t6j5d 1 / 1 Running 0 6 m4s snmp - mongodb - arbiter - 0 1 / 1 Running 0 6 m4s snmp - mibserver - 6 f575ddb7d - mmkmn 1 / 1 Running 0 6 m4s snmp - mongodb - 0 2 / 2 Running 0 6 m4s snmp - mongodb - 1 2 / 2 Running 0 4 m58s snmp - rabbitmq - 0 1 / 1 Running 0 6 m4s snmp - splunk - connect - for - snmp - traps - 54 f79b945d - bmbg7 1 / 1 Running 0 6 m4s","title":"Verify deployment"},{"location":"gettingstarted/sc4snmp-installation/#test-snmp-traps","text":"Test the Trap by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system with SNMP installed. Replace the IP address 10.0.101.22 with the shared IP address above apt update apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.2.1.1.4 1 .3.6.1.2.1.1.4 s test Search Splunk: You should see one event per trap command with the host value of the test machine IP address index = \"netops\" sourcetype = \"sc4snmp:traps\"","title":"Test SNMP Traps"},{"location":"gettingstarted/sc4snmp-installation/#test-snmp-poller","text":"Test the Poller by logging into Splunk and confirm the presence of events in snmp netops and metrics in netmetrics index Test the trap from a linux system install snmpd. apt update apt-get install snmpd To test snmp poller, snmpd need to be configure to listening on external IP. To enabled listening snmpd to external IP, in configuration file: /etc/snmp/snmpd.conf replace the IP address 10.0.101.22 with the server IP address where snmpd is configured agentaddress 10.0.101.22,127.0.0.1,[::1] . Restart snmpd by execute command: service snmpd stop service snmpd start Configure SC4SNMP Poller to test add IP address which need to be poll. Add configuration entry in value.yaml file by replace the IP address 10.0.101.22 with the server IP address where snmpd were configured. poller: usernameSecrets: - sc4snmp-homesecure-sha-aes - sc4snmp-homesecure-sha-des inventory: | address,version,community,walk_interval,profiles,SmartProfiles,delete 10 .0.101.22,public,60,,, Load value.yaml file in SC4SNMP microk8s helm3 upgrade --install snmp -f values.yaml splunk-connect-for-snmp/splunk-connect-for-snmp --namespace = sc4snmp --create-namespace --version <VERSION_TAG> variable description default VERSION_TAG is a tag of build eg. 0.11.0-beta.22 none Check in Splunk Up to 1 min events appear in Splunk: index = \"netops\" sourcetype = \"sc4snmp:event\" Up to 1 min events appear in Splunk: | mpreview index = \"netmetrics\" | search sourcetype = \"sc4snmp:metric\"","title":"Test SNMP Poller"},{"location":"gettingstarted/sck-installation/","text":"SPLUNK for Kubernetes installation \u00b6 The below steps are sufficient for a SCK installation for the SC4SNMP project. In case you want to investigate more, all information about Splunk Connect for Kubernetes is available here . Instalation steps \u00b6 Add SCK repository to HELM \u00b6 microk8s helm3 repo add splunk https : // splunk . github . io / splunk - connect - for - kubernetes Create values file \u00b6 In order to connect to SPLUNK instance, you must create a sck_values.yaml file with this structure, populating variables marked with \u201c###\u201d (as described below): #global settings global : logLevel : info splunk : hec : protocol : https insecureSSL : \"false\" host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### port : ###SPLUNK_PORT### kubernetes : clusterName : ###CLUSTER_NAME### #local config for logging chart splunk-kubernetes-logging : # Enable chart enabled : true # Determine logging level per chart logLevel : info containers : logFormatType : cri logFormat : \"%Y-%m-%dT%H:%M:%S.%N%:z\" # Filter on Namespace to reduce log noise from all namespaces fluentd : path : \"/var/log/containers/*_sc4snmp_*.log,/var/log/containers/*_sck_*.log\" kubernetes : securityContext : true # Set journald path. Update to reflect MicroK8s systemd services. See MicroK8s Docs. journalLogPath : /var/log/journal # Review flush intervals for Splunk Cloud vs Self-Managed back off timers buffer : \"@type\" : memory total_limit_size : 600m chunk_limit_size : 10m chunk_limit_records : 100000 flush_interval : 5s flush_thread_count : 1 overflow_action : block retry_max_times : 10 retry_type : periodic k8sMetadata : # Pod labels to collect podLabels : - app - k8s-app - release - environment - tier # In case snmp prefix is useful or if you want to remove \"kube\" sourcetypePrefix : \"kube\" splunk : hec : indexName : em_logs logs : sck : from : pod : sck-splunk-kubernetes- container : splunk-fluentd-k8s- multiline : firstline : /^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}\\:\\d{2}\\:\\d{2}\\s\\+\\d{4}\\s\\[\\w+\\]\\:/ separator : \"\\n\" flushInterval : 5 #local config for objects chart splunk-kubernetes-objects : # enable or diable objects enabled : false rbac : create : true serviceAccount : create : true name : splunk-kubernetes-objects kubernetes : insecureSSL : true objects : core : v1 : - name : pods - name : namespaces - name : component_statuses - name : nodes - name : services - name : events mode : watch splunk : hec : indexName : em_meta #local config for metrics chart splunk-kubernetes-metrics : # enable or disbale metrics enabled : false metricsInterval : 60s kubernetes : kubeletPort : 10255 kubeletPortAggregator : 10250 useRestClientSSL : false insecureSSL : true rbac : create : true serviceAccount : create : true name : splunk-kubernetes-metrics splunk : hec : indexName : em_metrics customFilters : node : tag : \"kube.node.**\" type : record_modifier body : |- <record> entity_type k8s_node </record> pod : tag : \"kube.pod.**\" type : record_modifier body : |- <record> entity_type k8s_pod </record> Values description \u00b6 Values required to be filled: Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token \u201c450a69af-16a9-4f87-9628-c26f04ad3785\u201d ###CLUSTER_NAME### name of the cluster \u201cfoo\u201d In case you want to change index names (note that in this case you need to keep consistent names in Splunk instance and SC4SNMP values file), you can override these variables: Index type variable description default value Logs index splunk-kubernetes-logging: splunk: hec: indexName: name of the logs index \u201cem_index\u201d Meta index splunk-kubernetes-objects: splunk: hec: indexName: name of the meta index \u201cem_meta\u201d Metrics index splunk-kubernetes-metrics: splunk: hec: indexName: name of the metrics index \u201cem_metrics\u201d Other variables you can override, if necessary: in case you need it: variable description default global: splunk: hec: protocol port of splunk instance \u201c8088\u201d global: splunk: hec: protocol insecure_ssl is insecure ssl allowed \u201cfalse\u201d Install SCK with HELM \u00b6 microk8s helm3 install sck-for-snmp -f sck_values.yaml splunk/splunk-connect-for-kubernetes","title":"Install Splunk for Kubernetes"},{"location":"gettingstarted/sck-installation/#splunk-for-kubernetes-installation","text":"The below steps are sufficient for a SCK installation for the SC4SNMP project. In case you want to investigate more, all information about Splunk Connect for Kubernetes is available here .","title":"SPLUNK for Kubernetes installation"},{"location":"gettingstarted/sck-installation/#instalation-steps","text":"","title":"Instalation steps"},{"location":"gettingstarted/sck-installation/#add-sck-repository-to-helm","text":"microk8s helm3 repo add splunk https : // splunk . github . io / splunk - connect - for - kubernetes","title":"Add SCK repository to HELM"},{"location":"gettingstarted/sck-installation/#create-values-file","text":"In order to connect to SPLUNK instance, you must create a sck_values.yaml file with this structure, populating variables marked with \u201c###\u201d (as described below): #global settings global : logLevel : info splunk : hec : protocol : https insecureSSL : \"false\" host : ###SPLUNK_HOST### token : ###SPLUNK_TOKEN### port : ###SPLUNK_PORT### kubernetes : clusterName : ###CLUSTER_NAME### #local config for logging chart splunk-kubernetes-logging : # Enable chart enabled : true # Determine logging level per chart logLevel : info containers : logFormatType : cri logFormat : \"%Y-%m-%dT%H:%M:%S.%N%:z\" # Filter on Namespace to reduce log noise from all namespaces fluentd : path : \"/var/log/containers/*_sc4snmp_*.log,/var/log/containers/*_sck_*.log\" kubernetes : securityContext : true # Set journald path. Update to reflect MicroK8s systemd services. See MicroK8s Docs. journalLogPath : /var/log/journal # Review flush intervals for Splunk Cloud vs Self-Managed back off timers buffer : \"@type\" : memory total_limit_size : 600m chunk_limit_size : 10m chunk_limit_records : 100000 flush_interval : 5s flush_thread_count : 1 overflow_action : block retry_max_times : 10 retry_type : periodic k8sMetadata : # Pod labels to collect podLabels : - app - k8s-app - release - environment - tier # In case snmp prefix is useful or if you want to remove \"kube\" sourcetypePrefix : \"kube\" splunk : hec : indexName : em_logs logs : sck : from : pod : sck-splunk-kubernetes- container : splunk-fluentd-k8s- multiline : firstline : /^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}\\:\\d{2}\\:\\d{2}\\s\\+\\d{4}\\s\\[\\w+\\]\\:/ separator : \"\\n\" flushInterval : 5 #local config for objects chart splunk-kubernetes-objects : # enable or diable objects enabled : false rbac : create : true serviceAccount : create : true name : splunk-kubernetes-objects kubernetes : insecureSSL : true objects : core : v1 : - name : pods - name : namespaces - name : component_statuses - name : nodes - name : services - name : events mode : watch splunk : hec : indexName : em_meta #local config for metrics chart splunk-kubernetes-metrics : # enable or disbale metrics enabled : false metricsInterval : 60s kubernetes : kubeletPort : 10255 kubeletPortAggregator : 10250 useRestClientSSL : false insecureSSL : true rbac : create : true serviceAccount : create : true name : splunk-kubernetes-metrics splunk : hec : indexName : em_metrics customFilters : node : tag : \"kube.node.**\" type : record_modifier body : |- <record> entity_type k8s_node </record> pod : tag : \"kube.pod.**\" type : record_modifier body : |- <record> entity_type k8s_pod </record>","title":"Create values file"},{"location":"gettingstarted/sck-installation/#values-description","text":"Values required to be filled: Placeholder Description Example ###SPLUNK_HOST### host address of splunk instance \u201ci-08c221389a3b9899a.ec2.splunkit.io\u201d ###SPLUNK_PORT### port number of splunk instance \u201c8088\u201d ###SPLUNK_TOKEN### Splunk HTTP Event Collector token \u201c450a69af-16a9-4f87-9628-c26f04ad3785\u201d ###CLUSTER_NAME### name of the cluster \u201cfoo\u201d In case you want to change index names (note that in this case you need to keep consistent names in Splunk instance and SC4SNMP values file), you can override these variables: Index type variable description default value Logs index splunk-kubernetes-logging: splunk: hec: indexName: name of the logs index \u201cem_index\u201d Meta index splunk-kubernetes-objects: splunk: hec: indexName: name of the meta index \u201cem_meta\u201d Metrics index splunk-kubernetes-metrics: splunk: hec: indexName: name of the metrics index \u201cem_metrics\u201d Other variables you can override, if necessary: in case you need it: variable description default global: splunk: hec: protocol port of splunk instance \u201c8088\u201d global: splunk: hec: protocol insecure_ssl is insecure ssl allowed \u201cfalse\u201d","title":"Values description"},{"location":"gettingstarted/sck-installation/#install-sck-with-helm","text":"microk8s helm3 install sck-for-snmp -f sck_values.yaml splunk/splunk-connect-for-kubernetes","title":"Install SCK with HELM"},{"location":"gettingstarted/splunk-requirements/","text":"Splunk requirements \u00b6 Prepare Splunk \u00b6 Requirements (Splunk Enterprise/Enterprise Cloud) \u00b6 Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes: em_metrics (metrics type) em_meta (event type) em_logs (event type) netmetrics (metrics type) netops (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server. If HA deployment will be used, the IP must be in addition to the managment interface of each cluster member. Obtain the ip address of an internal DNS server that is able to resolve the Splunk Endpoint. Requirements (Splunk Infrastructure Monitoring) \u00b6 Obtain the correct realm and token.","title":"Splunk Requirements"},{"location":"gettingstarted/splunk-requirements/#splunk-requirements","text":"","title":"Splunk requirements"},{"location":"gettingstarted/splunk-requirements/#prepare-splunk","text":"","title":"Prepare Splunk"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-enterpriseenterprise-cloud","text":"Complete the installation of Splunk IT Essentials Work OR Splunk IT Service Intelligence Verify the creation of the following indexes: em_metrics (metrics type) em_meta (event type) em_logs (event type) netmetrics (metrics type) netops (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server. If HA deployment will be used, the IP must be in addition to the managment interface of each cluster member. Obtain the ip address of an internal DNS server that is able to resolve the Splunk Endpoint.","title":"Requirements (Splunk Enterprise/Enterprise Cloud)"},{"location":"gettingstarted/splunk-requirements/#requirements-splunk-infrastructure-monitoring","text":"Obtain the correct realm and token.","title":"Requirements (Splunk Infrastructure Monitoring)"}]}