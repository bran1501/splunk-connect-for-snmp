{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Splunk Connect for SNMP \u00b6 THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback please let your account team know you are experimenting with our new solution. Splunk Connect for SNMP is an edge deployed containerized and highly available solution for collection of SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Home"},{"location":"#splunk-connect-for-snmp","text":"THIS IS BETA SOFTWARE Splunk welcomes your experimentation and feedback please let your account team know you are experimenting with our new solution. Splunk Connect for SNMP is an edge deployed containerized and highly available solution for collection of SNMP data for Splunk Enterprise, Splunk Enterprise Cloud and Splunk Infrastructure Monitoring.","title":"Splunk Connect for SNMP"},{"location":"configuration/","text":"Configuration \u00b6 Traps Configuration \u00b6 traps-server-config.yaml config.yaml Splunk Connect for SNMP supports receiving SNMPv1 traps, SNMPv2 traps, and SNMPv3 traps. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in traps-server-config.yaml . Non-authorized traps/informs will be dropped. Configure SNMPv1/v2c community strings \u00b6 Add SNMPv1/SNMPv2c community strings under v1/v2 section, respectively. Params : community string (required) - SNMPv1/SNMPv2c community string. Configure SNMPv3 users \u00b6 It gets a little more complex with respect to SNMPv3. The user database in a SNMPv3 application is actually referenced by a combination of the user's name (called a \"security Name\") and an identifier for the given SNMP application you're talking to (called an \"engineID\"). Therefore, both userName and engineID are required for SNMPv3 under v3 section. Params : userName (required) - A human-readable string representing the name of the SNMP USM user. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 authKey (optional) - Initial value of the secret authentication key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT privKey (optional) - Initial value of the secret encryption key. securityEngineId (required): The EngineID of the authoritative SNMP engine that the traps was sent from. e.g. snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" v3 : - userName : snmpv3test authKey : AuthPass1 privKey : PrivPass2 securityEngineId : 8000000004030201 - userName : snmpv3test2 authProtocol : SHA authKey : AuthPass11 privProtocol : aes privKey : PrivPass22 securityEngineId : 8000000004030202 - userName : snmpv3test3 securityEngineId : 8000000004030203 Poller \u00b6 Scheduler Configuration \u00b6 scheduler-config.yaml config.yaml scheduler-inventory.yaml inventory.csv Splunk Connect for SNMP supports polling from SNMPv1 agents, SNMPv2 agents, and SNMPv3 agents. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in scheduler-config.yaml . inventory.csv \u00b6 Inventory.csv acts as a lookup table where the poller application will read the SNMP agents' information and its corresponding queries information. \" host \" , \" version \" , \" community \" , \" profile \" , \" freqinseconds \" \" IP:Port of SNMP agents, where port is optional with default is 161 \" , \" An indication of SNMP versions \" , \" community string for SNMPv1/v2 OR userNanme for SNMPv3 \" , \" query info \" , \" query frequency in seconds \" \"e.g. 174.62.79.72 (IP only) | 174.62.79.72:161 (IP+port)\",\"e.g. 1 | 2c | 3\", \"e.g. public (SNMPv1/SNMPv2c community string) | testUser (SNMPv3 username, setup other params in config.yaml)\",\"e.g 1.3.6.1.2.1.1.9.1.3.1 (single oid for snmp get) | 1.3.6.1.2.1.1.9.1.3.* (oid for snmp walk to get subtree) | router (profile used to setup detials in config.yaml\", \"e.g. 30\" config.yaml \u00b6 config.yaml acts as an extension for inventory.csv for these three situations. 1. Configure optional parameters for SNMPv1/SNMPv2c community data \u00b6 Community-Based Security Model of SNMPv1/SNMPv2c may require more params, which can be set up in config.yaml. Add SNMPv1/SNMPv2c community string as Key under communities section. Add necessary parameters. Here are supported optional parameters: communityIndex (optional) - Unique index value of a row in snmpCommunityTable. If it is the only positional parameter, it is treated as a communityName. contextEngineId (optional) - Indicates the location of the context in which management information is accessed when using the community string specified by the communityName. contextName (optional) - The context in which management information is accessed when using the above communityName. tag (optional) - Arbitrary string that specifies a set of transport endpoints from which a command responder application will accept management requests with given communityName or to which notification originator application will send notifications when targets are specified by a tag value(s). 2. Configure optional parameters SNMPv3 users \u00b6 SNMPv3 users may require more params for different security levels, which can be set up in config.yaml. Add SNMPv3 userName as Key under usernames section. Add necessary parameters. Here are supported optional parameters: authKey (optional) - Initial value of the secret authentication key. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 privKey (optional) - Initial value of the secret encryption key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT securityEngineId (optional): The snmpEngineID of the authoritative SNMP engine to which a dateRequest message is to be sent. securityName (optional): Together with the snmpEngineID it identifies a row in the SNMP-USER-BASED-SM-MIB::usmUserTable that is to be used for securing the message. authKeyType (optional): int. Type of authKey material. privKeyType (optional): int. Type of privKey material. contextName : (optional) contextName is used to name an instance of MIB. SNMP engine may serve several instances of the same MIB within possibly multiple SNMP entities. SNMP context is a tool for unambiguously identifying a collection of MIB variables behind the SNMP engine. e.g. usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : testauthKey privKey : testprivKey authProtocol : SHA privProtocol : AES securityEngineId : 8000000004030201 securityName : authKeyType : 0 privKeyType : 0 contextName : \"4c9184f37cff01bcdc32dc486ec36961\" 3. Configure more detailed query information \u00b6 User can provide more detailed query information under profiles section to achieve two purposes: 1) query by mib string; 2) query multiple oids/mib string for one agent. In scheduler-inventory.yaml , add the profile string(e.g. router) to profile field under data > inventory.csv section. \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,router,30 In scheduler-config.yaml , add the desired query information under profiles > \\ > varBinds section as list entries. e.g. profiles > router > varBinds . When you use the mib string, you MUST follow the Syntax below [ \"MIB-Files\" , \"MIB object name\" , \"MIB index number\" ] Where \u201cMIB index number\u201d is optional. Specify the index number when you want to get the information for a specific interface. e.g. [\"SNMPv2-MIB\", \"sysUpTime\", 0] Don\u2019t put the index number when you want to get information for all interfaces. e.g. [\"SNMPv2-MIB\", \"sysORID\"] Note : A wrong index number would cause an error. If you are not sure which index exists, don\u2019t put it at all. For example, in the situation where [\"SNMPv2-MIB\", \"sysUpTime\", 0] exsits, both [\"SNMPv2-MIB\", \"sysUpTime\", 0] and [\"SNMPv2-MIB\", \"sysUpTime\"] will help you get [\"SNMPv2-MIB\", \"sysUpTime\", 0], while [\"SNMPv2-MIB\", \"sysUpTime\", 1] will throw erroe because index 1 doesn't exist for sysUpTime. profiles : router : varBinds : # Syntax: [ \"MIB-Files\", \"MIB object name\", \"MIB index number\"] - [ 'SNMPv2-MIB' , 'sysDescr' , 0 ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysORID' ] - [ 'CISCO-FC-MGMT-MIB' , 'cfcmPortLcStatsEntry' ] - [ 'EFM-CU-MIB' , 'efmCuPort' ] - '1.3.6.1.2.1.1.6.0' - '1.3.6.1.2.1.1.9.1.4.*' Test the poller \u00b6 SNMPv1/SNMPv2 You can change the inventory contents in scheduler-config.yaml and use following command to apply the changes to Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under section inventory.csv , content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in config.yaml section of scheduler-config.yaml file) frequency in seconds (how often SNMP connector should ask agent for data) `csv \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal,2c,public,1.3.6.1.2.1.1.9.1.3.*,60 ` kubectl apply -f deploy/sc4snmp/scheduler-config.yaml SNMPv3 Besides changing the inventory contents under section inventory.csv , you may need to set up security passphrases for the SNMPv3 under section config.yaml > usernames . Here are the steps to configure these two SNMPv3 Users. User Name Security Auth Priv Auth Priv Level Protocol Protocol Passphrase Passphrase testUser1 Auth,Priv MD5 DES auctoritas privatus testUser2 Auth,Priv SHA AES authpass privacypass Specify User Name under community filed in section inventory.csv . \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" host.docker.internal1,3,testUser1,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal2,3,testUser2,1.3.6.1.2.1.1.9.1.3.*,30 Specify other security params under section config.yaml > usernames . usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : authpass privKey : privacypass authProtocol : SHA privProtocol : AES Apply the changes. kubectl apply -f deploy/sc4snmp/scheduler-config.yaml","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#traps-configuration","text":"traps-server-config.yaml config.yaml Splunk Connect for SNMP supports receiving SNMPv1 traps, SNMPv2 traps, and SNMPv3 traps. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in traps-server-config.yaml . Non-authorized traps/informs will be dropped.","title":"Traps Configuration"},{"location":"configuration/#configure-snmpv1v2c-community-strings","text":"Add SNMPv1/SNMPv2c community strings under v1/v2 section, respectively. Params : community string (required) - SNMPv1/SNMPv2c community string.","title":"Configure SNMPv1/v2c community strings"},{"location":"configuration/#configure-snmpv3-users","text":"It gets a little more complex with respect to SNMPv3. The user database in a SNMPv3 application is actually referenced by a combination of the user's name (called a \"security Name\") and an identifier for the given SNMP application you're talking to (called an \"engineID\"). Therefore, both userName and engineID are required for SNMPv3 under v3 section. Params : userName (required) - A human-readable string representing the name of the SNMP USM user. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 authKey (optional) - Initial value of the secret authentication key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT privKey (optional) - Initial value of the secret encryption key. securityEngineId (required): The EngineID of the authoritative SNMP engine that the traps was sent from. e.g. snmp : communities : v1 : - public - \"my-area\" v2 : - public - \"my-area\" v3 : - userName : snmpv3test authKey : AuthPass1 privKey : PrivPass2 securityEngineId : 8000000004030201 - userName : snmpv3test2 authProtocol : SHA authKey : AuthPass11 privProtocol : aes privKey : PrivPass22 securityEngineId : 8000000004030202 - userName : snmpv3test3 securityEngineId : 8000000004030203","title":"Configure SNMPv3 users"},{"location":"configuration/#poller","text":"","title":"Poller"},{"location":"configuration/#scheduler-configuration","text":"scheduler-config.yaml config.yaml scheduler-inventory.yaml inventory.csv Splunk Connect for SNMP supports polling from SNMPv1 agents, SNMPv2 agents, and SNMPv3 agents. To make it work, please configure with authorized SNMPv1/SNMPv2c community strings and/or SNMPv3 users in scheduler-config.yaml .","title":"Scheduler Configuration"},{"location":"configuration/#inventorycsv","text":"Inventory.csv acts as a lookup table where the poller application will read the SNMP agents' information and its corresponding queries information. \" host \" , \" version \" , \" community \" , \" profile \" , \" freqinseconds \" \" IP:Port of SNMP agents, where port is optional with default is 161 \" , \" An indication of SNMP versions \" , \" community string for SNMPv1/v2 OR userNanme for SNMPv3 \" , \" query info \" , \" query frequency in seconds \" \"e.g. 174.62.79.72 (IP only) | 174.62.79.72:161 (IP+port)\",\"e.g. 1 | 2c | 3\", \"e.g. public (SNMPv1/SNMPv2c community string) | testUser (SNMPv3 username, setup other params in config.yaml)\",\"e.g 1.3.6.1.2.1.1.9.1.3.1 (single oid for snmp get) | 1.3.6.1.2.1.1.9.1.3.* (oid for snmp walk to get subtree) | router (profile used to setup detials in config.yaml\", \"e.g. 30\"","title":"inventory.csv"},{"location":"configuration/#configyaml","text":"config.yaml acts as an extension for inventory.csv for these three situations.","title":"config.yaml"},{"location":"configuration/#1-configure-optional-parameters-for-snmpv1snmpv2c-community-data","text":"Community-Based Security Model of SNMPv1/SNMPv2c may require more params, which can be set up in config.yaml. Add SNMPv1/SNMPv2c community string as Key under communities section. Add necessary parameters. Here are supported optional parameters: communityIndex (optional) - Unique index value of a row in snmpCommunityTable. If it is the only positional parameter, it is treated as a communityName. contextEngineId (optional) - Indicates the location of the context in which management information is accessed when using the community string specified by the communityName. contextName (optional) - The context in which management information is accessed when using the above communityName. tag (optional) - Arbitrary string that specifies a set of transport endpoints from which a command responder application will accept management requests with given communityName or to which notification originator application will send notifications when targets are specified by a tag value(s).","title":"1. Configure optional parameters for SNMPv1/SNMPv2c community data"},{"location":"configuration/#2-configure-optional-parameters-snmpv3-users","text":"SNMPv3 users may require more params for different security levels, which can be set up in config.yaml. Add SNMPv3 userName as Key under usernames section. Add necessary parameters. Here are supported optional parameters: authKey (optional) - Initial value of the secret authentication key. authProtocol (optional) - An indication of whether messages sent on behalf of this USM user can be authenticated, and if so, the type of authentication protocol that is used. If both authKey and authProtocol are not set, usmNoAuthProtocol is implied. If authKey is set and no authProtocol is specified, usmHMACMD5AuthProtocol takes effect. Supported authentication protocol identifiers are: None (default is authKey not given) MD5 (default if authKey is given) SHA SHA224 SHA256 SHA512 privKey (optional) - Initial value of the secret encryption key. privProtocol (optional) - An indication of whether messages sent on behalf of this USM user be encrypted, and if so, the type of encryption protocol that is used. If both privKey and privProtocol are not set, usmNoPrivProtocol is implied. If privKey is set and no privProtocol is specified, usmDESPrivProtocol takes effect. Supported encryption protocol identifiers are: None (default is privhKey not given) DES (default if privKey is given) 3DES AES AES128 AES192 AES192BLMT AES256 AES256BLMT securityEngineId (optional): The snmpEngineID of the authoritative SNMP engine to which a dateRequest message is to be sent. securityName (optional): Together with the snmpEngineID it identifies a row in the SNMP-USER-BASED-SM-MIB::usmUserTable that is to be used for securing the message. authKeyType (optional): int. Type of authKey material. privKeyType (optional): int. Type of privKey material. contextName : (optional) contextName is used to name an instance of MIB. SNMP engine may serve several instances of the same MIB within possibly multiple SNMP entities. SNMP context is a tool for unambiguously identifying a collection of MIB variables behind the SNMP engine. e.g. usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : testauthKey privKey : testprivKey authProtocol : SHA privProtocol : AES securityEngineId : 8000000004030201 securityName : authKeyType : 0 privKeyType : 0 contextName : \"4c9184f37cff01bcdc32dc486ec36961\"","title":"2. Configure optional parameters SNMPv3 users"},{"location":"configuration/#3-configure-more-detailed-query-information","text":"User can provide more detailed query information under profiles section to achieve two purposes: 1) query by mib string; 2) query multiple oids/mib string for one agent. In scheduler-inventory.yaml , add the profile string(e.g. router) to profile field under data > inventory.csv section. \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,router,30 In scheduler-config.yaml , add the desired query information under profiles > \\ > varBinds section as list entries. e.g. profiles > router > varBinds . When you use the mib string, you MUST follow the Syntax below [ \"MIB-Files\" , \"MIB object name\" , \"MIB index number\" ] Where \u201cMIB index number\u201d is optional. Specify the index number when you want to get the information for a specific interface. e.g. [\"SNMPv2-MIB\", \"sysUpTime\", 0] Don\u2019t put the index number when you want to get information for all interfaces. e.g. [\"SNMPv2-MIB\", \"sysORID\"] Note : A wrong index number would cause an error. If you are not sure which index exists, don\u2019t put it at all. For example, in the situation where [\"SNMPv2-MIB\", \"sysUpTime\", 0] exsits, both [\"SNMPv2-MIB\", \"sysUpTime\", 0] and [\"SNMPv2-MIB\", \"sysUpTime\"] will help you get [\"SNMPv2-MIB\", \"sysUpTime\", 0], while [\"SNMPv2-MIB\", \"sysUpTime\", 1] will throw erroe because index 1 doesn't exist for sysUpTime. profiles : router : varBinds : # Syntax: [ \"MIB-Files\", \"MIB object name\", \"MIB index number\"] - [ 'SNMPv2-MIB' , 'sysDescr' , 0 ] - [ 'SNMPv2-MIB' , 'sysUpTime' , 0 ] - [ 'SNMPv2-MIB' , 'sysORID' ] - [ 'CISCO-FC-MGMT-MIB' , 'cfcmPortLcStatsEntry' ] - [ 'EFM-CU-MIB' , 'efmCuPort' ] - '1.3.6.1.2.1.1.6.0' - '1.3.6.1.2.1.1.9.1.4.*'","title":"3. Configure more detailed query information"},{"location":"configuration/#test-the-poller","text":"SNMPv1/SNMPv2 You can change the inventory contents in scheduler-config.yaml and use following command to apply the changes to Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under section inventory.csv , content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in config.yaml section of scheduler-config.yaml file) frequency in seconds (how often SNMP connector should ask agent for data) `csv \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" 10.42.0.58,1,public,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal,2c,public,1.3.6.1.2.1.1.9.1.3.*,60 ` kubectl apply -f deploy/sc4snmp/scheduler-config.yaml SNMPv3 Besides changing the inventory contents under section inventory.csv , you may need to set up security passphrases for the SNMPv3 under section config.yaml > usernames . Here are the steps to configure these two SNMPv3 Users. User Name Security Auth Priv Auth Priv Level Protocol Protocol Passphrase Passphrase testUser1 Auth,Priv MD5 DES auctoritas privatus testUser2 Auth,Priv SHA AES authpass privacypass Specify User Name under community filed in section inventory.csv . \"host\", \"version\", \"community\", \"profile\", \"freqinseconds\" host.docker.internal1,3,testUser1,1.3.6.1.2.1.1.9.1.3.1,30 host.docker.internal2,3,testUser2,1.3.6.1.2.1.1.9.1.3.*,30 Specify other security params under section config.yaml > usernames . usernames : testUser1 : authKey : auctoritas privKey : privatus testUser2 : authKey : authpass privKey : privacypass authProtocol : SHA privProtocol : AES Apply the changes. kubectl apply -f deploy/sc4snmp/scheduler-config.yaml","title":"Test the poller"},{"location":"gettingstarted/","text":"Getting Started \u00b6 Prepare Splunk \u00b6 Requirements (Splunk Enterprise/Enterprise Cloud) \u00b6 Complete the installation of : 1.1 Splunk app for Infrastructure (Splunk Enterprise Customers) 1.2 Splunk IT Essentials Work (Splunk Enterprise Cloud Customers) Verify the creation of the following indexes : 1.1 em_metrics (metrics type) 1.2 em_meta (event type) 1.3 em_logs (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server if HA deployment will be used the IP must be in addition to the managment inteface of each cluster memember. Obtain the ip address of an internal DNS server able to resolve the Splunk Endpoint Requirements (Splunk Infrastructure Monitoring) \u00b6 Obtain the correct realm and token. Deploy \u00b6 This step will install SC4SNMP and its depdenencies including snapd, micrk8s and sck. This script has been tested with Centos 7, Centos 8, Redhat 8, and Ubuntu 20.04. Both interactive and non-interactive options are supported Deploy SC4SNMP Interactive \u00b6 curl -sfL https://raw.githubusercontent.com/splunk/splunk-connect-for-snmp/main/deploy/install.bash | sudo -E bash - Deploy SC4SNMP non-interactive \u00b6 curl -sfL https://raw.githubusercontent.com/splunk/splunk-connect-for-snmp/main/deploy/install.bash | \\ MODE = splunk \\ PROTO = https \\ INSECURE_SSL = true \\ HOST = i-08c221389a3b9899a.ec2.splunkit.io \\ PORT = 8088 \\ TOKEN = 450a69af-16a9-4f87-9628-c26f04ad3785 \\ METRICS_INDEX = em_metrics \\ EVENTS_INDEX = em_logs \\ META_INDEX = em_meta \\ CLUSTER_NAME = foo \\ SHAREDIP = 10 .202.18.166/32 \\ RESOLVERIP = 8 .8.4.4 \\ sudo -E bash - Confirm deployment using microk8s.kubectl get svc -n sc4snmp confirm the value of external-ip in the row below matches IP used above NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE sc4-snmp-traps LoadBalancer 10 .152.183.134 10 .202.6.253 162 :32652/UDP 28h Test Monioring with SCK (Requires Splunk) \u00b6 Confirm the following search returns results | mcatalog values(metric_name) where index=em_metrics AND metric_name=kube* AND host=<hostname> Test SNMP Traps \u00b6 Test the trap from a linux system with snmp installed replace the ip 10.0.101.22 with the shared ip above apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.6.3.1.1.5.1 1 .3.6.1.2.1.1.5.0 s test Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_logs sourcetype = \"sc4snmp:traps\" Setup Poller \u00b6 Test the poller by logging to Splunk and confirm presence of events in snmp em_logs and metrics in em_metrics index. * You can change the inventory contents in scheduler-config.yaml and use following command to apply the changes to Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under section inventory.csv, content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in convig.yaml section of scheduler-config.yaml file) frequency in seconds (how often SNMP connector should ask agent for data) curl -o ~/scheduler-inventory.yaml https://raw.githubusercontent.com/splunk/splunk-connect-for-snmp/main/deploy/sc4snmp/ftr/scheduler-inventory.yaml vi ~/scheduler-inventory.yaml # Remove the comment from line 2 and correct the ip and community value kubectl apply -n sc4snmp -f ~/scheduler-inventory.yaml Test Poller \u00b6 Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_meta sourcetype = \"sc4snmp:meta\" SNMPv2_MIB__sysLocation_0 = \"*\" | dedup host | mcatalog values ( metric_name ) where index = em_metrics AND metric_name = sc4snmp* AND host = <hostname> Maintain \u00b6 Manage configuration obtain and update communities, user/secrets and inventories","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting Started"},{"location":"gettingstarted/#prepare-splunk","text":"","title":"Prepare Splunk"},{"location":"gettingstarted/#requirements-splunk-enterpriseenterprise-cloud","text":"Complete the installation of : 1.1 Splunk app for Infrastructure (Splunk Enterprise Customers) 1.2 Splunk IT Essentials Work (Splunk Enterprise Cloud Customers) Verify the creation of the following indexes : 1.1 em_metrics (metrics type) 1.2 em_meta (event type) 1.3 em_logs (event type) Create or obtain a new Splunk HTTP Event Collector token and the correct https endpoint. Verify the token using curl Note: The endpoint must use a publicly trusted certificate authority. The SHARED IP address to be used for SNMP Traps. Note Simple and POC deployments will use the same IP as the host server if HA deployment will be used the IP must be in addition to the managment inteface of each cluster memember. Obtain the ip address of an internal DNS server able to resolve the Splunk Endpoint","title":"Requirements (Splunk Enterprise/Enterprise Cloud)"},{"location":"gettingstarted/#requirements-splunk-infrastructure-monitoring","text":"Obtain the correct realm and token.","title":"Requirements (Splunk Infrastructure Monitoring)"},{"location":"gettingstarted/#deploy","text":"This step will install SC4SNMP and its depdenencies including snapd, micrk8s and sck. This script has been tested with Centos 7, Centos 8, Redhat 8, and Ubuntu 20.04. Both interactive and non-interactive options are supported","title":"Deploy"},{"location":"gettingstarted/#deploy-sc4snmp-interactive","text":"curl -sfL https://raw.githubusercontent.com/splunk/splunk-connect-for-snmp/main/deploy/install.bash | sudo -E bash -","title":"Deploy SC4SNMP Interactive"},{"location":"gettingstarted/#deploy-sc4snmp-non-interactive","text":"curl -sfL https://raw.githubusercontent.com/splunk/splunk-connect-for-snmp/main/deploy/install.bash | \\ MODE = splunk \\ PROTO = https \\ INSECURE_SSL = true \\ HOST = i-08c221389a3b9899a.ec2.splunkit.io \\ PORT = 8088 \\ TOKEN = 450a69af-16a9-4f87-9628-c26f04ad3785 \\ METRICS_INDEX = em_metrics \\ EVENTS_INDEX = em_logs \\ META_INDEX = em_meta \\ CLUSTER_NAME = foo \\ SHAREDIP = 10 .202.18.166/32 \\ RESOLVERIP = 8 .8.4.4 \\ sudo -E bash - Confirm deployment using microk8s.kubectl get svc -n sc4snmp confirm the value of external-ip in the row below matches IP used above NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE sc4-snmp-traps LoadBalancer 10 .152.183.134 10 .202.6.253 162 :32652/UDP 28h","title":"Deploy SC4SNMP non-interactive"},{"location":"gettingstarted/#test-monioring-with-sck-requires-splunk","text":"Confirm the following search returns results | mcatalog values(metric_name) where index=em_metrics AND metric_name=kube* AND host=<hostname>","title":"Test Monioring with SCK (Requires Splunk)"},{"location":"gettingstarted/#test-snmp-traps","text":"Test the trap from a linux system with snmp installed replace the ip 10.0.101.22 with the shared ip above apt-get install snmpd snmptrap -v2c -c public 10 .0.101.22 123 1 .3.6.1.6.3.1.1.5.1 1 .3.6.1.2.1.1.5.0 s test Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_logs sourcetype = \"sc4snmp:traps\"","title":"Test SNMP Traps"},{"location":"gettingstarted/#setup-poller","text":"Test the poller by logging to Splunk and confirm presence of events in snmp em_logs and metrics in em_metrics index. * You can change the inventory contents in scheduler-config.yaml and use following command to apply the changes to Kubernetes cluster. Agents configuration is placed in scheduler-config.yaml under section inventory.csv, content below is interpreted as csv file with following columns: host (IP or name) version of SNMP protocol community string authorisation phrase profile of device (varBinds of profiles can be found in convig.yaml section of scheduler-config.yaml file) frequency in seconds (how often SNMP connector should ask agent for data) curl -o ~/scheduler-inventory.yaml https://raw.githubusercontent.com/splunk/splunk-connect-for-snmp/main/deploy/sc4snmp/ftr/scheduler-inventory.yaml vi ~/scheduler-inventory.yaml # Remove the comment from line 2 and correct the ip and community value kubectl apply -n sc4snmp -f ~/scheduler-inventory.yaml","title":"Setup Poller"},{"location":"gettingstarted/#test-poller","text":"Search splunk, one event per trap command with the host value of the test machine ip will be found index = em_meta sourcetype = \"sc4snmp:meta\" SNMPv2_MIB__sysLocation_0 = \"*\" | dedup host | mcatalog values ( metric_name ) where index = em_metrics AND metric_name = sc4snmp* AND host = <hostname>","title":"Test Poller"},{"location":"gettingstarted/#maintain","text":"Manage configuration obtain and update communities, user/secrets and inventories","title":"Maintain"},{"location":"planning/","text":"Planning \u00b6 Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances where a more feature complete solution such as the Splunk Universal Forwarder is not available. Architecture \u00b6 SC4SNMP is deployed using a Kubernetes distribution typically MicroK8s, deseigned to be a low touch experience for integration with sensitive edge network devices it will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall. Requirements \u00b6 A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create of obtain real and token Planning Infrastructure \u00b6 Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP (SC4SNMP) above limitations need to be taken under consideration.","title":"Planning"},{"location":"planning/#planning","text":"Splunk Connect for SNMP (SC4SNMP) is a solution that allows the customer to \"get\" data from network devices and appliances where a more feature complete solution such as the Splunk Universal Forwarder is not available.","title":"Planning"},{"location":"planning/#architecture","text":"SC4SNMP is deployed using a Kubernetes distribution typically MicroK8s, deseigned to be a low touch experience for integration with sensitive edge network devices it will typically be deployed in the same network management zone as the monitored devices and seperated from Splunk by an existing firewall.","title":"Architecture"},{"location":"planning/#requirements","text":"A supported deployment of MicroK8s 16 Core/32 threads x64 architecture server or vm (single instance) 12 GB ram HA Requires 3 or more instances (odd numbers) 8 core/16 thread 16 GB ram 100 GB root mount http access (non proxy) allowed for the HTTP(s) connection from SC4SNMP to the Splunk destination. Splunk Enterprise/Cloud 8.x and or Splunk Infrastructure Monitoring (SignalFX) Splunk Enterprise/Cloud specific Requirements : - Splunk ITSI or Splunk IT Work - Ability to create a HEC token - Ability to create event and metrics indexes (or use existing) Splunk Infrastructure Monitoring specific requirements : - Ability to create of obtain real and token","title":"Requirements"},{"location":"planning/#planning-infrastructure","text":"Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 12 GB ram will be able to handle up to 1300 SNMP TRAPs per sec. Single installation of Splunk Connect for SNMP (SC4SNMP) on machine with 16 Core/32 threads x64 and 64 GB ram will be able to handle up to 1300 SNMP GETs per sec. When planning infrastructure for Splunk Connect for SNMP (SC4SNMP) above limitations need to be taken under consideration.","title":"Planning Infrastructure"}]}